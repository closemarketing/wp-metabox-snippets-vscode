{
    "Class: _WP_Dependency": {
        "prefix": "_WP_Dependency",
        "body": "_WP_Dependency",
        "description": "Class _WP_Dependency"
    },
    "Class: _WP_Editors": {
        "prefix": "_WP_Editors",
        "body": "_WP_Editors",
        "description": "Facilitates adding of the WordPress editor as used on the Write and Edit screens."
    },
    "Class: _WP_List_Table_Compat": {
        "prefix": "_WP_List_Table_Compat",
        "body": "_WP_List_Table_Compat",
        "description": "Helper class to be used only by back compat functions"
    },
    "Class: Akismet": {
        "prefix": "Akismet",
        "body": "Akismet",
        "description": ""
    },
    "Class: Akismet_Admin": {
        "prefix": "Akismet_Admin",
        "body": "Akismet_Admin",
        "description": ""
    },
    "Class: Akismet_CLI": {
        "prefix": "Akismet_CLI",
        "body": "Akismet_CLI",
        "description": "Filter spam comments."
    },
    "Class: Akismet_REST_API": {
        "prefix": "Akismet_REST_API",
        "body": "Akismet_REST_API",
        "description": ""
    },
    "Class: Akismet_Widget": {
        "prefix": "Akismet_Widget",
        "body": "Akismet_Widget",
        "description": "Core base class extended to register widgets."
    },
    "Class: AMFReader": {
        "prefix": "AMFReader",
        "body": "AMFReader",
        "description": ""
    },
    "Class: AMFStream": {
        "prefix": "AMFStream",
        "body": "AMFStream",
        "description": ""
    },
    "Class: AtomEntry": {
        "prefix": "AtomEntry",
        "body": "AtomEntry",
        "description": "Structure that store Atom Entry Properties"
    },
    "Class: AtomFeed": {
        "prefix": "AtomFeed",
        "body": "AtomFeed",
        "description": "Structure that store common Atom Feed Properties"
    },
    "Class: AtomParser": {
        "prefix": "AtomParser",
        "body": "AtomParser",
        "description": "AtomLib Atom Parser API"
    },
    "Class: Automatic_Upgrader_Skin": {
        "prefix": "Automatic_Upgrader_Skin",
        "body": "Automatic_Upgrader_Skin",
        "description": "Upgrader Skin for Automatic WordPress Upgrades"
    },
    "Class: AVCSequenceParameterSetReader": {
        "prefix": "AVCSequenceParameterSetReader",
        "body": "AVCSequenceParameterSetReader",
        "description": ""
    },
    "Class: Bulk_Plugin_Upgrader_Skin": {
        "prefix": "Bulk_Plugin_Upgrader_Skin",
        "body": "Bulk_Plugin_Upgrader_Skin",
        "description": "Bulk Plugin Upgrader Skin for WordPress Plugin Upgrades."
    },
    "Class: Bulk_Theme_Upgrader_Skin": {
        "prefix": "Bulk_Theme_Upgrader_Skin",
        "body": "Bulk_Theme_Upgrader_Skin",
        "description": "Bulk Theme Upgrader Skin for WordPress Theme Upgrades."
    },
    "Class: Bulk_Upgrader_Skin": {
        "prefix": "Bulk_Upgrader_Skin",
        "body": "Bulk_Upgrader_Skin",
        "description": "Generic Bulk Upgrader Skin for WordPress Upgrades."
    },
    "Class: Core_Upgrader": {
        "prefix": "Core_Upgrader",
        "body": "Core_Upgrader",
        "description": "Core class used for updating core."
    },
    "Class: Custom_Background": {
        "prefix": "Custom_Background",
        "body": "Custom_Background",
        "description": "The custom background class."
    },
    "Class: Custom_Image_Header": {
        "prefix": "Custom_Image_Header",
        "body": "Custom_Image_Header",
        "description": "The custom header image class."
    },
    "Class: Error": {
        "prefix": "Error",
        "body": "Error",
        "description": ""
    },
    "Class: File_Upload_Upgrader": {
        "prefix": "File_Upload_Upgrader",
        "body": "File_Upload_Upgrader",
        "description": "Core class used for handling file uploads."
    },
    "Class: ftp": {
        "prefix": "ftp",
        "body": "ftp",
        "description": "FTP implementation using fsockopen to connect."
    },
    "Class: ftp_base": {
        "prefix": "ftp_base",
        "body": "ftp_base",
        "description": "PemFTP base class"
    },
    "Class: ftp_pure": {
        "prefix": "ftp_pure",
        "body": "ftp_pure",
        "description": "FTP implementation using fsockopen to connect."
    },
    "Class: ftp_sockets": {
        "prefix": "ftp_sockets",
        "body": "ftp_sockets",
        "description": "Socket Based FTP implementation"
    },
    "Class: getID3": {
        "prefix": "getID3",
        "body": "getID3",
        "description": ""
    },
    "Class: getid3_ac3": {
        "prefix": "getid3_ac3",
        "body": "getid3_ac3",
        "description": ""
    },
    "Class: getid3_apetag": {
        "prefix": "getid3_apetag",
        "body": "getid3_apetag",
        "description": ""
    },
    "Class: getid3_asf": {
        "prefix": "getid3_asf",
        "body": "getid3_asf",
        "description": ""
    },
    "Class: getid3_dts": {
        "prefix": "getid3_dts",
        "body": "getid3_dts",
        "description": ""
    },
    "Class: getid3_exception": {
        "prefix": "getid3_exception",
        "body": "getid3_exception",
        "description": ""
    },
    "Class: getid3_flac": {
        "prefix": "getid3_flac",
        "body": "getid3_flac",
        "description": ""
    },
    "Class: getid3_flv": {
        "prefix": "getid3_flv",
        "body": "getid3_flv",
        "description": ""
    },
    "Class: getid3_handler": {
        "prefix": "getid3_handler",
        "body": "getid3_handler",
        "description": ""
    },
    "Class: getid3_id3v1": {
        "prefix": "getid3_id3v1",
        "body": "getid3_id3v1",
        "description": ""
    },
    "Class: getid3_id3v2": {
        "prefix": "getid3_id3v2",
        "body": "getid3_id3v2",
        "description": ""
    },
    "Class: getid3_lib": {
        "prefix": "getid3_lib",
        "body": "getid3_lib",
        "description": ""
    },
    "Class: getid3_lyrics3": {
        "prefix": "getid3_lyrics3",
        "body": "getid3_lyrics3",
        "description": ""
    },
    "Class: getid3_matroska": {
        "prefix": "getid3_matroska",
        "body": "getid3_matroska",
        "description": ""
    },
    "Class: getid3_mp3": {
        "prefix": "getid3_mp3",
        "body": "getid3_mp3",
        "description": ""
    },
    "Class: getid3_ogg": {
        "prefix": "getid3_ogg",
        "body": "getid3_ogg",
        "description": ""
    },
    "Class: getid3_quicktime": {
        "prefix": "getid3_quicktime",
        "body": "getid3_quicktime",
        "description": ""
    },
    "Class: getid3_riff": {
        "prefix": "getid3_riff",
        "body": "getid3_riff",
        "description": ""
    },
    "Class: Gettext_Translations": {
        "prefix": "Gettext_Translations",
        "body": "Gettext_Translations",
        "description": ""
    },
    "Class: IXR_Base64": {
        "prefix": "IXR_Base64",
        "body": "IXR_Base64",
        "description": "IXR_Base64"
    },
    "Class: IXR_Client": {
        "prefix": "IXR_Client",
        "body": "IXR_Client",
        "description": "IXR_Client"
    },
    "Class: IXR_ClientMulticall": {
        "prefix": "IXR_ClientMulticall",
        "body": "IXR_ClientMulticall",
        "description": "IXR_ClientMulticall"
    },
    "Class: IXR_Date": {
        "prefix": "IXR_Date",
        "body": "IXR_Date",
        "description": "IXR_Date"
    },
    "Class: IXR_Error": {
        "prefix": "IXR_Error",
        "body": "IXR_Error",
        "description": "IXR_Error"
    },
    "Class: IXR_IntrospectionServer": {
        "prefix": "IXR_IntrospectionServer",
        "body": "IXR_IntrospectionServer",
        "description": "IXR_IntrospectionServer"
    },
    "Class: IXR_Message": {
        "prefix": "IXR_Message",
        "body": "IXR_Message",
        "description": "IXR_MESSAGE"
    },
    "Class: IXR_Request": {
        "prefix": "IXR_Request",
        "body": "IXR_Request",
        "description": "IXR_Request"
    },
    "Class: IXR_Server": {
        "prefix": "IXR_Server",
        "body": "IXR_Server",
        "description": "IXR_Server"
    },
    "Class: IXR_Value": {
        "prefix": "IXR_Value",
        "body": "IXR_Value",
        "description": "IXR_Value"
    },
    "Class: Language_Pack_Upgrader": {
        "prefix": "Language_Pack_Upgrader",
        "body": "Language_Pack_Upgrader",
        "description": "Core class used for updating/installing language packs (translations) for plugins, themes, and core."
    },
    "Class: Language_Pack_Upgrader_Skin": {
        "prefix": "Language_Pack_Upgrader_Skin",
        "body": "Language_Pack_Upgrader_Skin",
        "description": "Translation Upgrader Skin for WordPress Translation Upgrades."
    },
    "Class: MagpieRSS": {
        "prefix": "MagpieRSS",
        "body": "MagpieRSS",
        "description": ""
    },
    "Class: MO": {
        "prefix": "MO",
        "body": "MO",
        "description": ""
    },
    "Class: NOOP_Translations": {
        "prefix": "NOOP_Translations",
        "body": "NOOP_Translations",
        "description": "Provides the same interface as Translations, but doesn&#039;t do anything"
    },
    "Class: PasswordHash": {
        "prefix": "PasswordHash",
        "body": "PasswordHash",
        "description": "Portable PHP password hashing framework."
    },
    "Class: PclZip": {
        "prefix": "PclZip",
        "body": "PclZip",
        "description": ""
    },
    "Class: PHPMailer": {
        "prefix": "PHPMailer",
        "body": "PHPMailer",
        "description": "PHPMailer - PHP email creation and transport class."
    },
    "Class: phpmailerException": {
        "prefix": "phpmailerException",
        "body": "phpmailerException",
        "description": "PHPMailer exception handler"
    },
    "Class: Plugin_Installer_Skin": {
        "prefix": "Plugin_Installer_Skin",
        "body": "Plugin_Installer_Skin",
        "description": "Plugin Installer Skin for WordPress Plugin Installer."
    },
    "Class: Plugin_Upgrader": {
        "prefix": "Plugin_Upgrader",
        "body": "Plugin_Upgrader",
        "description": "Core class used for upgrading/installing plugins."
    },
    "Class: Plugin_Upgrader_Skin": {
        "prefix": "Plugin_Upgrader_Skin",
        "body": "Plugin_Upgrader_Skin",
        "description": "Plugin Upgrader Skin for WordPress Plugin Upgrades."
    },
    "Class: Plural_Forms": {
        "prefix": "Plural_Forms",
        "body": "Plural_Forms",
        "description": "A gettext Plural-Forms parser."
    },
    "Class: PO": {
        "prefix": "PO",
        "body": "PO",
        "description": ""
    },
    "Class: POMO_CachedFileReader": {
        "prefix": "POMO_CachedFileReader",
        "body": "POMO_CachedFileReader",
        "description": "Reads the contents of the file in the beginning."
    },
    "Class: POMO_CachedIntFileReader": {
        "prefix": "POMO_CachedIntFileReader",
        "body": "POMO_CachedIntFileReader",
        "description": "Reads the contents of the file in the beginning."
    },
    "Class: POMO_FileReader": {
        "prefix": "POMO_FileReader",
        "body": "POMO_FileReader",
        "description": ""
    },
    "Class: POMO_Reader": {
        "prefix": "POMO_Reader",
        "body": "POMO_Reader",
        "description": ""
    },
    "Class: POMO_StringReader": {
        "prefix": "POMO_StringReader",
        "body": "POMO_StringReader",
        "description": "Provides file-like methods for manipulating a string instead of a physical file."
    },
    "Class: POP3": {
        "prefix": "POP3",
        "body": "POP3",
        "description": "mail_fetch/setup.php"
    },
    "Class: Requests": {
        "prefix": "Requests",
        "body": "Requests",
        "description": "Requests for PHP"
    },
    "Class: Requests_Auth_Basic": {
        "prefix": "Requests_Auth_Basic",
        "body": "Requests_Auth_Basic",
        "description": "Basic Authentication provider"
    },
    "Class: Requests_Cookie": {
        "prefix": "Requests_Cookie",
        "body": "Requests_Cookie",
        "description": "Cookie storage object"
    },
    "Class: Requests_Cookie_Jar": {
        "prefix": "Requests_Cookie_Jar",
        "body": "Requests_Cookie_Jar",
        "description": "Cookie holder object"
    },
    "Class: Requests_Exception": {
        "prefix": "Requests_Exception",
        "body": "Requests_Exception",
        "description": "Exception for HTTP requests"
    },
    "Class: Requests_Exception_HTTP": {
        "prefix": "Requests_Exception_HTTP",
        "body": "Requests_Exception_HTTP",
        "description": "Exception based on HTTP response"
    },
    "Class: Requests_Exception_HTTP_304": {
        "prefix": "Requests_Exception_HTTP_304",
        "body": "Requests_Exception_HTTP_304",
        "description": "Exception for 304 Not Modified responses"
    },
    "Class: Requests_Exception_HTTP_305": {
        "prefix": "Requests_Exception_HTTP_305",
        "body": "Requests_Exception_HTTP_305",
        "description": "Exception for 305 Use Proxy responses"
    },
    "Class: Requests_Exception_HTTP_306": {
        "prefix": "Requests_Exception_HTTP_306",
        "body": "Requests_Exception_HTTP_306",
        "description": "Exception for 306 Switch Proxy responses"
    },
    "Class: Requests_Exception_HTTP_400": {
        "prefix": "Requests_Exception_HTTP_400",
        "body": "Requests_Exception_HTTP_400",
        "description": "Exception for 400 Bad Request responses"
    },
    "Class: Requests_Exception_HTTP_401": {
        "prefix": "Requests_Exception_HTTP_401",
        "body": "Requests_Exception_HTTP_401",
        "description": "Exception for 401 Unauthorized responses"
    },
    "Class: Requests_Exception_HTTP_402": {
        "prefix": "Requests_Exception_HTTP_402",
        "body": "Requests_Exception_HTTP_402",
        "description": "Exception for 402 Payment Required responses"
    },
    "Class: Requests_Exception_HTTP_403": {
        "prefix": "Requests_Exception_HTTP_403",
        "body": "Requests_Exception_HTTP_403",
        "description": "Exception for 403 Forbidden responses"
    },
    "Class: Requests_Exception_HTTP_404": {
        "prefix": "Requests_Exception_HTTP_404",
        "body": "Requests_Exception_HTTP_404",
        "description": "Exception for 404 Not Found responses"
    },
    "Class: Requests_Exception_HTTP_405": {
        "prefix": "Requests_Exception_HTTP_405",
        "body": "Requests_Exception_HTTP_405",
        "description": "Exception for 405 Method Not Allowed responses"
    },
    "Class: Requests_Exception_HTTP_406": {
        "prefix": "Requests_Exception_HTTP_406",
        "body": "Requests_Exception_HTTP_406",
        "description": "Exception for 406 Not Acceptable responses"
    },
    "Class: Requests_Exception_HTTP_407": {
        "prefix": "Requests_Exception_HTTP_407",
        "body": "Requests_Exception_HTTP_407",
        "description": "Exception for 407 Proxy Authentication Required responses"
    },
    "Class: Requests_Exception_HTTP_408": {
        "prefix": "Requests_Exception_HTTP_408",
        "body": "Requests_Exception_HTTP_408",
        "description": "Exception for 408 Request Timeout responses"
    },
    "Class: Requests_Exception_HTTP_409": {
        "prefix": "Requests_Exception_HTTP_409",
        "body": "Requests_Exception_HTTP_409",
        "description": "Exception for 409 Conflict responses"
    },
    "Class: Requests_Exception_HTTP_410": {
        "prefix": "Requests_Exception_HTTP_410",
        "body": "Requests_Exception_HTTP_410",
        "description": "Exception for 410 Gone responses"
    },
    "Class: Requests_Exception_HTTP_411": {
        "prefix": "Requests_Exception_HTTP_411",
        "body": "Requests_Exception_HTTP_411",
        "description": "Exception for 411 Length Required responses"
    },
    "Class: Requests_Exception_HTTP_412": {
        "prefix": "Requests_Exception_HTTP_412",
        "body": "Requests_Exception_HTTP_412",
        "description": "Exception for 412 Precondition Failed responses"
    },
    "Class: Requests_Exception_HTTP_413": {
        "prefix": "Requests_Exception_HTTP_413",
        "body": "Requests_Exception_HTTP_413",
        "description": "Exception for 413 Request Entity Too Large responses"
    },
    "Class: Requests_Exception_HTTP_414": {
        "prefix": "Requests_Exception_HTTP_414",
        "body": "Requests_Exception_HTTP_414",
        "description": "Exception for 414 Request-URI Too Large responses"
    },
    "Class: Requests_Exception_HTTP_415": {
        "prefix": "Requests_Exception_HTTP_415",
        "body": "Requests_Exception_HTTP_415",
        "description": "Exception for 415 Unsupported Media Type responses"
    },
    "Class: Requests_Exception_HTTP_416": {
        "prefix": "Requests_Exception_HTTP_416",
        "body": "Requests_Exception_HTTP_416",
        "description": "Exception for 416 Requested Range Not Satisfiable responses"
    },
    "Class: Requests_Exception_HTTP_417": {
        "prefix": "Requests_Exception_HTTP_417",
        "body": "Requests_Exception_HTTP_417",
        "description": "Exception for 417 Expectation Failed responses"
    },
    "Class: Requests_Exception_HTTP_418": {
        "prefix": "Requests_Exception_HTTP_418",
        "body": "Requests_Exception_HTTP_418",
        "description": "Exception for 418 I&#039;m A Teapot responses"
    },
    "Class: Requests_Exception_HTTP_428": {
        "prefix": "Requests_Exception_HTTP_428",
        "body": "Requests_Exception_HTTP_428",
        "description": "Exception for 428 Precondition Required responses"
    },
    "Class: Requests_Exception_HTTP_429": {
        "prefix": "Requests_Exception_HTTP_429",
        "body": "Requests_Exception_HTTP_429",
        "description": "Exception for 429 Too Many Requests responses"
    },
    "Class: Requests_Exception_HTTP_431": {
        "prefix": "Requests_Exception_HTTP_431",
        "body": "Requests_Exception_HTTP_431",
        "description": "Exception for 431 Request Header Fields Too Large responses"
    },
    "Class: Requests_Exception_HTTP_500": {
        "prefix": "Requests_Exception_HTTP_500",
        "body": "Requests_Exception_HTTP_500",
        "description": "Exception for 500 Internal Server Error responses"
    },
    "Class: Requests_Exception_HTTP_501": {
        "prefix": "Requests_Exception_HTTP_501",
        "body": "Requests_Exception_HTTP_501",
        "description": "Exception for 501 Not Implemented responses"
    },
    "Class: Requests_Exception_HTTP_502": {
        "prefix": "Requests_Exception_HTTP_502",
        "body": "Requests_Exception_HTTP_502",
        "description": "Exception for 502 Bad Gateway responses"
    },
    "Class: Requests_Exception_HTTP_503": {
        "prefix": "Requests_Exception_HTTP_503",
        "body": "Requests_Exception_HTTP_503",
        "description": "Exception for 503 Service Unavailable responses"
    },
    "Class: Requests_Exception_HTTP_504": {
        "prefix": "Requests_Exception_HTTP_504",
        "body": "Requests_Exception_HTTP_504",
        "description": "Exception for 504 Gateway Timeout responses"
    },
    "Class: Requests_Exception_HTTP_505": {
        "prefix": "Requests_Exception_HTTP_505",
        "body": "Requests_Exception_HTTP_505",
        "description": "Exception for 505 HTTP Version Not Supported responses"
    },
    "Class: Requests_Exception_HTTP_511": {
        "prefix": "Requests_Exception_HTTP_511",
        "body": "Requests_Exception_HTTP_511",
        "description": "Exception for 511 Network Authentication Required responses"
    },
    "Class: Requests_Exception_HTTP_Unknown": {
        "prefix": "Requests_Exception_HTTP_Unknown",
        "body": "Requests_Exception_HTTP_Unknown",
        "description": "Exception for unknown status responses"
    },
    "Class: Requests_Exception_Transport": {
        "prefix": "Requests_Exception_Transport",
        "body": "Requests_Exception_Transport",
        "description": "Exception for HTTP requests"
    },
    "Class: Requests_Exception_Transport_cURL": {
        "prefix": "Requests_Exception_Transport_cURL",
        "body": "Requests_Exception_Transport_cURL",
        "description": "Exception for HTTP requests"
    },
    "Class: Requests_Hooks": {
        "prefix": "Requests_Hooks",
        "body": "Requests_Hooks",
        "description": "Handles adding and dispatching events"
    },
    "Class: Requests_IDNAEncoder": {
        "prefix": "Requests_IDNAEncoder",
        "body": "Requests_IDNAEncoder",
        "description": "IDNA URL encoder"
    },
    "Class: Requests_IPv6": {
        "prefix": "Requests_IPv6",
        "body": "Requests_IPv6",
        "description": "Class to validate and to work with IPv6 addresses"
    },
    "Class: Requests_IRI": {
        "prefix": "Requests_IRI",
        "body": "Requests_IRI",
        "description": "IRI parser/serialiser/normaliser"
    },
    "Class: Requests_Proxy_HTTP": {
        "prefix": "Requests_Proxy_HTTP",
        "body": "Requests_Proxy_HTTP",
        "description": "HTTP Proxy connection interface"
    },
    "Class: Requests_Response": {
        "prefix": "Requests_Response",
        "body": "Requests_Response",
        "description": "HTTP response class"
    },
    "Class: Requests_Response_Headers": {
        "prefix": "Requests_Response_Headers",
        "body": "Requests_Response_Headers",
        "description": "Case-insensitive dictionary, suitable for HTTP headers"
    },
    "Class: Requests_Session": {
        "prefix": "Requests_Session",
        "body": "Requests_Session",
        "description": "Session handler for persistent requests and default parameters"
    },
    "Class: Requests_SSL": {
        "prefix": "Requests_SSL",
        "body": "Requests_SSL",
        "description": "SSL utilities for Requests"
    },
    "Class: Requests_Transport_cURL": {
        "prefix": "Requests_Transport_cURL",
        "body": "Requests_Transport_cURL",
        "description": "cURL HTTP transport"
    },
    "Class: Requests_Transport_fsockopen": {
        "prefix": "Requests_Transport_fsockopen",
        "body": "Requests_Transport_fsockopen",
        "description": "fsockopen HTTP transport"
    },
    "Class: Requests_Utility_CaseInsensitiveDictionary": {
        "prefix": "Requests_Utility_CaseInsensitiveDictionary",
        "body": "Requests_Utility_CaseInsensitiveDictionary",
        "description": "Case-insensitive dictionary, suitable for HTTP headers"
    },
    "Class: Requests_Utility_FilteredIterator": {
        "prefix": "Requests_Utility_FilteredIterator",
        "body": "Requests_Utility_FilteredIterator",
        "description": "Iterator for arrays requiring filtered values"
    },
    "Class: RSSCache": {
        "prefix": "RSSCache",
        "body": "RSSCache",
        "description": ""
    },
    "Class: Services_JSON": {
        "prefix": "Services_JSON",
        "body": "Services_JSON",
        "description": "Converts to and from JSON format."
    },
    "Class: Services_JSON_Error": {
        "prefix": "Services_JSON_Error",
        "body": "Services_JSON_Error",
        "description": ""
    },
    "Class: SimplePie": {
        "prefix": "SimplePie",
        "body": "SimplePie",
        "description": "SimplePie"
    },
    "Class: SimplePie_Author": {
        "prefix": "SimplePie_Author",
        "body": "SimplePie_Author",
        "description": "Manages all author-related data"
    },
    "Class: SimplePie_Cache": {
        "prefix": "SimplePie_Cache",
        "body": "SimplePie_Cache",
        "description": "Used to create cache objects"
    },
    "Class: SimplePie_Cache_DB": {
        "prefix": "SimplePie_Cache_DB",
        "body": "SimplePie_Cache_DB",
        "description": "Base class for database-based caches"
    },
    "Class: SimplePie_Cache_File": {
        "prefix": "SimplePie_Cache_File",
        "body": "SimplePie_Cache_File",
        "description": "Caches data to the filesystem"
    },
    "Class: SimplePie_Cache_Memcache": {
        "prefix": "SimplePie_Cache_Memcache",
        "body": "SimplePie_Cache_Memcache",
        "description": "Caches data to memcache"
    },
    "Class: SimplePie_Cache_MySQL": {
        "prefix": "SimplePie_Cache_MySQL",
        "body": "SimplePie_Cache_MySQL",
        "description": "Caches data to a MySQL database"
    },
    "Class: SimplePie_Caption": {
        "prefix": "SimplePie_Caption",
        "body": "SimplePie_Caption",
        "description": "Handles `&lt;media:text&gt;` captions as defined in Media RSS."
    },
    "Class: SimplePie_Category": {
        "prefix": "SimplePie_Category",
        "body": "SimplePie_Category",
        "description": "Manages all category-related data"
    },
    "Class: SimplePie_Content_Type_Sniffer": {
        "prefix": "SimplePie_Content_Type_Sniffer",
        "body": "SimplePie_Content_Type_Sniffer",
        "description": "Content-type sniffing"
    },
    "Class: SimplePie_Copyright": {
        "prefix": "SimplePie_Copyright",
        "body": "SimplePie_Copyright",
        "description": "Manages `&lt;media:copyright&gt;` copyright tags as defined in Media RSS"
    },
    "Class: SimplePie_Core": {
        "prefix": "SimplePie_Core",
        "body": "SimplePie_Core",
        "description": "SimplePie class."
    },
    "Class: SimplePie_Credit": {
        "prefix": "SimplePie_Credit",
        "body": "SimplePie_Credit",
        "description": "Handles `&lt;media:credit&gt;` as defined in Media RSS"
    },
    "Class: SimplePie_Decode_HTML_Entities": {
        "prefix": "SimplePie_Decode_HTML_Entities",
        "body": "SimplePie_Decode_HTML_Entities",
        "description": "Decode HTML Entities"
    },
    "Class: SimplePie_Enclosure": {
        "prefix": "SimplePie_Enclosure",
        "body": "SimplePie_Enclosure",
        "description": "Handles everything related to enclosures (including Media RSS and iTunes RSS)"
    },
    "Class: SimplePie_Exception": {
        "prefix": "SimplePie_Exception",
        "body": "SimplePie_Exception",
        "description": "General SimplePie exception class"
    },
    "Class: SimplePie_File": {
        "prefix": "SimplePie_File",
        "body": "SimplePie_File",
        "description": "Used for fetching remote files and reading local files"
    },
    "Class: SimplePie_gzdecode": {
        "prefix": "SimplePie_gzdecode",
        "body": "SimplePie_gzdecode",
        "description": "Decode &#039;gzip&#039; encoded HTTP data"
    },
    "Class: SimplePie_HTTP_Parser": {
        "prefix": "SimplePie_HTTP_Parser",
        "body": "SimplePie_HTTP_Parser",
        "description": "HTTP Response Parser"
    },
    "Class: SimplePie_IRI": {
        "prefix": "SimplePie_IRI",
        "body": "SimplePie_IRI",
        "description": "IRI parser/serialiser/normaliser"
    },
    "Class: SimplePie_Item": {
        "prefix": "SimplePie_Item",
        "body": "SimplePie_Item",
        "description": "Manages all item-related data"
    },
    "Class: SimplePie_Locator": {
        "prefix": "SimplePie_Locator",
        "body": "SimplePie_Locator",
        "description": "Used for feed auto-discovery"
    },
    "Class: SimplePie_Misc": {
        "prefix": "SimplePie_Misc",
        "body": "SimplePie_Misc",
        "description": "Miscellanous utilities"
    },
    "Class: SimplePie_Net_IPv6": {
        "prefix": "SimplePie_Net_IPv6",
        "body": "SimplePie_Net_IPv6",
        "description": "Class to validate and to work with IPv6 addresses."
    },
    "Class: SimplePie_Parse_Date": {
        "prefix": "SimplePie_Parse_Date",
        "body": "SimplePie_Parse_Date",
        "description": "Date Parser"
    },
    "Class: SimplePie_Parser": {
        "prefix": "SimplePie_Parser",
        "body": "SimplePie_Parser",
        "description": "Parses XML into something sane"
    },
    "Class: SimplePie_Rating": {
        "prefix": "SimplePie_Rating",
        "body": "SimplePie_Rating",
        "description": "Handles `&lt;media:rating&gt;` or `&lt;itunes:explicit&gt;` tags as defined in Media RSS and iTunes RSS respectively"
    },
    "Class: SimplePie_Registry": {
        "prefix": "SimplePie_Registry",
        "body": "SimplePie_Registry",
        "description": "Handles creating objects and calling methods"
    },
    "Class: SimplePie_Restriction": {
        "prefix": "SimplePie_Restriction",
        "body": "SimplePie_Restriction",
        "description": "Handles `&lt;media:restriction&gt;` as defined in Media RSS"
    },
    "Class: SimplePie_Sanitize": {
        "prefix": "SimplePie_Sanitize",
        "body": "SimplePie_Sanitize",
        "description": "Used for data cleanup and post-processing"
    },
    "Class: SimplePie_Source": {
        "prefix": "SimplePie_Source",
        "body": "SimplePie_Source",
        "description": "Handles `&lt;atom:source&gt;`"
    },
    "Class: SimplePie_XML_Declaration_Parser": {
        "prefix": "SimplePie_XML_Declaration_Parser",
        "body": "SimplePie_XML_Declaration_Parser",
        "description": "Parses the XML Declaration"
    },
    "Class: SMTP": {
        "prefix": "SMTP",
        "body": "SMTP",
        "description": "PHPMailer RFC821 SMTP email transport class."
    },
    "Class: Snoopy": {
        "prefix": "Snoopy",
        "body": "Snoopy",
        "description": ""
    },
    "Class: Text_Diff": {
        "prefix": "Text_Diff",
        "body": "Text_Diff",
        "description": "General API for generating and formatting diffs - the differences between two sequences of strings."
    },
    "Class: Text_Diff_Engine_native": {
        "prefix": "Text_Diff_Engine_native",
        "body": "Text_Diff_Engine_native",
        "description": "Class used internally by Text_Diff to actually compute the diffs."
    },
    "Class: Text_Diff_Engine_shell": {
        "prefix": "Text_Diff_Engine_shell",
        "body": "Text_Diff_Engine_shell",
        "description": "Class used internally by Diff to actually compute the diffs."
    },
    "Class: Text_Diff_Engine_string": {
        "prefix": "Text_Diff_Engine_string",
        "body": "Text_Diff_Engine_string",
        "description": "Parses unified or context diffs output from eg. the diff utility."
    },
    "Class: Text_Diff_Engine_xdiff": {
        "prefix": "Text_Diff_Engine_xdiff",
        "body": "Text_Diff_Engine_xdiff",
        "description": "Class used internally by Diff to actually compute the diffs."
    },
    "Class: Text_Diff_Op": {
        "prefix": "Text_Diff_Op",
        "body": "Text_Diff_Op",
        "description": ""
    },
    "Class: Text_Diff_Op_add": {
        "prefix": "Text_Diff_Op_add",
        "body": "Text_Diff_Op_add",
        "description": ""
    },
    "Class: Text_Diff_Op_change": {
        "prefix": "Text_Diff_Op_change",
        "body": "Text_Diff_Op_change",
        "description": ""
    },
    "Class: Text_Diff_Op_copy": {
        "prefix": "Text_Diff_Op_copy",
        "body": "Text_Diff_Op_copy",
        "description": ""
    },
    "Class: Text_Diff_Op_delete": {
        "prefix": "Text_Diff_Op_delete",
        "body": "Text_Diff_Op_delete",
        "description": ""
    },
    "Class: Text_Diff_Renderer": {
        "prefix": "Text_Diff_Renderer",
        "body": "Text_Diff_Renderer",
        "description": "A class to render Diffs in different formats."
    },
    "Class: Text_Diff_Renderer_inline": {
        "prefix": "Text_Diff_Renderer_inline",
        "body": "Text_Diff_Renderer_inline",
        "description": "&quot;Inline&quot; diff renderer."
    },
    "Class: Text_MappedDiff": {
        "prefix": "Text_MappedDiff",
        "body": "Text_MappedDiff",
        "description": "General API for generating and formatting diffs - the differences between two sequences of strings."
    },
    "Class: Theme_Installer_Skin": {
        "prefix": "Theme_Installer_Skin",
        "body": "Theme_Installer_Skin",
        "description": "Theme Installer Skin for the WordPress Theme Installer."
    },
    "Class: Theme_Upgrader": {
        "prefix": "Theme_Upgrader",
        "body": "Theme_Upgrader",
        "description": "Core class used for upgrading/installing themes."
    },
    "Class: Theme_Upgrader_Skin": {
        "prefix": "Theme_Upgrader_Skin",
        "body": "Theme_Upgrader_Skin",
        "description": "Theme Upgrader Skin for WordPress Theme Upgrades."
    },
    "Class: Translation_Entry": {
        "prefix": "Translation_Entry",
        "body": "Translation_Entry",
        "description": "Translation_Entry class encapsulates a translatable string"
    },
    "Class: Translations": {
        "prefix": "Translations",
        "body": "Translations",
        "description": ""
    },
    "Class: TypeError": {
        "prefix": "TypeError",
        "body": "TypeError",
        "description": ""
    },
    "Class: Walker": {
        "prefix": "Walker",
        "body": "Walker",
        "description": "A class for displaying various tree-like structures."
    },
    "Class: Walker_Category": {
        "prefix": "Walker_Category",
        "body": "Walker_Category",
        "description": "Core class used to create an HTML list of categories."
    },
    "Class: Walker_Category_Checklist": {
        "prefix": "Walker_Category_Checklist",
        "body": "Walker_Category_Checklist",
        "description": "Core walker class to output an unordered list of category checkbox input elements."
    },
    "Class: Walker_CategoryDropdown": {
        "prefix": "Walker_CategoryDropdown",
        "body": "Walker_CategoryDropdown",
        "description": "Core class used to create an HTML dropdown list of Categories."
    },
    "Class: Walker_Comment": {
        "prefix": "Walker_Comment",
        "body": "Walker_Comment",
        "description": "Core walker class used to create an HTML list of comments."
    },
    "Class: Walker_Nav_Menu": {
        "prefix": "Walker_Nav_Menu",
        "body": "Walker_Nav_Menu",
        "description": "Core class used to implement an HTML list of nav menu items."
    },
    "Class: Walker_Nav_Menu_Checklist": {
        "prefix": "Walker_Nav_Menu_Checklist",
        "body": "Walker_Nav_Menu_Checklist",
        "description": "Create HTML list of nav menu input items."
    },
    "Class: Walker_Nav_Menu_Edit": {
        "prefix": "Walker_Nav_Menu_Edit",
        "body": "Walker_Nav_Menu_Edit",
        "description": "Create HTML list of nav menu input items."
    },
    "Class: Walker_Page": {
        "prefix": "Walker_Page",
        "body": "Walker_Page",
        "description": "Core walker class used to create an HTML list of pages."
    },
    "Class: Walker_PageDropdown": {
        "prefix": "Walker_PageDropdown",
        "body": "Walker_PageDropdown",
        "description": "Core class used to create an HTML drop-down list of pages."
    },
    "Class: WP": {
        "prefix": "WP",
        "body": "WP",
        "description": "WordPress environment setup class."
    },
    "Class: WP_Admin_Bar": {
        "prefix": "WP_Admin_Bar",
        "body": "WP_Admin_Bar",
        "description": "Core class used to implement the Toolbar API."
    },
    "Class: WP_Ajax_Response": {
        "prefix": "WP_Ajax_Response",
        "body": "WP_Ajax_Response",
        "description": "Send XML response back to Ajax request."
    },
    "Class: WP_Ajax_Upgrader_Skin": {
        "prefix": "WP_Ajax_Upgrader_Skin",
        "body": "WP_Ajax_Upgrader_Skin",
        "description": "Upgrader Skin for Ajax WordPress upgrades."
    },
    "Class: wp_atom_server": {
        "prefix": "wp_atom_server",
        "body": "wp_atom_server",
        "description": ""
    },
    "Class: WP_Automatic_Updater": {
        "prefix": "WP_Automatic_Updater",
        "body": "WP_Automatic_Updater",
        "description": "Core class used for handling automatic background updates."
    },
    "Class: WP_Comment": {
        "prefix": "WP_Comment",
        "body": "WP_Comment",
        "description": "Core class used to organize comments as instantiated objects with defined members."
    },
    "Class: WP_Comment_Query": {
        "prefix": "WP_Comment_Query",
        "body": "WP_Comment_Query",
        "description": "Core class used for querying comments."
    },
    "Class: WP_Comments_List_Table": {
        "prefix": "WP_Comments_List_Table",
        "body": "WP_Comments_List_Table",
        "description": "Core class used to implement displaying comments in a list table."
    },
    "Class: WP_Community_Events": {
        "prefix": "WP_Community_Events",
        "body": "WP_Community_Events",
        "description": "Class WP_Community_Events."
    },
    "Class: WP_Customize_Background_Image_Control": {
        "prefix": "WP_Customize_Background_Image_Control",
        "body": "WP_Customize_Background_Image_Control",
        "description": "Customize Background Image Control class."
    },
    "Class: WP_Customize_Background_Image_Setting": {
        "prefix": "WP_Customize_Background_Image_Setting",
        "body": "WP_Customize_Background_Image_Setting",
        "description": "Customizer Background Image Setting class."
    },
    "Class: WP_Customize_Background_Position_Control": {
        "prefix": "WP_Customize_Background_Position_Control",
        "body": "WP_Customize_Background_Position_Control",
        "description": "Customize Background Position Control class."
    },
    "Class: WP_Customize_Code_Editor_Control": {
        "prefix": "WP_Customize_Code_Editor_Control",
        "body": "WP_Customize_Code_Editor_Control",
        "description": "Customize Code Editor Control class."
    },
    "Class: WP_Customize_Color_Control": {
        "prefix": "WP_Customize_Color_Control",
        "body": "WP_Customize_Color_Control",
        "description": "Customize Color Control class."
    },
    "Class: WP_Customize_Control": {
        "prefix": "WP_Customize_Control",
        "body": "WP_Customize_Control",
        "description": "Customize Control class."
    },
    "Class: WP_Customize_Cropped_Image_Control": {
        "prefix": "WP_Customize_Cropped_Image_Control",
        "body": "WP_Customize_Cropped_Image_Control",
        "description": "Customize Cropped Image Control class."
    },
    "Class: WP_Customize_Custom_CSS_Setting": {
        "prefix": "WP_Customize_Custom_CSS_Setting",
        "body": "WP_Customize_Custom_CSS_Setting",
        "description": "Custom Setting to handle WP Custom CSS."
    },
    "Class: WP_Customize_Date_Time_Control": {
        "prefix": "WP_Customize_Date_Time_Control",
        "body": "WP_Customize_Date_Time_Control",
        "description": "Customize Date Time Control class."
    },
    "Class: WP_Customize_Filter_Setting": {
        "prefix": "WP_Customize_Filter_Setting",
        "body": "WP_Customize_Filter_Setting",
        "description": "A setting that is used to filter a value, but will not save the results."
    },
    "Class: WP_Customize_Header_Image_Control": {
        "prefix": "WP_Customize_Header_Image_Control",
        "body": "WP_Customize_Header_Image_Control",
        "description": "Customize Header Image Control class."
    },
    "Class: WP_Customize_Header_Image_Setting": {
        "prefix": "WP_Customize_Header_Image_Setting",
        "body": "WP_Customize_Header_Image_Setting",
        "description": "A setting that is used to filter a value, but will not save the results."
    },
    "Class: WP_Customize_Image_Control": {
        "prefix": "WP_Customize_Image_Control",
        "body": "WP_Customize_Image_Control",
        "description": "Customize Image Control class."
    },
    "Class: WP_Customize_Manager": {
        "prefix": "WP_Customize_Manager",
        "body": "WP_Customize_Manager",
        "description": "Customize Manager class."
    },
    "Class: WP_Customize_Media_Control": {
        "prefix": "WP_Customize_Media_Control",
        "body": "WP_Customize_Media_Control",
        "description": "Customize Media Control class."
    },
    "Class: WP_Customize_Nav_Menu_Auto_Add_Control": {
        "prefix": "WP_Customize_Nav_Menu_Auto_Add_Control",
        "body": "WP_Customize_Nav_Menu_Auto_Add_Control",
        "description": "Customize control to represent the auto_add field for a given menu."
    },
    "Class: WP_Customize_Nav_Menu_Control": {
        "prefix": "WP_Customize_Nav_Menu_Control",
        "body": "WP_Customize_Nav_Menu_Control",
        "description": "Customize Nav Menu Control Class."
    },
    "Class: WP_Customize_Nav_Menu_Item_Control": {
        "prefix": "WP_Customize_Nav_Menu_Item_Control",
        "body": "WP_Customize_Nav_Menu_Item_Control",
        "description": "Customize control to represent the name field for a given menu."
    },
    "Class: WP_Customize_Nav_Menu_Item_Setting": {
        "prefix": "WP_Customize_Nav_Menu_Item_Setting",
        "body": "WP_Customize_Nav_Menu_Item_Setting",
        "description": "Customize Setting to represent a nav_menu."
    },
    "Class: WP_Customize_Nav_Menu_Location_Control": {
        "prefix": "WP_Customize_Nav_Menu_Location_Control",
        "body": "WP_Customize_Nav_Menu_Location_Control",
        "description": "Customize Menu Location Control Class."
    },
    "Class: WP_Customize_Nav_Menu_Locations_Control": {
        "prefix": "WP_Customize_Nav_Menu_Locations_Control",
        "body": "WP_Customize_Nav_Menu_Locations_Control",
        "description": "Customize Nav Menu Locations Control Class."
    },
    "Class: WP_Customize_Nav_Menu_Name_Control": {
        "prefix": "WP_Customize_Nav_Menu_Name_Control",
        "body": "WP_Customize_Nav_Menu_Name_Control",
        "description": "Customize control to represent the name field for a given menu."
    },
    "Class: WP_Customize_Nav_Menu_Section": {
        "prefix": "WP_Customize_Nav_Menu_Section",
        "body": "WP_Customize_Nav_Menu_Section",
        "description": "Customize Menu Section Class"
    },
    "Class: WP_Customize_Nav_Menu_Setting": {
        "prefix": "WP_Customize_Nav_Menu_Setting",
        "body": "WP_Customize_Nav_Menu_Setting",
        "description": "Customize Setting to represent a nav_menu."
    },
    "Class: WP_Customize_Nav_Menus": {
        "prefix": "WP_Customize_Nav_Menus",
        "body": "WP_Customize_Nav_Menus",
        "description": "Customize Nav Menus class."
    },
    "Class: WP_Customize_Nav_Menus_Panel": {
        "prefix": "WP_Customize_Nav_Menus_Panel",
        "body": "WP_Customize_Nav_Menus_Panel",
        "description": "Customize Nav Menus Panel Class"
    },
    "Class: WP_Customize_New_Menu_Control": {
        "prefix": "WP_Customize_New_Menu_Control",
        "body": "WP_Customize_New_Menu_Control",
        "description": "Customize control class for new menus."
    },
    "Class: WP_Customize_New_Menu_Section": {
        "prefix": "WP_Customize_New_Menu_Section",
        "body": "WP_Customize_New_Menu_Section",
        "description": "Customize Menu Section Class"
    },
    "Class: WP_Customize_Panel": {
        "prefix": "WP_Customize_Panel",
        "body": "WP_Customize_Panel",
        "description": "Customize Panel class."
    },
    "Class: WP_Customize_Partial": {
        "prefix": "WP_Customize_Partial",
        "body": "WP_Customize_Partial",
        "description": "Core Customizer class for implementing selective refresh partials."
    },
    "Class: WP_Customize_Section": {
        "prefix": "WP_Customize_Section",
        "body": "WP_Customize_Section",
        "description": "Customize Section class."
    },
    "Class: WP_Customize_Selective_Refresh": {
        "prefix": "WP_Customize_Selective_Refresh",
        "body": "WP_Customize_Selective_Refresh",
        "description": "Core Customizer class for implementing selective refresh."
    },
    "Class: WP_Customize_Setting": {
        "prefix": "WP_Customize_Setting",
        "body": "WP_Customize_Setting",
        "description": "Customize Setting class."
    },
    "Class: WP_Customize_Sidebar_Section": {
        "prefix": "WP_Customize_Sidebar_Section",
        "body": "WP_Customize_Sidebar_Section",
        "description": "Customizer section representing widget area (sidebar)."
    },
    "Class: WP_Customize_Site_Icon_Control": {
        "prefix": "WP_Customize_Site_Icon_Control",
        "body": "WP_Customize_Site_Icon_Control",
        "description": "Customize Site Icon control class."
    },
    "Class: WP_Customize_Theme_Control": {
        "prefix": "WP_Customize_Theme_Control",
        "body": "WP_Customize_Theme_Control",
        "description": "Customize Theme Control class."
    },
    "Class: WP_Customize_Themes_Panel": {
        "prefix": "WP_Customize_Themes_Panel",
        "body": "WP_Customize_Themes_Panel",
        "description": "Customize Themes Panel Class"
    },
    "Class: WP_Customize_Themes_Section": {
        "prefix": "WP_Customize_Themes_Section",
        "body": "WP_Customize_Themes_Section",
        "description": "Customize Themes Section class."
    },
    "Class: WP_Customize_Upload_Control": {
        "prefix": "WP_Customize_Upload_Control",
        "body": "WP_Customize_Upload_Control",
        "description": "Customize Upload Control Class."
    },
    "Class: WP_Customize_Widgets": {
        "prefix": "WP_Customize_Widgets",
        "body": "WP_Customize_Widgets",
        "description": "Customize Widgets class."
    },
    "Class: WP_Date_Query": {
        "prefix": "WP_Date_Query",
        "body": "WP_Date_Query",
        "description": "Class for generating SQL clauses that filter a primary query according to date."
    },
    "Class: WP_Dependencies": {
        "prefix": "WP_Dependencies",
        "body": "WP_Dependencies",
        "description": "Core base class extended to register items."
    },
    "Class: WP_Embed": {
        "prefix": "WP_Embed",
        "body": "WP_Embed",
        "description": "API for easily embedding rich media such as videos and images into content."
    },
    "Class: WP_Error": {
        "prefix": "WP_Error",
        "body": "WP_Error",
        "description": "WordPress Error class."
    },
    "Class: WP_Feed_Cache": {
        "prefix": "WP_Feed_Cache",
        "body": "WP_Feed_Cache",
        "description": "Core class used to implement a feed cache."
    },
    "Class: WP_Feed_Cache_Transient": {
        "prefix": "WP_Feed_Cache_Transient",
        "body": "WP_Feed_Cache_Transient",
        "description": "Core class used to implement feed cache transients."
    },
    "Class: WP_Filesystem_Base": {
        "prefix": "WP_Filesystem_Base",
        "body": "WP_Filesystem_Base",
        "description": "Base WordPress Filesystem class for which Filesystem implementations extend"
    },
    "Class: WP_Filesystem_Direct": {
        "prefix": "WP_Filesystem_Direct",
        "body": "WP_Filesystem_Direct",
        "description": "WordPress Filesystem Class for direct PHP file and folder manipulation."
    },
    "Class: WP_Filesystem_FTPext": {
        "prefix": "WP_Filesystem_FTPext",
        "body": "WP_Filesystem_FTPext",
        "description": "WordPress Filesystem Class for implementing FTP."
    },
    "Class: WP_Filesystem_ftpsockets": {
        "prefix": "WP_Filesystem_ftpsockets",
        "body": "WP_Filesystem_ftpsockets",
        "description": "WordPress Filesystem Class for implementing FTP Sockets."
    },
    "Class: WP_Filesystem_SSH2": {
        "prefix": "WP_Filesystem_SSH2",
        "body": "WP_Filesystem_SSH2",
        "description": "WordPress Filesystem Class for implementing SSH2"
    },
    "Class: WP_Hook": {
        "prefix": "WP_Hook",
        "body": "WP_Hook",
        "description": "Core class used to implement action and filter hook functionality."
    },
    "Class: WP_Http": {
        "prefix": "WP_Http",
        "body": "WP_Http",
        "description": "Core class used for managing HTTP transports and making HTTP requests."
    },
    "Class: WP_Http_Cookie": {
        "prefix": "WP_Http_Cookie",
        "body": "WP_Http_Cookie",
        "description": "Core class used to encapsulate a single cookie object for internal use."
    },
    "Class: WP_Http_Curl": {
        "prefix": "WP_Http_Curl",
        "body": "WP_Http_Curl",
        "description": "Core class used to integrate Curl as an HTTP transport."
    },
    "Class: WP_Http_Encoding": {
        "prefix": "WP_Http_Encoding",
        "body": "WP_Http_Encoding",
        "description": "Core class used to implement deflate and gzip transfer encoding support for HTTP requests."
    },
    "Class: WP_HTTP_Fsockopen": {
        "prefix": "WP_HTTP_Fsockopen",
        "body": "WP_HTTP_Fsockopen",
        "description": "Deprecated HTTP Transport method which used fsockopen."
    },
    "Class: WP_HTTP_IXR_Client": {
        "prefix": "WP_HTTP_IXR_Client",
        "body": "WP_HTTP_IXR_Client",
        "description": "WP_HTTP_IXR_Client"
    },
    "Class: WP_HTTP_Proxy": {
        "prefix": "WP_HTTP_Proxy",
        "body": "WP_HTTP_Proxy",
        "description": "Core class used to implement HTTP API proxy support."
    },
    "Class: WP_HTTP_Requests_Hooks": {
        "prefix": "WP_HTTP_Requests_Hooks",
        "body": "WP_HTTP_Requests_Hooks",
        "description": "Bridge to connect Requests internal hooks to WordPress actions."
    },
    "Class: WP_HTTP_Requests_Response": {
        "prefix": "WP_HTTP_Requests_Response",
        "body": "WP_HTTP_Requests_Response",
        "description": "Core wrapper object for a Requests_Response for standardisation."
    },
    "Class: WP_HTTP_Response": {
        "prefix": "WP_HTTP_Response",
        "body": "WP_HTTP_Response",
        "description": "Core class used to prepare HTTP responses."
    },
    "Class: WP_Http_Streams": {
        "prefix": "WP_Http_Streams",
        "body": "WP_Http_Streams",
        "description": "Core class used to integrate PHP Streams as an HTTP transport."
    },
    "Class: WP_Image_Editor": {
        "prefix": "WP_Image_Editor",
        "body": "WP_Image_Editor",
        "description": "Base image editor class from which implementations extend"
    },
    "Class: WP_Image_Editor_GD": {
        "prefix": "WP_Image_Editor_GD",
        "body": "WP_Image_Editor_GD",
        "description": "WordPress Image Editor Class for Image Manipulation through GD"
    },
    "Class: WP_Image_Editor_Imagick": {
        "prefix": "WP_Image_Editor_Imagick",
        "body": "WP_Image_Editor_Imagick",
        "description": "WordPress Image Editor Class for Image Manipulation through Imagick PHP Module"
    },
    "Class: WP_Importer": {
        "prefix": "WP_Importer",
        "body": "WP_Importer",
        "description": "WP_Importer base class"
    },
    "Class: WP_Internal_Pointers": {
        "prefix": "WP_Internal_Pointers",
        "body": "WP_Internal_Pointers",
        "description": "Core class used to implement an internal admin pointers API."
    },
    "Class: WP_Links_List_Table": {
        "prefix": "WP_Links_List_Table",
        "body": "WP_Links_List_Table",
        "description": "Core class used to implement displaying links in a list table."
    },
    "Class: WP_List_Table": {
        "prefix": "WP_List_Table",
        "body": "WP_List_Table",
        "description": "Base class for displaying a list of items in an ajaxified HTML table."
    },
    "Class: WP_List_Util": {
        "prefix": "WP_List_Util",
        "body": "WP_List_Util",
        "description": "List utility."
    },
    "Class: WP_Locale": {
        "prefix": "WP_Locale",
        "body": "WP_Locale",
        "description": "Core class used to store translated data for a locale."
    },
    "Class: WP_Locale_Switcher": {
        "prefix": "WP_Locale_Switcher",
        "body": "WP_Locale_Switcher",
        "description": "Core class used for switching locales."
    },
    "Class: WP_MatchesMapRegex": {
        "prefix": "WP_MatchesMapRegex",
        "body": "WP_MatchesMapRegex",
        "description": "Helper class to remove the need to use eval to replace $matches[] in query strings."
    },
    "Class: WP_Media_List_Table": {
        "prefix": "WP_Media_List_Table",
        "body": "WP_Media_List_Table",
        "description": "Core class used to implement displaying media items in a list table."
    },
    "Class: WP_Meta_Query": {
        "prefix": "WP_Meta_Query",
        "body": "WP_Meta_Query",
        "description": "Core class used to implement meta queries for the Meta API."
    },
    "Class: WP_Metadata_Lazyloader": {
        "prefix": "WP_Metadata_Lazyloader",
        "body": "WP_Metadata_Lazyloader",
        "description": "Core class used for lazy-loading object metadata."
    },
    "Class: WP_MS_Sites_List_Table": {
        "prefix": "WP_MS_Sites_List_Table",
        "body": "WP_MS_Sites_List_Table",
        "description": "Core class used to implement displaying sites in a list table for the network admin."
    },
    "Class: WP_MS_Themes_List_Table": {
        "prefix": "WP_MS_Themes_List_Table",
        "body": "WP_MS_Themes_List_Table",
        "description": "Core class used to implement displaying themes in a list table for the network admin."
    },
    "Class: WP_MS_Users_List_Table": {
        "prefix": "WP_MS_Users_List_Table",
        "body": "WP_MS_Users_List_Table",
        "description": "Core class used to implement displaying users in a list table for the network admin."
    },
    "Class: WP_Nav_Menu_Widget": {
        "prefix": "WP_Nav_Menu_Widget",
        "body": "WP_Nav_Menu_Widget",
        "description": "Core class used to implement the Navigation Menu widget."
    },
    "Class: WP_Network": {
        "prefix": "WP_Network",
        "body": "WP_Network",
        "description": "Core class used for interacting with a multisite network."
    },
    "Class: WP_Network_Query": {
        "prefix": "WP_Network_Query",
        "body": "WP_Network_Query",
        "description": "Core class used for querying networks."
    },
    "Class: WP_Object_Cache": {
        "prefix": "WP_Object_Cache",
        "body": "WP_Object_Cache",
        "description": "Core class that implements an object cache."
    },
    "Class: WP_oEmbed": {
        "prefix": "WP_oEmbed",
        "body": "WP_oEmbed",
        "description": "Core class used to implement oEmbed functionality."
    },
    "Class: WP_oEmbed_Controller": {
        "prefix": "WP_oEmbed_Controller",
        "body": "WP_oEmbed_Controller",
        "description": "oEmbed API endpoint controller."
    },
    "Class: WP_Plugin_Install_List_Table": {
        "prefix": "WP_Plugin_Install_List_Table",
        "body": "WP_Plugin_Install_List_Table",
        "description": "Core class used to implement displaying plugins to install in a list table."
    },
    "Class: WP_Plugins_List_Table": {
        "prefix": "WP_Plugins_List_Table",
        "body": "WP_Plugins_List_Table",
        "description": "Core class used to implement displaying installed plugins in a list table."
    },
    "Class: WP_Post": {
        "prefix": "WP_Post",
        "body": "WP_Post",
        "description": "Core class used to implement the WP_Post object."
    },
    "Class: WP_Post_Comments_List_Table": {
        "prefix": "WP_Post_Comments_List_Table",
        "body": "WP_Post_Comments_List_Table",
        "description": "Core class used to implement displaying post comments in a list table."
    },
    "Class: WP_Post_Type": {
        "prefix": "WP_Post_Type",
        "body": "WP_Post_Type",
        "description": "Core class used for interacting with post types."
    },
    "Class: WP_Posts_List_Table": {
        "prefix": "WP_Posts_List_Table",
        "body": "WP_Posts_List_Table",
        "description": "Core class used to implement displaying posts in a list table."
    },
    "Class: WP_Privacy_Data_Export_Requests_Table": {
        "prefix": "WP_Privacy_Data_Export_Requests_Table",
        "body": "WP_Privacy_Data_Export_Requests_Table",
        "description": "WP_Privacy_Data_Export_Requests_Table class."
    },
    "Class: WP_Privacy_Data_Removal_Requests_Table": {
        "prefix": "WP_Privacy_Data_Removal_Requests_Table",
        "body": "WP_Privacy_Data_Removal_Requests_Table",
        "description": "WP_Privacy_Data_Removal_Requests_Table class."
    },
    "Class: WP_Privacy_Policy_Content": {
        "prefix": "WP_Privacy_Policy_Content",
        "body": "WP_Privacy_Policy_Content",
        "description": "WP_Privacy_Policy_Content class."
    },
    "Class: WP_Privacy_Requests_Table": {
        "prefix": "WP_Privacy_Requests_Table",
        "body": "WP_Privacy_Requests_Table",
        "description": "WP_Privacy_Requests_Table class."
    },
    "Class: WP_Query": {
        "prefix": "WP_Query",
        "body": "WP_Query",
        "description": "The WordPress Query class."
    },
    "Class: WP_REST_Attachments_Controller": {
        "prefix": "WP_REST_Attachments_Controller",
        "body": "WP_REST_Attachments_Controller",
        "description": "Core controller used to access attachments via the REST API."
    },
    "Class: WP_REST_Comment_Meta_Fields": {
        "prefix": "WP_REST_Comment_Meta_Fields",
        "body": "WP_REST_Comment_Meta_Fields",
        "description": "Core class to manage comment meta via the REST API."
    },
    "Class: WP_REST_Comments_Controller": {
        "prefix": "WP_REST_Comments_Controller",
        "body": "WP_REST_Comments_Controller",
        "description": "Core controller used to access comments via the REST API."
    },
    "Class: WP_REST_Controller": {
        "prefix": "WP_REST_Controller",
        "body": "WP_REST_Controller",
        "description": "Core base controller for managing and interacting with REST API items."
    },
    "Class: WP_REST_Meta_Fields": {
        "prefix": "WP_REST_Meta_Fields",
        "body": "WP_REST_Meta_Fields",
        "description": "Core class to manage meta values for an object via the REST API."
    },
    "Class: WP_REST_Post_Meta_Fields": {
        "prefix": "WP_REST_Post_Meta_Fields",
        "body": "WP_REST_Post_Meta_Fields",
        "description": "Core class used to manage meta values for posts via the REST API."
    },
    "Class: WP_REST_Post_Statuses_Controller": {
        "prefix": "WP_REST_Post_Statuses_Controller",
        "body": "WP_REST_Post_Statuses_Controller",
        "description": "Core class used to access post statuses via the REST API."
    },
    "Class: WP_REST_Post_Types_Controller": {
        "prefix": "WP_REST_Post_Types_Controller",
        "body": "WP_REST_Post_Types_Controller",
        "description": "Core class to access post types via the REST API."
    },
    "Class: WP_REST_Posts_Controller": {
        "prefix": "WP_REST_Posts_Controller",
        "body": "WP_REST_Posts_Controller",
        "description": "Core class to access posts via the REST API."
    },
    "Class: WP_REST_Request": {
        "prefix": "WP_REST_Request",
        "body": "WP_REST_Request",
        "description": "Core class used to implement a REST request object."
    },
    "Class: WP_REST_Response": {
        "prefix": "WP_REST_Response",
        "body": "WP_REST_Response",
        "description": "Core class used to implement a REST response object."
    },
    "Class: WP_REST_Revisions_Controller": {
        "prefix": "WP_REST_Revisions_Controller",
        "body": "WP_REST_Revisions_Controller",
        "description": "Core class used to access revisions via the REST API."
    },
    "Class: WP_REST_Server": {
        "prefix": "WP_REST_Server",
        "body": "WP_REST_Server",
        "description": "Core class used to implement the WordPress REST API server."
    },
    "Class: WP_REST_Settings_Controller": {
        "prefix": "WP_REST_Settings_Controller",
        "body": "WP_REST_Settings_Controller",
        "description": "Core class used to manage a site&#039;s settings via the REST API."
    },
    "Class: WP_REST_Taxonomies_Controller": {
        "prefix": "WP_REST_Taxonomies_Controller",
        "body": "WP_REST_Taxonomies_Controller",
        "description": "Core class used to manage taxonomies via the REST API."
    },
    "Class: WP_REST_Term_Meta_Fields": {
        "prefix": "WP_REST_Term_Meta_Fields",
        "body": "WP_REST_Term_Meta_Fields",
        "description": "Core class used to manage meta values for terms via the REST API."
    },
    "Class: WP_REST_Terms_Controller": {
        "prefix": "WP_REST_Terms_Controller",
        "body": "WP_REST_Terms_Controller",
        "description": "Core class used to managed terms associated with a taxonomy via the REST API."
    },
    "Class: WP_REST_User_Meta_Fields": {
        "prefix": "WP_REST_User_Meta_Fields",
        "body": "WP_REST_User_Meta_Fields",
        "description": "Core class used to manage meta values for users via the REST API."
    },
    "Class: WP_REST_Users_Controller": {
        "prefix": "WP_REST_Users_Controller",
        "body": "WP_REST_Users_Controller",
        "description": "Core class used to manage users via the REST API."
    },
    "Class: WP_Rewrite": {
        "prefix": "WP_Rewrite",
        "body": "WP_Rewrite",
        "description": "Core class used to implement a rewrite component API."
    },
    "Class: WP_Role": {
        "prefix": "WP_Role",
        "body": "WP_Role",
        "description": "Core class used to extend the user roles API."
    },
    "Class: WP_Roles": {
        "prefix": "WP_Roles",
        "body": "WP_Roles",
        "description": "Core class used to implement a user roles API."
    },
    "Class: WP_Screen": {
        "prefix": "WP_Screen",
        "body": "WP_Screen",
        "description": "Core class used to implement an admin screen API."
    },
    "Class: WP_Scripts": {
        "prefix": "WP_Scripts",
        "body": "WP_Scripts",
        "description": "Core class used to register scripts."
    },
    "Class: WP_Session_Tokens": {
        "prefix": "WP_Session_Tokens",
        "body": "WP_Session_Tokens",
        "description": "Abstract class for managing user session tokens."
    },
    "Class: WP_SimplePie_File": {
        "prefix": "WP_SimplePie_File",
        "body": "WP_SimplePie_File",
        "description": "Core class for fetching remote files and reading local files with SimplePie."
    },
    "Class: WP_SimplePie_Sanitize_KSES": {
        "prefix": "WP_SimplePie_Sanitize_KSES",
        "body": "WP_SimplePie_Sanitize_KSES",
        "description": "Core class used to implement SimpliePie feed sanitization."
    },
    "Class: WP_Site": {
        "prefix": "WP_Site",
        "body": "WP_Site",
        "description": "Core class used for interacting with a multisite site."
    },
    "Class: WP_Site_Icon": {
        "prefix": "WP_Site_Icon",
        "body": "WP_Site_Icon",
        "description": "Core class used to implement site icon functionality."
    },
    "Class: WP_Site_Query": {
        "prefix": "WP_Site_Query",
        "body": "WP_Site_Query",
        "description": "Core class used for querying sites."
    },
    "Class: WP_Styles": {
        "prefix": "WP_Styles",
        "body": "WP_Styles",
        "description": "Core class used to register styles."
    },
    "Class: WP_Tax_Query": {
        "prefix": "WP_Tax_Query",
        "body": "WP_Tax_Query",
        "description": "Core class used to implement taxonomy queries for the Taxonomy API."
    },
    "Class: WP_Taxonomy": {
        "prefix": "WP_Taxonomy",
        "body": "WP_Taxonomy",
        "description": "Core class used for interacting with taxonomies."
    },
    "Class: WP_Term": {
        "prefix": "WP_Term",
        "body": "WP_Term",
        "description": "Core class used to implement the WP_Term object."
    },
    "Class: WP_Term_Query": {
        "prefix": "WP_Term_Query",
        "body": "WP_Term_Query",
        "description": "Class used for querying terms."
    },
    "Class: WP_Terms_List_Table": {
        "prefix": "WP_Terms_List_Table",
        "body": "WP_Terms_List_Table",
        "description": "Core class used to implement displaying terms in a list table."
    },
    "Class: WP_Text_Diff_Renderer_inline": {
        "prefix": "WP_Text_Diff_Renderer_inline",
        "body": "WP_Text_Diff_Renderer_inline",
        "description": "Better word splitting than the PEAR package provides."
    },
    "Class: WP_Text_Diff_Renderer_Table": {
        "prefix": "WP_Text_Diff_Renderer_Table",
        "body": "WP_Text_Diff_Renderer_Table",
        "description": "Table renderer to display the diff lines."
    },
    "Class: WP_Theme": {
        "prefix": "WP_Theme",
        "body": "WP_Theme",
        "description": "WP_Theme Class"
    },
    "Class: WP_Theme_Install_List_Table": {
        "prefix": "WP_Theme_Install_List_Table",
        "body": "WP_Theme_Install_List_Table",
        "description": "Core class used to implement displaying themes to install in a list table."
    },
    "Class: WP_Themes_List_Table": {
        "prefix": "WP_Themes_List_Table",
        "body": "WP_Themes_List_Table",
        "description": "Core class used to implement displaying installed themes in a list table."
    },
    "Class: WP_Upgrader": {
        "prefix": "WP_Upgrader",
        "body": "WP_Upgrader",
        "description": "Core class used for upgrading/installing a local set of files via the Filesystem Abstraction classes from a Zip file."
    },
    "Class: WP_Upgrader_Skin": {
        "prefix": "WP_Upgrader_Skin",
        "body": "WP_Upgrader_Skin",
        "description": "Generic Skin for the WordPress Upgrader classes. This skin is designed to be extended for specific purposes."
    },
    "Class: WP_User": {
        "prefix": "WP_User",
        "body": "WP_User",
        "description": "Core class used to implement the WP_User object."
    },
    "Class: WP_User_Meta_Session_Tokens": {
        "prefix": "WP_User_Meta_Session_Tokens",
        "body": "WP_User_Meta_Session_Tokens",
        "description": "Meta-based user sessions token manager."
    },
    "Class: WP_User_Query": {
        "prefix": "WP_User_Query",
        "body": "WP_User_Query",
        "description": "Core class used for querying users."
    },
    "Class: WP_User_Request": {
        "prefix": "WP_User_Request",
        "body": "WP_User_Request",
        "description": "WP_User_Request class."
    },
    "Class: WP_User_Search": {
        "prefix": "WP_User_Search",
        "body": "WP_User_Search",
        "description": "WordPress User Search class."
    },
    "Class: WP_Users_List_Table": {
        "prefix": "WP_Users_List_Table",
        "body": "WP_Users_List_Table",
        "description": "Core class used to implement displaying users in a list table."
    },
    "Class: WP_Widget": {
        "prefix": "WP_Widget",
        "body": "WP_Widget",
        "description": "Core base class extended to register widgets."
    },
    "Class: WP_Widget_Archives": {
        "prefix": "WP_Widget_Archives",
        "body": "WP_Widget_Archives",
        "description": "Core class used to implement the Archives widget."
    },
    "Class: WP_Widget_Area_Customize_Control": {
        "prefix": "WP_Widget_Area_Customize_Control",
        "body": "WP_Widget_Area_Customize_Control",
        "description": "Widget Area Customize Control class."
    },
    "Class: WP_Widget_Calendar": {
        "prefix": "WP_Widget_Calendar",
        "body": "WP_Widget_Calendar",
        "description": "Core class used to implement the Calendar widget."
    },
    "Class: WP_Widget_Categories": {
        "prefix": "WP_Widget_Categories",
        "body": "WP_Widget_Categories",
        "description": "Core class used to implement a Categories widget."
    },
    "Class: WP_Widget_Custom_HTML": {
        "prefix": "WP_Widget_Custom_HTML",
        "body": "WP_Widget_Custom_HTML",
        "description": "Core class used to implement a Custom HTML widget."
    },
    "Class: WP_Widget_Factory": {
        "prefix": "WP_Widget_Factory",
        "body": "WP_Widget_Factory",
        "description": "Singleton that registers and instantiates WP_Widget classes."
    },
    "Class: WP_Widget_Form_Customize_Control": {
        "prefix": "WP_Widget_Form_Customize_Control",
        "body": "WP_Widget_Form_Customize_Control",
        "description": "Widget Form Customize Control class."
    },
    "Class: WP_Widget_Links": {
        "prefix": "WP_Widget_Links",
        "body": "WP_Widget_Links",
        "description": "Core class used to implement a Links widget."
    },
    "Class: WP_Widget_Media": {
        "prefix": "WP_Widget_Media",
        "body": "WP_Widget_Media",
        "description": "Core class that implements a media widget."
    },
    "Class: WP_Widget_Media_Audio": {
        "prefix": "WP_Widget_Media_Audio",
        "body": "WP_Widget_Media_Audio",
        "description": "Core class that implements an audio widget."
    },
    "Class: WP_Widget_Media_Gallery": {
        "prefix": "WP_Widget_Media_Gallery",
        "body": "WP_Widget_Media_Gallery",
        "description": "Core class that implements a gallery widget."
    },
    "Class: WP_Widget_Media_Image": {
        "prefix": "WP_Widget_Media_Image",
        "body": "WP_Widget_Media_Image",
        "description": "Core class that implements an image widget."
    },
    "Class: WP_Widget_Media_Video": {
        "prefix": "WP_Widget_Media_Video",
        "body": "WP_Widget_Media_Video",
        "description": "Core class that implements a video widget."
    },
    "Class: WP_Widget_Meta": {
        "prefix": "WP_Widget_Meta",
        "body": "WP_Widget_Meta",
        "description": "Core class used to implement a Meta widget."
    },
    "Class: WP_Widget_Pages": {
        "prefix": "WP_Widget_Pages",
        "body": "WP_Widget_Pages",
        "description": "Core class used to implement a Pages widget."
    },
    "Class: WP_Widget_Recent_Comments": {
        "prefix": "WP_Widget_Recent_Comments",
        "body": "WP_Widget_Recent_Comments",
        "description": "Core class used to implement a Recent Comments widget."
    },
    "Class: WP_Widget_Recent_Posts": {
        "prefix": "WP_Widget_Recent_Posts",
        "body": "WP_Widget_Recent_Posts",
        "description": "Core class used to implement a Recent Posts widget."
    },
    "Class: WP_Widget_RSS": {
        "prefix": "WP_Widget_RSS",
        "body": "WP_Widget_RSS",
        "description": "Core class used to implement a RSS widget."
    },
    "Class: WP_Widget_Search": {
        "prefix": "WP_Widget_Search",
        "body": "WP_Widget_Search",
        "description": "Core class used to implement a Search widget."
    },
    "Class: WP_Widget_Tag_Cloud": {
        "prefix": "WP_Widget_Tag_Cloud",
        "body": "WP_Widget_Tag_Cloud",
        "description": "Core class used to implement a Tag cloud widget."
    },
    "Class: WP_Widget_Text": {
        "prefix": "WP_Widget_Text",
        "body": "WP_Widget_Text",
        "description": "Core class used to implement a Text widget."
    },
    "Class: wp_xmlrpc_server": {
        "prefix": "wp_xmlrpc_server",
        "body": "wp_xmlrpc_server",
        "description": "WordPress XMLRPC server implementation."
    },
    "Class: wpdb": {
        "prefix": "wpdb",
        "body": "wpdb",
        "description": "WordPress Database Access Abstraction Object"
    },
    "Constant: $GUIDname": {
        "prefix": "$GUIDname",
        "body": "$GUIDname",
        "description": ""
    },
    "Constant: ABSPATH": {
        "prefix": "ABSPATH",
        "body": "ABSPATH",
        "description": ""
    },
    "Constant: ADMIN_COOKIE_PATH": {
        "prefix": "ADMIN_COOKIE_PATH",
        "body": "ADMIN_COOKIE_PATH",
        "description": ""
    },
    "Constant: AKISMET__MINIMUM_WP_VERSION": {
        "prefix": "AKISMET__MINIMUM_WP_VERSION",
        "body": "AKISMET__MINIMUM_WP_VERSION",
        "description": ""
    },
    "Constant: AKISMET__PLUGIN_DIR": {
        "prefix": "AKISMET__PLUGIN_DIR",
        "body": "AKISMET__PLUGIN_DIR",
        "description": ""
    },
    "Constant: AKISMET_DELETE_LIMIT": {
        "prefix": "AKISMET_DELETE_LIMIT",
        "body": "AKISMET_DELETE_LIMIT",
        "description": ""
    },
    "Constant: AKISMET_VERSION": {
        "prefix": "AKISMET_VERSION",
        "body": "AKISMET_VERSION",
        "description": ""
    },
    "Constant: ARRAY_A": {
        "prefix": "ARRAY_A",
        "body": "ARRAY_A",
        "description": ""
    },
    "Constant: ARRAY_N": {
        "prefix": "ARRAY_N",
        "body": "ARRAY_N",
        "description": ""
    },
    "Constant: ATOM": {
        "prefix": "ATOM",
        "body": "ATOM",
        "description": ""
    },
    "Constant: AUTH_COOKIE": {
        "prefix": "AUTH_COOKIE",
        "body": "AUTH_COOKIE",
        "description": ""
    },
    "Constant: AUTH_KEY": {
        "prefix": "AUTH_KEY",
        "body": "AUTH_KEY",
        "description": ""
    },
    "Constant: AUTH_SALT": {
        "prefix": "AUTH_SALT",
        "body": "AUTH_SALT",
        "description": ""
    },
    "Constant: AUTOSAVE_INTERVAL": {
        "prefix": "AUTOSAVE_INTERVAL",
        "body": "AUTOSAVE_INTERVAL",
        "description": ""
    },
    "Constant: BACKGROUND_COLOR": {
        "prefix": "BACKGROUND_COLOR",
        "body": "BACKGROUND_COLOR",
        "description": ""
    },
    "Constant: BACKGROUND_IMAGE": {
        "prefix": "BACKGROUND_IMAGE",
        "body": "BACKGROUND_IMAGE",
        "description": ""
    },
    "Constant: BLOGUPLOADDIR": {
        "prefix": "BLOGUPLOADDIR",
        "body": "BLOGUPLOADDIR",
        "description": ""
    },
    "Constant: COMMENTS_TEMPLATE": {
        "prefix": "COMMENTS_TEMPLATE",
        "body": "COMMENTS_TEMPLATE",
        "description": ""
    },
    "Constant: COOKIE_DOMAIN": {
        "prefix": "COOKIE_DOMAIN",
        "body": "COOKIE_DOMAIN",
        "description": ""
    },
    "Constant: COOKIEHASH": {
        "prefix": "COOKIEHASH",
        "body": "COOKIEHASH",
        "description": ""
    },
    "Constant: COOKIEPATH": {
        "prefix": "COOKIEPATH",
        "body": "COOKIEPATH",
        "description": ""
    },
    "Constant: CRLF": {
        "prefix": "CRLF",
        "body": "CRLF",
        "description": ""
    },
    "Constant: CUSTOM_TAGS": {
        "prefix": "CUSTOM_TAGS",
        "body": "CUSTOM_TAGS",
        "description": ""
    },
    "Constant: DAY_IN_SECONDS": {
        "prefix": "DAY_IN_SECONDS",
        "body": "DAY_IN_SECONDS",
        "description": ""
    },
    "Constant: DB_CHARSET": {
        "prefix": "DB_CHARSET",
        "body": "DB_CHARSET",
        "description": "Database Charset to use in creating database tables."
    },
    "Constant: DB_COLLATE": {
        "prefix": "DB_COLLATE",
        "body": "DB_COLLATE",
        "description": "The Database Collate type. Don&#039;t change this if in doubt."
    },
    "Constant: DB_HOST": {
        "prefix": "DB_HOST",
        "body": "DB_HOST",
        "description": "MySQL hostname"
    },
    "Constant: DB_NAME": {
        "prefix": "DB_NAME",
        "body": "DB_NAME",
        "description": "The name of the database for WordPress"
    },
    "Constant: DB_PASSWORD": {
        "prefix": "DB_PASSWORD",
        "body": "DB_PASSWORD",
        "description": "MySQL database password"
    },
    "Constant: DB_USER": {
        "prefix": "DB_USER",
        "body": "DB_USER",
        "description": "MySQL database username"
    },
    "Constant: DOING_AJAX": {
        "prefix": "DOING_AJAX",
        "body": "DOING_AJAX",
        "description": "Executing Ajax process."
    },
    "Constant: DOING_AUTOSAVE": {
        "prefix": "DOING_AUTOSAVE",
        "body": "DOING_AUTOSAVE",
        "description": ""
    },
    "Constant: DOING_CRON": {
        "prefix": "DOING_CRON",
        "body": "DOING_CRON",
        "description": "Tell WordPress we are doing the CRON task."
    },
    "Constant: EBML_ID_ASPECTRATIOTYPE": {
        "prefix": "EBML_ID_ASPECTRATIOTYPE",
        "body": "EBML_ID_ASPECTRATIOTYPE",
        "description": ""
    },
    "Constant: EBML_ID_ATTACHEDFILE": {
        "prefix": "EBML_ID_ATTACHEDFILE",
        "body": "EBML_ID_ATTACHEDFILE",
        "description": ""
    },
    "Constant: EBML_ID_ATTACHMENTLINK": {
        "prefix": "EBML_ID_ATTACHMENTLINK",
        "body": "EBML_ID_ATTACHMENTLINK",
        "description": ""
    },
    "Constant: EBML_ID_ATTACHMENTS": {
        "prefix": "EBML_ID_ATTACHMENTS",
        "body": "EBML_ID_ATTACHMENTS",
        "description": ""
    },
    "Constant: EBML_ID_AUDIO": {
        "prefix": "EBML_ID_AUDIO",
        "body": "EBML_ID_AUDIO",
        "description": ""
    },
    "Constant: EBML_ID_BITDEPTH": {
        "prefix": "EBML_ID_BITDEPTH",
        "body": "EBML_ID_BITDEPTH",
        "description": ""
    },
    "Constant: EBML_ID_CHANNELPOSITIONS": {
        "prefix": "EBML_ID_CHANNELPOSITIONS",
        "body": "EBML_ID_CHANNELPOSITIONS",
        "description": ""
    },
    "Constant: EBML_ID_CHANNELS": {
        "prefix": "EBML_ID_CHANNELS",
        "body": "EBML_ID_CHANNELS",
        "description": ""
    },
    "Constant: EBML_ID_CHAPCOUNTRY": {
        "prefix": "EBML_ID_CHAPCOUNTRY",
        "body": "EBML_ID_CHAPCOUNTRY",
        "description": ""
    },
    "Constant: EBML_ID_CHAPLANGUAGE": {
        "prefix": "EBML_ID_CHAPLANGUAGE",
        "body": "EBML_ID_CHAPLANGUAGE",
        "description": ""
    },
    "Constant: EBML_ID_CHAPPROCESS": {
        "prefix": "EBML_ID_CHAPPROCESS",
        "body": "EBML_ID_CHAPPROCESS",
        "description": ""
    },
    "Constant: EBML_ID_CHAPPROCESSCODECID": {
        "prefix": "EBML_ID_CHAPPROCESSCODECID",
        "body": "EBML_ID_CHAPPROCESSCODECID",
        "description": ""
    },
    "Constant: EBML_ID_CHAPPROCESSCOMMAND": {
        "prefix": "EBML_ID_CHAPPROCESSCOMMAND",
        "body": "EBML_ID_CHAPPROCESSCOMMAND",
        "description": ""
    },
    "Constant: EBML_ID_CHAPPROCESSDATA": {
        "prefix": "EBML_ID_CHAPPROCESSDATA",
        "body": "EBML_ID_CHAPPROCESSDATA",
        "description": ""
    },
    "Constant: EBML_ID_CHAPPROCESSPRIVATE": {
        "prefix": "EBML_ID_CHAPPROCESSPRIVATE",
        "body": "EBML_ID_CHAPPROCESSPRIVATE",
        "description": ""
    },
    "Constant: EBML_ID_CHAPPROCESSTIME": {
        "prefix": "EBML_ID_CHAPPROCESSTIME",
        "body": "EBML_ID_CHAPPROCESSTIME",
        "description": ""
    },
    "Constant: EBML_ID_CHAPSTRING": {
        "prefix": "EBML_ID_CHAPSTRING",
        "body": "EBML_ID_CHAPSTRING",
        "description": ""
    },
    "Constant: EBML_ID_CHAPTERATOM": {
        "prefix": "EBML_ID_CHAPTERATOM",
        "body": "EBML_ID_CHAPTERATOM",
        "description": ""
    },
    "Constant: EBML_ID_CHAPTERDISPLAY": {
        "prefix": "EBML_ID_CHAPTERDISPLAY",
        "body": "EBML_ID_CHAPTERDISPLAY",
        "description": ""
    },
    "Constant: EBML_ID_CHAPTERFLAGENABLED": {
        "prefix": "EBML_ID_CHAPTERFLAGENABLED",
        "body": "EBML_ID_CHAPTERFLAGENABLED",
        "description": ""
    },
    "Constant: EBML_ID_CHAPTERFLAGHIDDEN": {
        "prefix": "EBML_ID_CHAPTERFLAGHIDDEN",
        "body": "EBML_ID_CHAPTERFLAGHIDDEN",
        "description": ""
    },
    "Constant: EBML_ID_CHAPTERPHYSICALEQUIV": {
        "prefix": "EBML_ID_CHAPTERPHYSICALEQUIV",
        "body": "EBML_ID_CHAPTERPHYSICALEQUIV",
        "description": ""
    },
    "Constant: EBML_ID_CHAPTERS": {
        "prefix": "EBML_ID_CHAPTERS",
        "body": "EBML_ID_CHAPTERS",
        "description": ""
    },
    "Constant: EBML_ID_CHAPTERSEGMENTEDITIONUID": {
        "prefix": "EBML_ID_CHAPTERSEGMENTEDITIONUID",
        "body": "EBML_ID_CHAPTERSEGMENTEDITIONUID",
        "description": ""
    },
    "Constant: EBML_ID_CHAPTERSEGMENTUID": {
        "prefix": "EBML_ID_CHAPTERSEGMENTUID",
        "body": "EBML_ID_CHAPTERSEGMENTUID",
        "description": ""
    },
    "Constant: EBML_ID_CHAPTERTIMEEND": {
        "prefix": "EBML_ID_CHAPTERTIMEEND",
        "body": "EBML_ID_CHAPTERTIMEEND",
        "description": ""
    },
    "Constant: EBML_ID_CHAPTERTIMESTART": {
        "prefix": "EBML_ID_CHAPTERTIMESTART",
        "body": "EBML_ID_CHAPTERTIMESTART",
        "description": ""
    },
    "Constant: EBML_ID_CHAPTERTRACK": {
        "prefix": "EBML_ID_CHAPTERTRACK",
        "body": "EBML_ID_CHAPTERTRACK",
        "description": ""
    },
    "Constant: EBML_ID_CHAPTERTRACKNUMBER": {
        "prefix": "EBML_ID_CHAPTERTRACKNUMBER",
        "body": "EBML_ID_CHAPTERTRACKNUMBER",
        "description": ""
    },
    "Constant: EBML_ID_CHAPTERTRANSLATE": {
        "prefix": "EBML_ID_CHAPTERTRANSLATE",
        "body": "EBML_ID_CHAPTERTRANSLATE",
        "description": ""
    },
    "Constant: EBML_ID_CHAPTERTRANSLATECODEC": {
        "prefix": "EBML_ID_CHAPTERTRANSLATECODEC",
        "body": "EBML_ID_CHAPTERTRANSLATECODEC",
        "description": ""
    },
    "Constant: EBML_ID_CHAPTERTRANSLATEEDITIONUID": {
        "prefix": "EBML_ID_CHAPTERTRANSLATEEDITIONUID",
        "body": "EBML_ID_CHAPTERTRANSLATEEDITIONUID",
        "description": ""
    },
    "Constant: EBML_ID_CHAPTERTRANSLATEID": {
        "prefix": "EBML_ID_CHAPTERTRANSLATEID",
        "body": "EBML_ID_CHAPTERTRANSLATEID",
        "description": ""
    },
    "Constant: EBML_ID_CHAPTERUID": {
        "prefix": "EBML_ID_CHAPTERUID",
        "body": "EBML_ID_CHAPTERUID",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTER": {
        "prefix": "EBML_ID_CLUSTER",
        "body": "EBML_ID_CLUSTER",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTERBLOCK": {
        "prefix": "EBML_ID_CLUSTERBLOCK",
        "body": "EBML_ID_CLUSTERBLOCK",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTERBLOCKADDID": {
        "prefix": "EBML_ID_CLUSTERBLOCKADDID",
        "body": "EBML_ID_CLUSTERBLOCKADDID",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTERBLOCKADDITIONAL": {
        "prefix": "EBML_ID_CLUSTERBLOCKADDITIONAL",
        "body": "EBML_ID_CLUSTERBLOCKADDITIONAL",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTERBLOCKADDITIONID": {
        "prefix": "EBML_ID_CLUSTERBLOCKADDITIONID",
        "body": "EBML_ID_CLUSTERBLOCKADDITIONID",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTERBLOCKADDITIONS": {
        "prefix": "EBML_ID_CLUSTERBLOCKADDITIONS",
        "body": "EBML_ID_CLUSTERBLOCKADDITIONS",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTERBLOCKDURATION": {
        "prefix": "EBML_ID_CLUSTERBLOCKDURATION",
        "body": "EBML_ID_CLUSTERBLOCKDURATION",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTERBLOCKGROUP": {
        "prefix": "EBML_ID_CLUSTERBLOCKGROUP",
        "body": "EBML_ID_CLUSTERBLOCKGROUP",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTERBLOCKMORE": {
        "prefix": "EBML_ID_CLUSTERBLOCKMORE",
        "body": "EBML_ID_CLUSTERBLOCKMORE",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTERBLOCKVIRTUAL": {
        "prefix": "EBML_ID_CLUSTERBLOCKVIRTUAL",
        "body": "EBML_ID_CLUSTERBLOCKVIRTUAL",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTERCODECSTATE": {
        "prefix": "EBML_ID_CLUSTERCODECSTATE",
        "body": "EBML_ID_CLUSTERCODECSTATE",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTERDELAY": {
        "prefix": "EBML_ID_CLUSTERDELAY",
        "body": "EBML_ID_CLUSTERDELAY",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTERDURATION": {
        "prefix": "EBML_ID_CLUSTERDURATION",
        "body": "EBML_ID_CLUSTERDURATION",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTERENCRYPTEDBLOCK": {
        "prefix": "EBML_ID_CLUSTERENCRYPTEDBLOCK",
        "body": "EBML_ID_CLUSTERENCRYPTEDBLOCK",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTERFRAMENUMBER": {
        "prefix": "EBML_ID_CLUSTERFRAMENUMBER",
        "body": "EBML_ID_CLUSTERFRAMENUMBER",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTERLACENUMBER": {
        "prefix": "EBML_ID_CLUSTERLACENUMBER",
        "body": "EBML_ID_CLUSTERLACENUMBER",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTERPOSITION": {
        "prefix": "EBML_ID_CLUSTERPOSITION",
        "body": "EBML_ID_CLUSTERPOSITION",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTERPREVSIZE": {
        "prefix": "EBML_ID_CLUSTERPREVSIZE",
        "body": "EBML_ID_CLUSTERPREVSIZE",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTERREFERENCEBLOCK": {
        "prefix": "EBML_ID_CLUSTERREFERENCEBLOCK",
        "body": "EBML_ID_CLUSTERREFERENCEBLOCK",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTERREFERENCEPRIORITY": {
        "prefix": "EBML_ID_CLUSTERREFERENCEPRIORITY",
        "body": "EBML_ID_CLUSTERREFERENCEPRIORITY",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTERREFERENCEVIRTUAL": {
        "prefix": "EBML_ID_CLUSTERREFERENCEVIRTUAL",
        "body": "EBML_ID_CLUSTERREFERENCEVIRTUAL",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTERSILENTTRACKNUMBER": {
        "prefix": "EBML_ID_CLUSTERSILENTTRACKNUMBER",
        "body": "EBML_ID_CLUSTERSILENTTRACKNUMBER",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTERSILENTTRACKS": {
        "prefix": "EBML_ID_CLUSTERSILENTTRACKS",
        "body": "EBML_ID_CLUSTERSILENTTRACKS",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTERSIMPLEBLOCK": {
        "prefix": "EBML_ID_CLUSTERSIMPLEBLOCK",
        "body": "EBML_ID_CLUSTERSIMPLEBLOCK",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTERSLICES": {
        "prefix": "EBML_ID_CLUSTERSLICES",
        "body": "EBML_ID_CLUSTERSLICES",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTERTIMECODE": {
        "prefix": "EBML_ID_CLUSTERTIMECODE",
        "body": "EBML_ID_CLUSTERTIMECODE",
        "description": ""
    },
    "Constant: EBML_ID_CLUSTERTIMESLICE": {
        "prefix": "EBML_ID_CLUSTERTIMESLICE",
        "body": "EBML_ID_CLUSTERTIMESLICE",
        "description": ""
    },
    "Constant: EBML_ID_CODECDECODEALL": {
        "prefix": "EBML_ID_CODECDECODEALL",
        "body": "EBML_ID_CODECDECODEALL",
        "description": ""
    },
    "Constant: EBML_ID_CODECDOWNLOADURL": {
        "prefix": "EBML_ID_CODECDOWNLOADURL",
        "body": "EBML_ID_CODECDOWNLOADURL",
        "description": ""
    },
    "Constant: EBML_ID_CODECID": {
        "prefix": "EBML_ID_CODECID",
        "body": "EBML_ID_CODECID",
        "description": ""
    },
    "Constant: EBML_ID_CODECINFOURL": {
        "prefix": "EBML_ID_CODECINFOURL",
        "body": "EBML_ID_CODECINFOURL",
        "description": ""
    },
    "Constant: EBML_ID_CODECNAME": {
        "prefix": "EBML_ID_CODECNAME",
        "body": "EBML_ID_CODECNAME",
        "description": ""
    },
    "Constant: EBML_ID_CODECPRIVATE": {
        "prefix": "EBML_ID_CODECPRIVATE",
        "body": "EBML_ID_CODECPRIVATE",
        "description": ""
    },
    "Constant: EBML_ID_CODECSETTINGS": {
        "prefix": "EBML_ID_CODECSETTINGS",
        "body": "EBML_ID_CODECSETTINGS",
        "description": ""
    },
    "Constant: EBML_ID_COLOURSPACE": {
        "prefix": "EBML_ID_COLOURSPACE",
        "body": "EBML_ID_COLOURSPACE",
        "description": ""
    },
    "Constant: EBML_ID_CONTENTCOMPALGO": {
        "prefix": "EBML_ID_CONTENTCOMPALGO",
        "body": "EBML_ID_CONTENTCOMPALGO",
        "description": ""
    },
    "Constant: EBML_ID_CONTENTCOMPRESSION": {
        "prefix": "EBML_ID_CONTENTCOMPRESSION",
        "body": "EBML_ID_CONTENTCOMPRESSION",
        "description": ""
    },
    "Constant: EBML_ID_CONTENTCOMPSETTINGS": {
        "prefix": "EBML_ID_CONTENTCOMPSETTINGS",
        "body": "EBML_ID_CONTENTCOMPSETTINGS",
        "description": ""
    },
    "Constant: EBML_ID_CONTENTENCALGO": {
        "prefix": "EBML_ID_CONTENTENCALGO",
        "body": "EBML_ID_CONTENTENCALGO",
        "description": ""
    },
    "Constant: EBML_ID_CONTENTENCKEYID": {
        "prefix": "EBML_ID_CONTENTENCKEYID",
        "body": "EBML_ID_CONTENTENCKEYID",
        "description": ""
    },
    "Constant: EBML_ID_CONTENTENCODING": {
        "prefix": "EBML_ID_CONTENTENCODING",
        "body": "EBML_ID_CONTENTENCODING",
        "description": ""
    },
    "Constant: EBML_ID_CONTENTENCODINGORDER": {
        "prefix": "EBML_ID_CONTENTENCODINGORDER",
        "body": "EBML_ID_CONTENTENCODINGORDER",
        "description": ""
    },
    "Constant: EBML_ID_CONTENTENCODINGS": {
        "prefix": "EBML_ID_CONTENTENCODINGS",
        "body": "EBML_ID_CONTENTENCODINGS",
        "description": ""
    },
    "Constant: EBML_ID_CONTENTENCODINGSCOPE": {
        "prefix": "EBML_ID_CONTENTENCODINGSCOPE",
        "body": "EBML_ID_CONTENTENCODINGSCOPE",
        "description": ""
    },
    "Constant: EBML_ID_CONTENTENCODINGTYPE": {
        "prefix": "EBML_ID_CONTENTENCODINGTYPE",
        "body": "EBML_ID_CONTENTENCODINGTYPE",
        "description": ""
    },
    "Constant: EBML_ID_CONTENTENCRYPTION": {
        "prefix": "EBML_ID_CONTENTENCRYPTION",
        "body": "EBML_ID_CONTENTENCRYPTION",
        "description": ""
    },
    "Constant: EBML_ID_CONTENTSIGALGO": {
        "prefix": "EBML_ID_CONTENTSIGALGO",
        "body": "EBML_ID_CONTENTSIGALGO",
        "description": ""
    },
    "Constant: EBML_ID_CONTENTSIGHASHALGO": {
        "prefix": "EBML_ID_CONTENTSIGHASHALGO",
        "body": "EBML_ID_CONTENTSIGHASHALGO",
        "description": ""
    },
    "Constant: EBML_ID_CONTENTSIGKEYID": {
        "prefix": "EBML_ID_CONTENTSIGKEYID",
        "body": "EBML_ID_CONTENTSIGKEYID",
        "description": ""
    },
    "Constant: EBML_ID_CONTENTSIGNATURE": {
        "prefix": "EBML_ID_CONTENTSIGNATURE",
        "body": "EBML_ID_CONTENTSIGNATURE",
        "description": ""
    },
    "Constant: EBML_ID_CRC32": {
        "prefix": "EBML_ID_CRC32",
        "body": "EBML_ID_CRC32",
        "description": ""
    },
    "Constant: EBML_ID_CUEBLOCKNUMBER": {
        "prefix": "EBML_ID_CUEBLOCKNUMBER",
        "body": "EBML_ID_CUEBLOCKNUMBER",
        "description": ""
    },
    "Constant: EBML_ID_CUECLUSTERPOSITION": {
        "prefix": "EBML_ID_CUECLUSTERPOSITION",
        "body": "EBML_ID_CUECLUSTERPOSITION",
        "description": ""
    },
    "Constant: EBML_ID_CUECODECSTATE": {
        "prefix": "EBML_ID_CUECODECSTATE",
        "body": "EBML_ID_CUECODECSTATE",
        "description": ""
    },
    "Constant: EBML_ID_CUEPOINT": {
        "prefix": "EBML_ID_CUEPOINT",
        "body": "EBML_ID_CUEPOINT",
        "description": ""
    },
    "Constant: EBML_ID_CUEREFCLUSTER": {
        "prefix": "EBML_ID_CUEREFCLUSTER",
        "body": "EBML_ID_CUEREFCLUSTER",
        "description": ""
    },
    "Constant: EBML_ID_CUEREFCODECSTATE": {
        "prefix": "EBML_ID_CUEREFCODECSTATE",
        "body": "EBML_ID_CUEREFCODECSTATE",
        "description": ""
    },
    "Constant: EBML_ID_CUEREFERENCE": {
        "prefix": "EBML_ID_CUEREFERENCE",
        "body": "EBML_ID_CUEREFERENCE",
        "description": ""
    },
    "Constant: EBML_ID_CUEREFNUMBER": {
        "prefix": "EBML_ID_CUEREFNUMBER",
        "body": "EBML_ID_CUEREFNUMBER",
        "description": ""
    },
    "Constant: EBML_ID_CUEREFTIME": {
        "prefix": "EBML_ID_CUEREFTIME",
        "body": "EBML_ID_CUEREFTIME",
        "description": ""
    },
    "Constant: EBML_ID_CUES": {
        "prefix": "EBML_ID_CUES",
        "body": "EBML_ID_CUES",
        "description": ""
    },
    "Constant: EBML_ID_CUETIME": {
        "prefix": "EBML_ID_CUETIME",
        "body": "EBML_ID_CUETIME",
        "description": ""
    },
    "Constant: EBML_ID_CUETRACK": {
        "prefix": "EBML_ID_CUETRACK",
        "body": "EBML_ID_CUETRACK",
        "description": ""
    },
    "Constant: EBML_ID_CUETRACKPOSITIONS": {
        "prefix": "EBML_ID_CUETRACKPOSITIONS",
        "body": "EBML_ID_CUETRACKPOSITIONS",
        "description": ""
    },
    "Constant: EBML_ID_DATEUTC": {
        "prefix": "EBML_ID_DATEUTC",
        "body": "EBML_ID_DATEUTC",
        "description": ""
    },
    "Constant: EBML_ID_DEFAULTDURATION": {
        "prefix": "EBML_ID_DEFAULTDURATION",
        "body": "EBML_ID_DEFAULTDURATION",
        "description": ""
    },
    "Constant: EBML_ID_DISPLAYHEIGHT": {
        "prefix": "EBML_ID_DISPLAYHEIGHT",
        "body": "EBML_ID_DISPLAYHEIGHT",
        "description": ""
    },
    "Constant: EBML_ID_DISPLAYUNIT": {
        "prefix": "EBML_ID_DISPLAYUNIT",
        "body": "EBML_ID_DISPLAYUNIT",
        "description": ""
    },
    "Constant: EBML_ID_DISPLAYWIDTH": {
        "prefix": "EBML_ID_DISPLAYWIDTH",
        "body": "EBML_ID_DISPLAYWIDTH",
        "description": ""
    },
    "Constant: EBML_ID_DOCTYPE": {
        "prefix": "EBML_ID_DOCTYPE",
        "body": "EBML_ID_DOCTYPE",
        "description": ""
    },
    "Constant: EBML_ID_DOCTYPEREADVERSION": {
        "prefix": "EBML_ID_DOCTYPEREADVERSION",
        "body": "EBML_ID_DOCTYPEREADVERSION",
        "description": ""
    },
    "Constant: EBML_ID_DOCTYPEVERSION": {
        "prefix": "EBML_ID_DOCTYPEVERSION",
        "body": "EBML_ID_DOCTYPEVERSION",
        "description": ""
    },
    "Constant: EBML_ID_DURATION": {
        "prefix": "EBML_ID_DURATION",
        "body": "EBML_ID_DURATION",
        "description": ""
    },
    "Constant: EBML_ID_EBML": {
        "prefix": "EBML_ID_EBML",
        "body": "EBML_ID_EBML",
        "description": ""
    },
    "Constant: EBML_ID_EBMLMAXIDLENGTH": {
        "prefix": "EBML_ID_EBMLMAXIDLENGTH",
        "body": "EBML_ID_EBMLMAXIDLENGTH",
        "description": ""
    },
    "Constant: EBML_ID_EBMLMAXSIZELENGTH": {
        "prefix": "EBML_ID_EBMLMAXSIZELENGTH",
        "body": "EBML_ID_EBMLMAXSIZELENGTH",
        "description": ""
    },
    "Constant: EBML_ID_EBMLREADVERSION": {
        "prefix": "EBML_ID_EBMLREADVERSION",
        "body": "EBML_ID_EBMLREADVERSION",
        "description": ""
    },
    "Constant: EBML_ID_EBMLVERSION": {
        "prefix": "EBML_ID_EBMLVERSION",
        "body": "EBML_ID_EBMLVERSION",
        "description": ""
    },
    "Constant: EBML_ID_EDITIONENTRY": {
        "prefix": "EBML_ID_EDITIONENTRY",
        "body": "EBML_ID_EDITIONENTRY",
        "description": ""
    },
    "Constant: EBML_ID_EDITIONFLAGDEFAULT": {
        "prefix": "EBML_ID_EDITIONFLAGDEFAULT",
        "body": "EBML_ID_EDITIONFLAGDEFAULT",
        "description": ""
    },
    "Constant: EBML_ID_EDITIONFLAGHIDDEN": {
        "prefix": "EBML_ID_EDITIONFLAGHIDDEN",
        "body": "EBML_ID_EDITIONFLAGHIDDEN",
        "description": ""
    },
    "Constant: EBML_ID_EDITIONFLAGORDERED": {
        "prefix": "EBML_ID_EDITIONFLAGORDERED",
        "body": "EBML_ID_EDITIONFLAGORDERED",
        "description": ""
    },
    "Constant: EBML_ID_EDITIONUID": {
        "prefix": "EBML_ID_EDITIONUID",
        "body": "EBML_ID_EDITIONUID",
        "description": ""
    },
    "Constant: EBML_ID_FILEDATA": {
        "prefix": "EBML_ID_FILEDATA",
        "body": "EBML_ID_FILEDATA",
        "description": ""
    },
    "Constant: EBML_ID_FILEDESCRIPTION": {
        "prefix": "EBML_ID_FILEDESCRIPTION",
        "body": "EBML_ID_FILEDESCRIPTION",
        "description": ""
    },
    "Constant: EBML_ID_FILEMIMETYPE": {
        "prefix": "EBML_ID_FILEMIMETYPE",
        "body": "EBML_ID_FILEMIMETYPE",
        "description": ""
    },
    "Constant: EBML_ID_FILENAME": {
        "prefix": "EBML_ID_FILENAME",
        "body": "EBML_ID_FILENAME",
        "description": ""
    },
    "Constant: EBML_ID_FILEREFERRAL": {
        "prefix": "EBML_ID_FILEREFERRAL",
        "body": "EBML_ID_FILEREFERRAL",
        "description": ""
    },
    "Constant: EBML_ID_FILEUID": {
        "prefix": "EBML_ID_FILEUID",
        "body": "EBML_ID_FILEUID",
        "description": ""
    },
    "Constant: EBML_ID_FLAGDEFAULT": {
        "prefix": "EBML_ID_FLAGDEFAULT",
        "body": "EBML_ID_FLAGDEFAULT",
        "description": ""
    },
    "Constant: EBML_ID_FLAGENABLED": {
        "prefix": "EBML_ID_FLAGENABLED",
        "body": "EBML_ID_FLAGENABLED",
        "description": ""
    },
    "Constant: EBML_ID_FLAGFORCED": {
        "prefix": "EBML_ID_FLAGFORCED",
        "body": "EBML_ID_FLAGFORCED",
        "description": ""
    },
    "Constant: EBML_ID_FLAGINTERLACED": {
        "prefix": "EBML_ID_FLAGINTERLACED",
        "body": "EBML_ID_FLAGINTERLACED",
        "description": ""
    },
    "Constant: EBML_ID_FLAGLACING": {
        "prefix": "EBML_ID_FLAGLACING",
        "body": "EBML_ID_FLAGLACING",
        "description": ""
    },
    "Constant: EBML_ID_GAMMAVALUE": {
        "prefix": "EBML_ID_GAMMAVALUE",
        "body": "EBML_ID_GAMMAVALUE",
        "description": ""
    },
    "Constant: EBML_ID_INFO": {
        "prefix": "EBML_ID_INFO",
        "body": "EBML_ID_INFO",
        "description": ""
    },
    "Constant: EBML_ID_LANGUAGE": {
        "prefix": "EBML_ID_LANGUAGE",
        "body": "EBML_ID_LANGUAGE",
        "description": ""
    },
    "Constant: EBML_ID_MAXBLOCKADDITIONID": {
        "prefix": "EBML_ID_MAXBLOCKADDITIONID",
        "body": "EBML_ID_MAXBLOCKADDITIONID",
        "description": ""
    },
    "Constant: EBML_ID_MAXCACHE": {
        "prefix": "EBML_ID_MAXCACHE",
        "body": "EBML_ID_MAXCACHE",
        "description": ""
    },
    "Constant: EBML_ID_MINCACHE": {
        "prefix": "EBML_ID_MINCACHE",
        "body": "EBML_ID_MINCACHE",
        "description": ""
    },
    "Constant: EBML_ID_MUXINGAPP": {
        "prefix": "EBML_ID_MUXINGAPP",
        "body": "EBML_ID_MUXINGAPP",
        "description": ""
    },
    "Constant: EBML_ID_NAME": {
        "prefix": "EBML_ID_NAME",
        "body": "EBML_ID_NAME",
        "description": ""
    },
    "Constant: EBML_ID_NEXTFILENAME": {
        "prefix": "EBML_ID_NEXTFILENAME",
        "body": "EBML_ID_NEXTFILENAME",
        "description": ""
    },
    "Constant: EBML_ID_NEXTUID": {
        "prefix": "EBML_ID_NEXTUID",
        "body": "EBML_ID_NEXTUID",
        "description": ""
    },
    "Constant: EBML_ID_OLDSTEREOMODE": {
        "prefix": "EBML_ID_OLDSTEREOMODE",
        "body": "EBML_ID_OLDSTEREOMODE",
        "description": ""
    },
    "Constant: EBML_ID_OUTPUTSAMPLINGFREQUENCY": {
        "prefix": "EBML_ID_OUTPUTSAMPLINGFREQUENCY",
        "body": "EBML_ID_OUTPUTSAMPLINGFREQUENCY",
        "description": ""
    },
    "Constant: EBML_ID_PIXELCROPBOTTOM": {
        "prefix": "EBML_ID_PIXELCROPBOTTOM",
        "body": "EBML_ID_PIXELCROPBOTTOM",
        "description": ""
    },
    "Constant: EBML_ID_PIXELCROPLEFT": {
        "prefix": "EBML_ID_PIXELCROPLEFT",
        "body": "EBML_ID_PIXELCROPLEFT",
        "description": ""
    },
    "Constant: EBML_ID_PIXELCROPRIGHT": {
        "prefix": "EBML_ID_PIXELCROPRIGHT",
        "body": "EBML_ID_PIXELCROPRIGHT",
        "description": ""
    },
    "Constant: EBML_ID_PIXELCROPTOP": {
        "prefix": "EBML_ID_PIXELCROPTOP",
        "body": "EBML_ID_PIXELCROPTOP",
        "description": ""
    },
    "Constant: EBML_ID_PIXELHEIGHT": {
        "prefix": "EBML_ID_PIXELHEIGHT",
        "body": "EBML_ID_PIXELHEIGHT",
        "description": ""
    },
    "Constant: EBML_ID_PIXELWIDTH": {
        "prefix": "EBML_ID_PIXELWIDTH",
        "body": "EBML_ID_PIXELWIDTH",
        "description": ""
    },
    "Constant: EBML_ID_PREVFILENAME": {
        "prefix": "EBML_ID_PREVFILENAME",
        "body": "EBML_ID_PREVFILENAME",
        "description": ""
    },
    "Constant: EBML_ID_PREVUID": {
        "prefix": "EBML_ID_PREVUID",
        "body": "EBML_ID_PREVUID",
        "description": ""
    },
    "Constant: EBML_ID_SAMPLINGFREQUENCY": {
        "prefix": "EBML_ID_SAMPLINGFREQUENCY",
        "body": "EBML_ID_SAMPLINGFREQUENCY",
        "description": ""
    },
    "Constant: EBML_ID_SEEK": {
        "prefix": "EBML_ID_SEEK",
        "body": "EBML_ID_SEEK",
        "description": ""
    },
    "Constant: EBML_ID_SEEKHEAD": {
        "prefix": "EBML_ID_SEEKHEAD",
        "body": "EBML_ID_SEEKHEAD",
        "description": ""
    },
    "Constant: EBML_ID_SEEKID": {
        "prefix": "EBML_ID_SEEKID",
        "body": "EBML_ID_SEEKID",
        "description": ""
    },
    "Constant: EBML_ID_SEEKPOSITION": {
        "prefix": "EBML_ID_SEEKPOSITION",
        "body": "EBML_ID_SEEKPOSITION",
        "description": ""
    },
    "Constant: EBML_ID_SEGMENT": {
        "prefix": "EBML_ID_SEGMENT",
        "body": "EBML_ID_SEGMENT",
        "description": ""
    },
    "Constant: EBML_ID_SEGMENTFAMILY": {
        "prefix": "EBML_ID_SEGMENTFAMILY",
        "body": "EBML_ID_SEGMENTFAMILY",
        "description": ""
    },
    "Constant: EBML_ID_SEGMENTFILENAME": {
        "prefix": "EBML_ID_SEGMENTFILENAME",
        "body": "EBML_ID_SEGMENTFILENAME",
        "description": ""
    },
    "Constant: EBML_ID_SEGMENTUID": {
        "prefix": "EBML_ID_SEGMENTUID",
        "body": "EBML_ID_SEGMENTUID",
        "description": ""
    },
    "Constant: EBML_ID_SIMPLETAG": {
        "prefix": "EBML_ID_SIMPLETAG",
        "body": "EBML_ID_SIMPLETAG",
        "description": ""
    },
    "Constant: EBML_ID_STEREOMODE": {
        "prefix": "EBML_ID_STEREOMODE",
        "body": "EBML_ID_STEREOMODE",
        "description": ""
    },
    "Constant: EBML_ID_TAG": {
        "prefix": "EBML_ID_TAG",
        "body": "EBML_ID_TAG",
        "description": ""
    },
    "Constant: EBML_ID_TAGATTACHMENTUID": {
        "prefix": "EBML_ID_TAGATTACHMENTUID",
        "body": "EBML_ID_TAGATTACHMENTUID",
        "description": ""
    },
    "Constant: EBML_ID_TAGBINARY": {
        "prefix": "EBML_ID_TAGBINARY",
        "body": "EBML_ID_TAGBINARY",
        "description": ""
    },
    "Constant: EBML_ID_TAGCHAPTERUID": {
        "prefix": "EBML_ID_TAGCHAPTERUID",
        "body": "EBML_ID_TAGCHAPTERUID",
        "description": ""
    },
    "Constant: EBML_ID_TAGDEFAULT": {
        "prefix": "EBML_ID_TAGDEFAULT",
        "body": "EBML_ID_TAGDEFAULT",
        "description": ""
    },
    "Constant: EBML_ID_TAGEDITIONUID": {
        "prefix": "EBML_ID_TAGEDITIONUID",
        "body": "EBML_ID_TAGEDITIONUID",
        "description": ""
    },
    "Constant: EBML_ID_TAGLANGUAGE": {
        "prefix": "EBML_ID_TAGLANGUAGE",
        "body": "EBML_ID_TAGLANGUAGE",
        "description": ""
    },
    "Constant: EBML_ID_TAGNAME": {
        "prefix": "EBML_ID_TAGNAME",
        "body": "EBML_ID_TAGNAME",
        "description": ""
    },
    "Constant: EBML_ID_TAGS": {
        "prefix": "EBML_ID_TAGS",
        "body": "EBML_ID_TAGS",
        "description": ""
    },
    "Constant: EBML_ID_TAGSTRING": {
        "prefix": "EBML_ID_TAGSTRING",
        "body": "EBML_ID_TAGSTRING",
        "description": ""
    },
    "Constant: EBML_ID_TAGTRACKUID": {
        "prefix": "EBML_ID_TAGTRACKUID",
        "body": "EBML_ID_TAGTRACKUID",
        "description": ""
    },
    "Constant: EBML_ID_TARGETS": {
        "prefix": "EBML_ID_TARGETS",
        "body": "EBML_ID_TARGETS",
        "description": ""
    },
    "Constant: EBML_ID_TARGETTYPE": {
        "prefix": "EBML_ID_TARGETTYPE",
        "body": "EBML_ID_TARGETTYPE",
        "description": ""
    },
    "Constant: EBML_ID_TARGETTYPEVALUE": {
        "prefix": "EBML_ID_TARGETTYPEVALUE",
        "body": "EBML_ID_TARGETTYPEVALUE",
        "description": ""
    },
    "Constant: EBML_ID_TIMECODESCALE": {
        "prefix": "EBML_ID_TIMECODESCALE",
        "body": "EBML_ID_TIMECODESCALE",
        "description": ""
    },
    "Constant: EBML_ID_TITLE": {
        "prefix": "EBML_ID_TITLE",
        "body": "EBML_ID_TITLE",
        "description": ""
    },
    "Constant: EBML_ID_TRACKENTRY": {
        "prefix": "EBML_ID_TRACKENTRY",
        "body": "EBML_ID_TRACKENTRY",
        "description": ""
    },
    "Constant: EBML_ID_TRACKNUMBER": {
        "prefix": "EBML_ID_TRACKNUMBER",
        "body": "EBML_ID_TRACKNUMBER",
        "description": ""
    },
    "Constant: EBML_ID_TRACKOFFSET": {
        "prefix": "EBML_ID_TRACKOFFSET",
        "body": "EBML_ID_TRACKOFFSET",
        "description": ""
    },
    "Constant: EBML_ID_TRACKOVERLAY": {
        "prefix": "EBML_ID_TRACKOVERLAY",
        "body": "EBML_ID_TRACKOVERLAY",
        "description": ""
    },
    "Constant: EBML_ID_TRACKS": {
        "prefix": "EBML_ID_TRACKS",
        "body": "EBML_ID_TRACKS",
        "description": ""
    },
    "Constant: EBML_ID_TRACKTIMECODESCALE": {
        "prefix": "EBML_ID_TRACKTIMECODESCALE",
        "body": "EBML_ID_TRACKTIMECODESCALE",
        "description": ""
    },
    "Constant: EBML_ID_TRACKTRANSLATE": {
        "prefix": "EBML_ID_TRACKTRANSLATE",
        "body": "EBML_ID_TRACKTRANSLATE",
        "description": ""
    },
    "Constant: EBML_ID_TRACKTRANSLATECODEC": {
        "prefix": "EBML_ID_TRACKTRANSLATECODEC",
        "body": "EBML_ID_TRACKTRANSLATECODEC",
        "description": ""
    },
    "Constant: EBML_ID_TRACKTRANSLATEEDITIONUID": {
        "prefix": "EBML_ID_TRACKTRANSLATEEDITIONUID",
        "body": "EBML_ID_TRACKTRANSLATEEDITIONUID",
        "description": ""
    },
    "Constant: EBML_ID_TRACKTRANSLATETRACKID": {
        "prefix": "EBML_ID_TRACKTRANSLATETRACKID",
        "body": "EBML_ID_TRACKTRANSLATETRACKID",
        "description": ""
    },
    "Constant: EBML_ID_TRACKTYPE": {
        "prefix": "EBML_ID_TRACKTYPE",
        "body": "EBML_ID_TRACKTYPE",
        "description": ""
    },
    "Constant: EBML_ID_TRACKUID": {
        "prefix": "EBML_ID_TRACKUID",
        "body": "EBML_ID_TRACKUID",
        "description": ""
    },
    "Constant: EBML_ID_VIDEO": {
        "prefix": "EBML_ID_VIDEO",
        "body": "EBML_ID_VIDEO",
        "description": ""
    },
    "Constant: EBML_ID_VOID": {
        "prefix": "EBML_ID_VOID",
        "body": "EBML_ID_VOID",
        "description": ""
    },
    "Constant: EBML_ID_WRITINGAPP": {
        "prefix": "EBML_ID_WRITINGAPP",
        "body": "EBML_ID_WRITINGAPP",
        "description": ""
    },
    "Constant: EMPTY_TRASH_DAYS": {
        "prefix": "EMPTY_TRASH_DAYS",
        "body": "EMPTY_TRASH_DAYS",
        "description": ""
    },
    "Constant: ENT_SUBSTITUTE": {
        "prefix": "ENT_SUBSTITUTE",
        "body": "ENT_SUBSTITUTE",
        "description": ""
    },
    "Constant: EP_ALL": {
        "prefix": "EP_ALL",
        "body": "EP_ALL",
        "description": "Endpoint Mask for everything."
    },
    "Constant: EP_ALL_ARCHIVES": {
        "prefix": "EP_ALL_ARCHIVES",
        "body": "EP_ALL_ARCHIVES",
        "description": "Endpoint Mask for all archive views."
    },
    "Constant: EP_ATTACHMENT": {
        "prefix": "EP_ATTACHMENT",
        "body": "EP_ATTACHMENT",
        "description": "Endpoint Mask for Attachment."
    },
    "Constant: EP_AUTHORS": {
        "prefix": "EP_AUTHORS",
        "body": "EP_AUTHORS",
        "description": "Endpoint Mask for authors."
    },
    "Constant: EP_CATEGORIES": {
        "prefix": "EP_CATEGORIES",
        "body": "EP_CATEGORIES",
        "description": "Endpoint Mask for categories."
    },
    "Constant: EP_COMMENTS": {
        "prefix": "EP_COMMENTS",
        "body": "EP_COMMENTS",
        "description": "Endpoint Mask for comments."
    },
    "Constant: EP_DATE": {
        "prefix": "EP_DATE",
        "body": "EP_DATE",
        "description": "Endpoint Mask for date."
    },
    "Constant: EP_DAY": {
        "prefix": "EP_DAY",
        "body": "EP_DAY",
        "description": "Endpoint Mask for day."
    },
    "Constant: EP_MONTH": {
        "prefix": "EP_MONTH",
        "body": "EP_MONTH",
        "description": "Endpoint Mask for month."
    },
    "Constant: EP_NONE": {
        "prefix": "EP_NONE",
        "body": "EP_NONE",
        "description": "Endpoint Mask for default, which is nothing."
    },
    "Constant: EP_PAGES": {
        "prefix": "EP_PAGES",
        "body": "EP_PAGES",
        "description": "Endpoint Mask for pages."
    },
    "Constant: EP_PERMALINK": {
        "prefix": "EP_PERMALINK",
        "body": "EP_PERMALINK",
        "description": "Endpoint Mask for Permalink."
    },
    "Constant: EP_ROOT": {
        "prefix": "EP_ROOT",
        "body": "EP_ROOT",
        "description": "Endpoint Mask for root."
    },
    "Constant: EP_SEARCH": {
        "prefix": "EP_SEARCH",
        "body": "EP_SEARCH",
        "description": "Endpoint Mask for searches."
    },
    "Constant: EP_TAGS": {
        "prefix": "EP_TAGS",
        "body": "EP_TAGS",
        "description": "Endpoint Mask for tags."
    },
    "Constant: EP_YEAR": {
        "prefix": "EP_YEAR",
        "body": "EP_YEAR",
        "description": "Endpoint Mask for year"
    },
    "Constant: EZSQL_VERSION": {
        "prefix": "EZSQL_VERSION",
        "body": "EZSQL_VERSION",
        "description": ""
    },
    "Constant: FORCE_SSL_ADMIN": {
        "prefix": "FORCE_SSL_ADMIN",
        "body": "FORCE_SSL_ADMIN",
        "description": ""
    },
    "Constant: FS_CHMOD_DIR": {
        "prefix": "FS_CHMOD_DIR",
        "body": "FS_CHMOD_DIR",
        "description": ""
    },
    "Constant: FS_CHMOD_FILE": {
        "prefix": "FS_CHMOD_FILE",
        "body": "FS_CHMOD_FILE",
        "description": ""
    },
    "Constant: FS_CONNECT_TIMEOUT": {
        "prefix": "FS_CONNECT_TIMEOUT",
        "body": "FS_CONNECT_TIMEOUT",
        "description": ""
    },
    "Constant: FS_TIMEOUT": {
        "prefix": "FS_TIMEOUT",
        "body": "FS_TIMEOUT",
        "description": ""
    },
    "Constant: FTP_ASCII": {
        "prefix": "FTP_ASCII",
        "body": "FTP_ASCII",
        "description": ""
    },
    "Constant: FTP_AUTOASCII": {
        "prefix": "FTP_AUTOASCII",
        "body": "FTP_AUTOASCII",
        "description": ""
    },
    "Constant: FTP_BINARY": {
        "prefix": "FTP_BINARY",
        "body": "FTP_BINARY",
        "description": ""
    },
    "Constant: FTP_FORCE": {
        "prefix": "FTP_FORCE",
        "body": "FTP_FORCE",
        "description": ""
    },
    "Constant: FTP_OS_Mac": {
        "prefix": "FTP_OS_Mac",
        "body": "FTP_OS_Mac",
        "description": ""
    },
    "Constant: FTP_OS_Unix": {
        "prefix": "FTP_OS_Unix",
        "body": "FTP_OS_Unix",
        "description": ""
    },
    "Constant: FTP_OS_Windows": {
        "prefix": "FTP_OS_Windows",
        "body": "FTP_OS_Windows",
        "description": ""
    },
    "Constant: GB_IN_BYTES": {
        "prefix": "GB_IN_BYTES",
        "body": "GB_IN_BYTES",
        "description": ""
    },
    "Constant: GETID3_FLV_TAG_AUDIO": {
        "prefix": "GETID3_FLV_TAG_AUDIO",
        "body": "GETID3_FLV_TAG_AUDIO",
        "description": ""
    },
    "Constant: GETID3_FLV_TAG_META": {
        "prefix": "GETID3_FLV_TAG_META",
        "body": "GETID3_FLV_TAG_META",
        "description": ""
    },
    "Constant: GETID3_FLV_TAG_VIDEO": {
        "prefix": "GETID3_FLV_TAG_VIDEO",
        "body": "GETID3_FLV_TAG_VIDEO",
        "description": ""
    },
    "Constant: GETID3_FLV_VIDEO_H263": {
        "prefix": "GETID3_FLV_VIDEO_H263",
        "body": "GETID3_FLV_VIDEO_H263",
        "description": ""
    },
    "Constant: GETID3_FLV_VIDEO_H264": {
        "prefix": "GETID3_FLV_VIDEO_H264",
        "body": "GETID3_FLV_VIDEO_H264",
        "description": ""
    },
    "Constant: GETID3_FLV_VIDEO_SCREEN": {
        "prefix": "GETID3_FLV_VIDEO_SCREEN",
        "body": "GETID3_FLV_VIDEO_SCREEN",
        "description": ""
    },
    "Constant: GETID3_FLV_VIDEO_SCREENV2": {
        "prefix": "GETID3_FLV_VIDEO_SCREENV2",
        "body": "GETID3_FLV_VIDEO_SCREENV2",
        "description": ""
    },
    "Constant: GETID3_FLV_VIDEO_VP6FLV": {
        "prefix": "GETID3_FLV_VIDEO_VP6FLV",
        "body": "GETID3_FLV_VIDEO_VP6FLV",
        "description": ""
    },
    "Constant: GETID3_FLV_VIDEO_VP6FLV_ALPHA": {
        "prefix": "GETID3_FLV_VIDEO_VP6FLV_ALPHA",
        "body": "GETID3_FLV_VIDEO_VP6FLV_ALPHA",
        "description": ""
    },
    "Constant: GETID3_HELPERAPPSDIR": {
        "prefix": "GETID3_HELPERAPPSDIR",
        "body": "GETID3_HELPERAPPSDIR",
        "description": ""
    },
    "Constant: GETID3_INCLUDEPATH": {
        "prefix": "GETID3_INCLUDEPATH",
        "body": "GETID3_INCLUDEPATH",
        "description": ""
    },
    "Constant: GETID3_MP3_VALID_CHECK_FRAMES": {
        "prefix": "GETID3_MP3_VALID_CHECK_FRAMES",
        "body": "GETID3_MP3_VALID_CHECK_FRAMES",
        "description": ""
    },
    "Constant: GETID3_OS_ISWINDOWS": {
        "prefix": "GETID3_OS_ISWINDOWS",
        "body": "GETID3_OS_ISWINDOWS",
        "description": ""
    },
    "Constant: GETID3_TEMP_DIR": {
        "prefix": "GETID3_TEMP_DIR",
        "body": "GETID3_TEMP_DIR",
        "description": ""
    },
    "Constant: H264_AVC_SEQUENCE_HEADER": {
        "prefix": "H264_AVC_SEQUENCE_HEADER",
        "body": "H264_AVC_SEQUENCE_HEADER",
        "description": ""
    },
    "Constant: H264_PROFILE_BASELINE": {
        "prefix": "H264_PROFILE_BASELINE",
        "body": "H264_PROFILE_BASELINE",
        "description": ""
    },
    "Constant: H264_PROFILE_EXTENDED": {
        "prefix": "H264_PROFILE_EXTENDED",
        "body": "H264_PROFILE_EXTENDED",
        "description": ""
    },
    "Constant: H264_PROFILE_HIGH": {
        "prefix": "H264_PROFILE_HIGH",
        "body": "H264_PROFILE_HIGH",
        "description": ""
    },
    "Constant: H264_PROFILE_HIGH10": {
        "prefix": "H264_PROFILE_HIGH10",
        "body": "H264_PROFILE_HIGH10",
        "description": ""
    },
    "Constant: H264_PROFILE_HIGH422": {
        "prefix": "H264_PROFILE_HIGH422",
        "body": "H264_PROFILE_HIGH422",
        "description": ""
    },
    "Constant: H264_PROFILE_HIGH444": {
        "prefix": "H264_PROFILE_HIGH444",
        "body": "H264_PROFILE_HIGH444",
        "description": ""
    },
    "Constant: H264_PROFILE_HIGH444_PREDICTIVE": {
        "prefix": "H264_PROFILE_HIGH444_PREDICTIVE",
        "body": "H264_PROFILE_HIGH444_PREDICTIVE",
        "description": ""
    },
    "Constant: H264_PROFILE_MAIN": {
        "prefix": "H264_PROFILE_MAIN",
        "body": "H264_PROFILE_MAIN",
        "description": ""
    },
    "Constant: HEADER_IMAGE": {
        "prefix": "HEADER_IMAGE",
        "body": "HEADER_IMAGE",
        "description": ""
    },
    "Constant: HEADER_IMAGE_HEIGHT": {
        "prefix": "HEADER_IMAGE_HEIGHT",
        "body": "HEADER_IMAGE_HEIGHT",
        "description": ""
    },
    "Constant: HEADER_IMAGE_WIDTH": {
        "prefix": "HEADER_IMAGE_WIDTH",
        "body": "HEADER_IMAGE_WIDTH",
        "description": ""
    },
    "Constant: HEADER_TEXTCOLOR": {
        "prefix": "HEADER_TEXTCOLOR",
        "body": "HEADER_TEXTCOLOR",
        "description": ""
    },
    "Constant: HOUR_IN_SECONDS": {
        "prefix": "HOUR_IN_SECONDS",
        "body": "HOUR_IN_SECONDS",
        "description": ""
    },
    "Constant: IFRAME_REQUEST": {
        "prefix": "IFRAME_REQUEST",
        "body": "IFRAME_REQUEST",
        "description": ""
    },
    "Constant: IMG_JPG": {
        "prefix": "IMG_JPG",
        "body": "IMG_JPG",
        "description": ""
    },
    "Constant: IS_PROFILE_PAGE": {
        "prefix": "IS_PROFILE_PAGE",
        "body": "IS_PROFILE_PAGE",
        "description": "This is a profile page."
    },
    "Constant: JSON_PRETTY_PRINT": {
        "prefix": "JSON_PRETTY_PRINT",
        "body": "JSON_PRETTY_PRINT",
        "description": ""
    },
    "Constant: KB_IN_BYTES": {
        "prefix": "KB_IN_BYTES",
        "body": "KB_IN_BYTES",
        "description": ""
    },
    "Constant: LANGDIR": {
        "prefix": "LANGDIR",
        "body": "LANGDIR",
        "description": ""
    },
    "Constant: LOGGED_IN_COOKIE": {
        "prefix": "LOGGED_IN_COOKIE",
        "body": "LOGGED_IN_COOKIE",
        "description": ""
    },
    "Constant: LOGGED_IN_KEY": {
        "prefix": "LOGGED_IN_KEY",
        "body": "LOGGED_IN_KEY",
        "description": ""
    },
    "Constant: LOGGED_IN_SALT": {
        "prefix": "LOGGED_IN_SALT",
        "body": "LOGGED_IN_SALT",
        "description": ""
    },
    "Constant: MAGPIE_CACHE_AGE": {
        "prefix": "MAGPIE_CACHE_AGE",
        "body": "MAGPIE_CACHE_AGE",
        "description": ""
    },
    "Constant: MAGPIE_CACHE_DIR": {
        "prefix": "MAGPIE_CACHE_DIR",
        "body": "MAGPIE_CACHE_DIR",
        "description": ""
    },
    "Constant: MAGPIE_CACHE_FRESH_ONLY": {
        "prefix": "MAGPIE_CACHE_FRESH_ONLY",
        "body": "MAGPIE_CACHE_FRESH_ONLY",
        "description": ""
    },
    "Constant: MAGPIE_CACHE_ON": {
        "prefix": "MAGPIE_CACHE_ON",
        "body": "MAGPIE_CACHE_ON",
        "description": ""
    },
    "Constant: MAGPIE_DEBUG": {
        "prefix": "MAGPIE_DEBUG",
        "body": "MAGPIE_DEBUG",
        "description": ""
    },
    "Constant: MAGPIE_FETCH_TIME_OUT": {
        "prefix": "MAGPIE_FETCH_TIME_OUT",
        "body": "MAGPIE_FETCH_TIME_OUT",
        "description": ""
    },
    "Constant: MAGPIE_INITALIZED": {
        "prefix": "MAGPIE_INITALIZED",
        "body": "MAGPIE_INITALIZED",
        "description": ""
    },
    "Constant: MAGPIE_USE_GZIP": {
        "prefix": "MAGPIE_USE_GZIP",
        "body": "MAGPIE_USE_GZIP",
        "description": ""
    },
    "Constant: MAGPIE_USER_AGENT": {
        "prefix": "MAGPIE_USER_AGENT",
        "body": "MAGPIE_USER_AGENT",
        "description": ""
    },
    "Constant: MB_IN_BYTES": {
        "prefix": "MB_IN_BYTES",
        "body": "MB_IN_BYTES",
        "description": ""
    },
    "Constant: MEDIA_TRASH": {
        "prefix": "MEDIA_TRASH",
        "body": "MEDIA_TRASH",
        "description": ""
    },
    "Constant: MINUTE_IN_SECONDS": {
        "prefix": "MINUTE_IN_SECONDS",
        "body": "MINUTE_IN_SECONDS",
        "description": ""
    },
    "Constant: MONTH_IN_SECONDS": {
        "prefix": "MONTH_IN_SECONDS",
        "body": "MONTH_IN_SECONDS",
        "description": ""
    },
    "Constant: MULTISITE": {
        "prefix": "MULTISITE",
        "body": "MULTISITE",
        "description": ""
    },
    "Constant: MUPLUGINDIR": {
        "prefix": "MUPLUGINDIR",
        "body": "MUPLUGINDIR",
        "description": ""
    },
    "Constant: NO_HEADER_TEXT": {
        "prefix": "NO_HEADER_TEXT",
        "body": "NO_HEADER_TEXT",
        "description": ""
    },
    "Constant: NONCE_KEY": {
        "prefix": "NONCE_KEY",
        "body": "NONCE_KEY",
        "description": ""
    },
    "Constant: NONCE_SALT": {
        "prefix": "NONCE_SALT",
        "body": "NONCE_SALT",
        "description": ""
    },
    "Constant: object": {
        "prefix": "object",
        "body": "object",
        "description": ""
    },
    "Constant: OBJECT": {
        "prefix": "OBJECT",
        "body": "OBJECT",
        "description": ""
    },
    "Constant: OBJECT_K": {
        "prefix": "OBJECT_K",
        "body": "OBJECT_K",
        "description": ""
    },
    "Constant: PASS_COOKIE": {
        "prefix": "PASS_COOKIE",
        "body": "PASS_COOKIE",
        "description": ""
    },
    "Constant: PCLZIP_ATT_FILE_COMMENT": {
        "prefix": "PCLZIP_ATT_FILE_COMMENT",
        "body": "PCLZIP_ATT_FILE_COMMENT",
        "description": ""
    },
    "Constant: PCLZIP_ATT_FILE_CONTENT": {
        "prefix": "PCLZIP_ATT_FILE_CONTENT",
        "body": "PCLZIP_ATT_FILE_CONTENT",
        "description": ""
    },
    "Constant: PCLZIP_ATT_FILE_MTIME": {
        "prefix": "PCLZIP_ATT_FILE_MTIME",
        "body": "PCLZIP_ATT_FILE_MTIME",
        "description": ""
    },
    "Constant: PCLZIP_ATT_FILE_NAME": {
        "prefix": "PCLZIP_ATT_FILE_NAME",
        "body": "PCLZIP_ATT_FILE_NAME",
        "description": ""
    },
    "Constant: PCLZIP_ATT_FILE_NEW_FULL_NAME": {
        "prefix": "PCLZIP_ATT_FILE_NEW_FULL_NAME",
        "body": "PCLZIP_ATT_FILE_NEW_FULL_NAME",
        "description": ""
    },
    "Constant: PCLZIP_ATT_FILE_NEW_SHORT_NAME": {
        "prefix": "PCLZIP_ATT_FILE_NEW_SHORT_NAME",
        "body": "PCLZIP_ATT_FILE_NEW_SHORT_NAME",
        "description": ""
    },
    "Constant: PCLZIP_CB_POST_ADD": {
        "prefix": "PCLZIP_CB_POST_ADD",
        "body": "PCLZIP_CB_POST_ADD",
        "description": ""
    },
    "Constant: PCLZIP_CB_POST_EXTRACT": {
        "prefix": "PCLZIP_CB_POST_EXTRACT",
        "body": "PCLZIP_CB_POST_EXTRACT",
        "description": ""
    },
    "Constant: PCLZIP_CB_PRE_ADD": {
        "prefix": "PCLZIP_CB_PRE_ADD",
        "body": "PCLZIP_CB_PRE_ADD",
        "description": ""
    },
    "Constant: PCLZIP_CB_PRE_EXTRACT": {
        "prefix": "PCLZIP_CB_PRE_EXTRACT",
        "body": "PCLZIP_CB_PRE_EXTRACT",
        "description": ""
    },
    "Constant: PCLZIP_ERR_ALREADY_A_DIRECTORY": {
        "prefix": "PCLZIP_ERR_ALREADY_A_DIRECTORY",
        "body": "PCLZIP_ERR_ALREADY_A_DIRECTORY",
        "description": ""
    },
    "Constant: PCLZIP_ERR_BAD_CHECKSUM": {
        "prefix": "PCLZIP_ERR_BAD_CHECKSUM",
        "body": "PCLZIP_ERR_BAD_CHECKSUM",
        "description": ""
    },
    "Constant: PCLZIP_ERR_BAD_EXTENSION": {
        "prefix": "PCLZIP_ERR_BAD_EXTENSION",
        "body": "PCLZIP_ERR_BAD_EXTENSION",
        "description": ""
    },
    "Constant: PCLZIP_ERR_BAD_EXTRACTED_FILE": {
        "prefix": "PCLZIP_ERR_BAD_EXTRACTED_FILE",
        "body": "PCLZIP_ERR_BAD_EXTRACTED_FILE",
        "description": ""
    },
    "Constant: PCLZIP_ERR_BAD_FORMAT": {
        "prefix": "PCLZIP_ERR_BAD_FORMAT",
        "body": "PCLZIP_ERR_BAD_FORMAT",
        "description": ""
    },
    "Constant: PCLZIP_ERR_DELETE_FILE_FAIL": {
        "prefix": "PCLZIP_ERR_DELETE_FILE_FAIL",
        "body": "PCLZIP_ERR_DELETE_FILE_FAIL",
        "description": ""
    },
    "Constant: PCLZIP_ERR_DIR_CREATE_FAIL": {
        "prefix": "PCLZIP_ERR_DIR_CREATE_FAIL",
        "body": "PCLZIP_ERR_DIR_CREATE_FAIL",
        "description": ""
    },
    "Constant: PCLZIP_ERR_DIRECTORY_RESTRICTION": {
        "prefix": "PCLZIP_ERR_DIRECTORY_RESTRICTION",
        "body": "PCLZIP_ERR_DIRECTORY_RESTRICTION",
        "description": ""
    },
    "Constant: PCLZIP_ERR_FILENAME_TOO_LONG": {
        "prefix": "PCLZIP_ERR_FILENAME_TOO_LONG",
        "body": "PCLZIP_ERR_FILENAME_TOO_LONG",
        "description": ""
    },
    "Constant: PCLZIP_ERR_INVALID_ARCHIVE_ZIP": {
        "prefix": "PCLZIP_ERR_INVALID_ARCHIVE_ZIP",
        "body": "PCLZIP_ERR_INVALID_ARCHIVE_ZIP",
        "description": ""
    },
    "Constant: PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE": {
        "prefix": "PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE",
        "body": "PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE",
        "description": ""
    },
    "Constant: PCLZIP_ERR_INVALID_OPTION_VALUE": {
        "prefix": "PCLZIP_ERR_INVALID_OPTION_VALUE",
        "body": "PCLZIP_ERR_INVALID_OPTION_VALUE",
        "description": ""
    },
    "Constant: PCLZIP_ERR_INVALID_PARAMETER": {
        "prefix": "PCLZIP_ERR_INVALID_PARAMETER",
        "body": "PCLZIP_ERR_INVALID_PARAMETER",
        "description": ""
    },
    "Constant: PCLZIP_ERR_INVALID_ZIP": {
        "prefix": "PCLZIP_ERR_INVALID_ZIP",
        "body": "PCLZIP_ERR_INVALID_ZIP",
        "description": ""
    },
    "Constant: PCLZIP_ERR_MISSING_FILE": {
        "prefix": "PCLZIP_ERR_MISSING_FILE",
        "body": "PCLZIP_ERR_MISSING_FILE",
        "description": ""
    },
    "Constant: PCLZIP_ERR_MISSING_OPTION_VALUE": {
        "prefix": "PCLZIP_ERR_MISSING_OPTION_VALUE",
        "body": "PCLZIP_ERR_MISSING_OPTION_VALUE",
        "description": ""
    },
    "Constant: PCLZIP_ERR_NO_ERROR": {
        "prefix": "PCLZIP_ERR_NO_ERROR",
        "body": "PCLZIP_ERR_NO_ERROR",
        "description": ""
    },
    "Constant: PCLZIP_ERR_READ_OPEN_FAIL": {
        "prefix": "PCLZIP_ERR_READ_OPEN_FAIL",
        "body": "PCLZIP_ERR_READ_OPEN_FAIL",
        "description": ""
    },
    "Constant: PCLZIP_ERR_RENAME_FILE_FAIL": {
        "prefix": "PCLZIP_ERR_RENAME_FILE_FAIL",
        "body": "PCLZIP_ERR_RENAME_FILE_FAIL",
        "description": ""
    },
    "Constant: PCLZIP_ERR_UNSUPPORTED_COMPRESSION": {
        "prefix": "PCLZIP_ERR_UNSUPPORTED_COMPRESSION",
        "body": "PCLZIP_ERR_UNSUPPORTED_COMPRESSION",
        "description": ""
    },
    "Constant: PCLZIP_ERR_UNSUPPORTED_ENCRYPTION": {
        "prefix": "PCLZIP_ERR_UNSUPPORTED_ENCRYPTION",
        "body": "PCLZIP_ERR_UNSUPPORTED_ENCRYPTION",
        "description": ""
    },
    "Constant: PCLZIP_ERR_USER_ABORTED": {
        "prefix": "PCLZIP_ERR_USER_ABORTED",
        "body": "PCLZIP_ERR_USER_ABORTED",
        "description": ""
    },
    "Constant: PCLZIP_ERR_WRITE_OPEN_FAIL": {
        "prefix": "PCLZIP_ERR_WRITE_OPEN_FAIL",
        "body": "PCLZIP_ERR_WRITE_OPEN_FAIL",
        "description": ""
    },
    "Constant: PCLZIP_ERROR_EXTERNAL": {
        "prefix": "PCLZIP_ERROR_EXTERNAL",
        "body": "PCLZIP_ERROR_EXTERNAL",
        "description": ""
    },
    "Constant: PCLZIP_OPT_ADD_COMMENT": {
        "prefix": "PCLZIP_OPT_ADD_COMMENT",
        "body": "PCLZIP_OPT_ADD_COMMENT",
        "description": ""
    },
    "Constant: PCLZIP_OPT_ADD_PATH": {
        "prefix": "PCLZIP_OPT_ADD_PATH",
        "body": "PCLZIP_OPT_ADD_PATH",
        "description": ""
    },
    "Constant: PCLZIP_OPT_ADD_TEMP_FILE_OFF": {
        "prefix": "PCLZIP_OPT_ADD_TEMP_FILE_OFF",
        "body": "PCLZIP_OPT_ADD_TEMP_FILE_OFF",
        "description": ""
    },
    "Constant: PCLZIP_OPT_ADD_TEMP_FILE_ON": {
        "prefix": "PCLZIP_OPT_ADD_TEMP_FILE_ON",
        "body": "PCLZIP_OPT_ADD_TEMP_FILE_ON",
        "description": ""
    },
    "Constant: PCLZIP_OPT_ADD_TEMP_FILE_THRESHOLD": {
        "prefix": "PCLZIP_OPT_ADD_TEMP_FILE_THRESHOLD",
        "body": "PCLZIP_OPT_ADD_TEMP_FILE_THRESHOLD",
        "description": ""
    },
    "Constant: PCLZIP_OPT_BY_EREG": {
        "prefix": "PCLZIP_OPT_BY_EREG",
        "body": "PCLZIP_OPT_BY_EREG",
        "description": ""
    },
    "Constant: PCLZIP_OPT_BY_INDEX": {
        "prefix": "PCLZIP_OPT_BY_INDEX",
        "body": "PCLZIP_OPT_BY_INDEX",
        "description": ""
    },
    "Constant: PCLZIP_OPT_BY_NAME": {
        "prefix": "PCLZIP_OPT_BY_NAME",
        "body": "PCLZIP_OPT_BY_NAME",
        "description": ""
    },
    "Constant: PCLZIP_OPT_BY_PREG": {
        "prefix": "PCLZIP_OPT_BY_PREG",
        "body": "PCLZIP_OPT_BY_PREG",
        "description": ""
    },
    "Constant: PCLZIP_OPT_COMMENT": {
        "prefix": "PCLZIP_OPT_COMMENT",
        "body": "PCLZIP_OPT_COMMENT",
        "description": ""
    },
    "Constant: PCLZIP_OPT_EXTRACT_AS_STRING": {
        "prefix": "PCLZIP_OPT_EXTRACT_AS_STRING",
        "body": "PCLZIP_OPT_EXTRACT_AS_STRING",
        "description": ""
    },
    "Constant: PCLZIP_OPT_EXTRACT_DIR_RESTRICTION": {
        "prefix": "PCLZIP_OPT_EXTRACT_DIR_RESTRICTION",
        "body": "PCLZIP_OPT_EXTRACT_DIR_RESTRICTION",
        "description": ""
    },
    "Constant: PCLZIP_OPT_EXTRACT_IN_OUTPUT": {
        "prefix": "PCLZIP_OPT_EXTRACT_IN_OUTPUT",
        "body": "PCLZIP_OPT_EXTRACT_IN_OUTPUT",
        "description": ""
    },
    "Constant: PCLZIP_OPT_NO_COMPRESSION": {
        "prefix": "PCLZIP_OPT_NO_COMPRESSION",
        "body": "PCLZIP_OPT_NO_COMPRESSION",
        "description": ""
    },
    "Constant: PCLZIP_OPT_PATH": {
        "prefix": "PCLZIP_OPT_PATH",
        "body": "PCLZIP_OPT_PATH",
        "description": ""
    },
    "Constant: PCLZIP_OPT_PREPEND_COMMENT": {
        "prefix": "PCLZIP_OPT_PREPEND_COMMENT",
        "body": "PCLZIP_OPT_PREPEND_COMMENT",
        "description": ""
    },
    "Constant: PCLZIP_OPT_REMOVE_ALL_PATH": {
        "prefix": "PCLZIP_OPT_REMOVE_ALL_PATH",
        "body": "PCLZIP_OPT_REMOVE_ALL_PATH",
        "description": ""
    },
    "Constant: PCLZIP_OPT_REMOVE_PATH": {
        "prefix": "PCLZIP_OPT_REMOVE_PATH",
        "body": "PCLZIP_OPT_REMOVE_PATH",
        "description": ""
    },
    "Constant: PCLZIP_OPT_REPLACE_NEWER": {
        "prefix": "PCLZIP_OPT_REPLACE_NEWER",
        "body": "PCLZIP_OPT_REPLACE_NEWER",
        "description": ""
    },
    "Constant: PCLZIP_OPT_SET_CHMOD": {
        "prefix": "PCLZIP_OPT_SET_CHMOD",
        "body": "PCLZIP_OPT_SET_CHMOD",
        "description": ""
    },
    "Constant: PCLZIP_OPT_STOP_ON_ERROR": {
        "prefix": "PCLZIP_OPT_STOP_ON_ERROR",
        "body": "PCLZIP_OPT_STOP_ON_ERROR",
        "description": ""
    },
    "Constant: PCLZIP_OPT_TEMP_FILE_OFF": {
        "prefix": "PCLZIP_OPT_TEMP_FILE_OFF",
        "body": "PCLZIP_OPT_TEMP_FILE_OFF",
        "description": ""
    },
    "Constant: PCLZIP_OPT_TEMP_FILE_ON": {
        "prefix": "PCLZIP_OPT_TEMP_FILE_ON",
        "body": "PCLZIP_OPT_TEMP_FILE_ON",
        "description": ""
    },
    "Constant: PCLZIP_OPT_TEMP_FILE_THRESHOLD": {
        "prefix": "PCLZIP_OPT_TEMP_FILE_THRESHOLD",
        "body": "PCLZIP_OPT_TEMP_FILE_THRESHOLD",
        "description": ""
    },
    "Constant: PCLZIP_READ_BLOCK_SIZE": {
        "prefix": "PCLZIP_READ_BLOCK_SIZE",
        "body": "PCLZIP_READ_BLOCK_SIZE",
        "description": ""
    },
    "Constant: PCLZIP_SEPARATOR": {
        "prefix": "PCLZIP_SEPARATOR",
        "body": "PCLZIP_SEPARATOR",
        "description": ""
    },
    "Constant: PCLZIP_TEMPORARY_DIR": {
        "prefix": "PCLZIP_TEMPORARY_DIR",
        "body": "PCLZIP_TEMPORARY_DIR",
        "description": ""
    },
    "Constant: PCLZIP_TEMPORARY_FILE_RATIO": {
        "prefix": "PCLZIP_TEMPORARY_FILE_RATIO",
        "body": "PCLZIP_TEMPORARY_FILE_RATIO",
        "description": ""
    },
    "Constant: PHP_INT_MIN": {
        "prefix": "PHP_INT_MIN",
        "body": "PHP_INT_MIN",
        "description": ""
    },
    "Constant: PHP_VERSION_ID": {
        "prefix": "PHP_VERSION_ID",
        "body": "PHP_VERSION_ID",
        "description": ""
    },
    "Constant: PLUGINDIR": {
        "prefix": "PLUGINDIR",
        "body": "PLUGINDIR",
        "description": ""
    },
    "Constant: PLUGINS_COOKIE_PATH": {
        "prefix": "PLUGINS_COOKIE_PATH",
        "body": "PLUGINS_COOKIE_PATH",
        "description": ""
    },
    "Constant: PO_MAX_LINE_LEN": {
        "prefix": "PO_MAX_LINE_LEN",
        "body": "PO_MAX_LINE_LEN",
        "description": ""
    },
    "Constant: RANDOM_COMPAT_READ_BUFFER": {
        "prefix": "RANDOM_COMPAT_READ_BUFFER",
        "body": "RANDOM_COMPAT_READ_BUFFER",
        "description": ""
    },
    "Constant: REST_API_VERSION": {
        "prefix": "REST_API_VERSION",
        "body": "REST_API_VERSION",
        "description": "Version number for our API."
    },
    "Constant: REST_REQUEST": {
        "prefix": "REST_REQUEST",
        "body": "REST_REQUEST",
        "description": "Whether this is a REST Request."
    },
    "Constant: RSS": {
        "prefix": "RSS",
        "body": "RSS",
        "description": "RSS feed constant."
    },
    "Constant: SCRIPT_DEBUG": {
        "prefix": "SCRIPT_DEBUG",
        "body": "SCRIPT_DEBUG",
        "description": ""
    },
    "Constant: SECURE_AUTH_COOKIE": {
        "prefix": "SECURE_AUTH_COOKIE",
        "body": "SECURE_AUTH_COOKIE",
        "description": ""
    },
    "Constant: SECURE_AUTH_KEY": {
        "prefix": "SECURE_AUTH_KEY",
        "body": "SECURE_AUTH_KEY",
        "description": ""
    },
    "Constant: SECURE_AUTH_SALT": {
        "prefix": "SECURE_AUTH_SALT",
        "body": "SECURE_AUTH_SALT",
        "description": ""
    },
    "Constant: SERVICES_JSON_IN_ARR": {
        "prefix": "SERVICES_JSON_IN_ARR",
        "body": "SERVICES_JSON_IN_ARR",
        "description": "Marker constant for Services_JSON::decode(), used to flag stack state"
    },
    "Constant: SERVICES_JSON_IN_CMT": {
        "prefix": "SERVICES_JSON_IN_CMT",
        "body": "SERVICES_JSON_IN_CMT",
        "description": "Marker constant for Services_JSON::decode(), used to flag stack state"
    },
    "Constant: SERVICES_JSON_IN_OBJ": {
        "prefix": "SERVICES_JSON_IN_OBJ",
        "body": "SERVICES_JSON_IN_OBJ",
        "description": "Marker constant for Services_JSON::decode(), used to flag stack state"
    },
    "Constant: SERVICES_JSON_IN_STR": {
        "prefix": "SERVICES_JSON_IN_STR",
        "body": "SERVICES_JSON_IN_STR",
        "description": "Marker constant for Services_JSON::decode(), used to flag stack state"
    },
    "Constant: SERVICES_JSON_LOOSE_TYPE": {
        "prefix": "SERVICES_JSON_LOOSE_TYPE",
        "body": "SERVICES_JSON_LOOSE_TYPE",
        "description": "Behavior switch for Services_JSON::decode()"
    },
    "Constant: SERVICES_JSON_SLICE": {
        "prefix": "SERVICES_JSON_SLICE",
        "body": "SERVICES_JSON_SLICE",
        "description": "Marker constant for Services_JSON::decode(), used to flag stack state"
    },
    "Constant: SERVICES_JSON_SUPPRESS_ERRORS": {
        "prefix": "SERVICES_JSON_SUPPRESS_ERRORS",
        "body": "SERVICES_JSON_SUPPRESS_ERRORS",
        "description": "Behavior switch for Services_JSON::decode()"
    },
    "Constant: SERVICES_JSON_USE_TO_JSON": {
        "prefix": "SERVICES_JSON_USE_TO_JSON",
        "body": "SERVICES_JSON_USE_TO_JSON",
        "description": "Behavior switch for Services_JSON::decode()"
    },
    "Constant: SHORTINIT": {
        "prefix": "SHORTINIT",
        "body": "SHORTINIT",
        "description": ""
    },
    "Constant: SIMPLEPIE_BUILD": {
        "prefix": "SIMPLEPIE_BUILD",
        "body": "SIMPLEPIE_BUILD",
        "description": "SimplePie Build"
    },
    "Constant: SIMPLEPIE_CONSTRUCT_ALL": {
        "prefix": "SIMPLEPIE_CONSTRUCT_ALL",
        "body": "SIMPLEPIE_CONSTRUCT_ALL",
        "description": "All constructs"
    },
    "Constant: SIMPLEPIE_CONSTRUCT_BASE64": {
        "prefix": "SIMPLEPIE_CONSTRUCT_BASE64",
        "body": "SIMPLEPIE_CONSTRUCT_BASE64",
        "description": "base64-encoded construct"
    },
    "Constant: SIMPLEPIE_CONSTRUCT_HTML": {
        "prefix": "SIMPLEPIE_CONSTRUCT_HTML",
        "body": "SIMPLEPIE_CONSTRUCT_HTML",
        "description": "HTML construct"
    },
    "Constant: SIMPLEPIE_CONSTRUCT_IRI": {
        "prefix": "SIMPLEPIE_CONSTRUCT_IRI",
        "body": "SIMPLEPIE_CONSTRUCT_IRI",
        "description": "IRI construct"
    },
    "Constant: SIMPLEPIE_CONSTRUCT_MAYBE_HTML": {
        "prefix": "SIMPLEPIE_CONSTRUCT_MAYBE_HTML",
        "body": "SIMPLEPIE_CONSTRUCT_MAYBE_HTML",
        "description": "A construct that might be HTML"
    },
    "Constant: SIMPLEPIE_CONSTRUCT_NONE": {
        "prefix": "SIMPLEPIE_CONSTRUCT_NONE",
        "body": "SIMPLEPIE_CONSTRUCT_NONE",
        "description": "No construct"
    },
    "Constant: SIMPLEPIE_CONSTRUCT_TEXT": {
        "prefix": "SIMPLEPIE_CONSTRUCT_TEXT",
        "body": "SIMPLEPIE_CONSTRUCT_TEXT",
        "description": "Text construct"
    },
    "Constant: SIMPLEPIE_CONSTRUCT_XHTML": {
        "prefix": "SIMPLEPIE_CONSTRUCT_XHTML",
        "body": "SIMPLEPIE_CONSTRUCT_XHTML",
        "description": "XHTML construct"
    },
    "Constant: SIMPLEPIE_FILE_SOURCE_CURL": {
        "prefix": "SIMPLEPIE_FILE_SOURCE_CURL",
        "body": "SIMPLEPIE_FILE_SOURCE_CURL",
        "description": "cURL file source"
    },
    "Constant: SIMPLEPIE_FILE_SOURCE_FILE_GET_CONTENTS": {
        "prefix": "SIMPLEPIE_FILE_SOURCE_FILE_GET_CONTENTS",
        "body": "SIMPLEPIE_FILE_SOURCE_FILE_GET_CONTENTS",
        "description": "file_get_contents() file source"
    },
    "Constant: SIMPLEPIE_FILE_SOURCE_FSOCKOPEN": {
        "prefix": "SIMPLEPIE_FILE_SOURCE_FSOCKOPEN",
        "body": "SIMPLEPIE_FILE_SOURCE_FSOCKOPEN",
        "description": "fsockopen() file source"
    },
    "Constant: SIMPLEPIE_FILE_SOURCE_LOCAL": {
        "prefix": "SIMPLEPIE_FILE_SOURCE_LOCAL",
        "body": "SIMPLEPIE_FILE_SOURCE_LOCAL",
        "description": "Local file source"
    },
    "Constant: SIMPLEPIE_FILE_SOURCE_NONE": {
        "prefix": "SIMPLEPIE_FILE_SOURCE_NONE",
        "body": "SIMPLEPIE_FILE_SOURCE_NONE",
        "description": "No file source"
    },
    "Constant: SIMPLEPIE_FILE_SOURCE_REMOTE": {
        "prefix": "SIMPLEPIE_FILE_SOURCE_REMOTE",
        "body": "SIMPLEPIE_FILE_SOURCE_REMOTE",
        "description": "Remote file source"
    },
    "Constant: SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY": {
        "prefix": "SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY",
        "body": "SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY",
        "description": "IANA Link Relations Registry"
    },
    "Constant: SIMPLEPIE_LINKBACK": {
        "prefix": "SIMPLEPIE_LINKBACK",
        "body": "SIMPLEPIE_LINKBACK",
        "description": "SimplePie Linkback"
    },
    "Constant: SIMPLEPIE_LOCATOR_ALL": {
        "prefix": "SIMPLEPIE_LOCATOR_ALL",
        "body": "SIMPLEPIE_LOCATOR_ALL",
        "description": "All Feed Autodiscovery"
    },
    "Constant: SIMPLEPIE_LOCATOR_AUTODISCOVERY": {
        "prefix": "SIMPLEPIE_LOCATOR_AUTODISCOVERY",
        "body": "SIMPLEPIE_LOCATOR_AUTODISCOVERY",
        "description": "Feed Link Element Autodiscovery"
    },
    "Constant: SIMPLEPIE_LOCATOR_LOCAL_BODY": {
        "prefix": "SIMPLEPIE_LOCATOR_LOCAL_BODY",
        "body": "SIMPLEPIE_LOCATOR_LOCAL_BODY",
        "description": "Local Feed Body Autodiscovery"
    },
    "Constant: SIMPLEPIE_LOCATOR_LOCAL_EXTENSION": {
        "prefix": "SIMPLEPIE_LOCATOR_LOCAL_EXTENSION",
        "body": "SIMPLEPIE_LOCATOR_LOCAL_EXTENSION",
        "description": "Local Feed Extension Autodiscovery"
    },
    "Constant: SIMPLEPIE_LOCATOR_NONE": {
        "prefix": "SIMPLEPIE_LOCATOR_NONE",
        "body": "SIMPLEPIE_LOCATOR_NONE",
        "description": "No Autodiscovery"
    },
    "Constant: SIMPLEPIE_LOCATOR_REMOTE_BODY": {
        "prefix": "SIMPLEPIE_LOCATOR_REMOTE_BODY",
        "body": "SIMPLEPIE_LOCATOR_REMOTE_BODY",
        "description": "Remote Feed Body Autodiscovery"
    },
    "Constant: SIMPLEPIE_LOCATOR_REMOTE_EXTENSION": {
        "prefix": "SIMPLEPIE_LOCATOR_REMOTE_EXTENSION",
        "body": "SIMPLEPIE_LOCATOR_REMOTE_EXTENSION",
        "description": "Remote Feed Extension Autodiscovery"
    },
    "Constant: SIMPLEPIE_LOWERCASE": {
        "prefix": "SIMPLEPIE_LOWERCASE",
        "body": "SIMPLEPIE_LOWERCASE",
        "description": "Change to lowercase"
    },
    "Constant: SIMPLEPIE_NAME": {
        "prefix": "SIMPLEPIE_NAME",
        "body": "SIMPLEPIE_NAME",
        "description": "SimplePie Name"
    },
    "Constant: SIMPLEPIE_NAMESPACE_ATOM_03": {
        "prefix": "SIMPLEPIE_NAMESPACE_ATOM_03",
        "body": "SIMPLEPIE_NAMESPACE_ATOM_03",
        "description": "Atom 0.3 Namespace"
    },
    "Constant: SIMPLEPIE_NAMESPACE_ATOM_10": {
        "prefix": "SIMPLEPIE_NAMESPACE_ATOM_10",
        "body": "SIMPLEPIE_NAMESPACE_ATOM_10",
        "description": "Atom 1.0 Namespace"
    },
    "Constant: SIMPLEPIE_NAMESPACE_DC_10": {
        "prefix": "SIMPLEPIE_NAMESPACE_DC_10",
        "body": "SIMPLEPIE_NAMESPACE_DC_10",
        "description": "DC 1.0 Namespace"
    },
    "Constant: SIMPLEPIE_NAMESPACE_DC_11": {
        "prefix": "SIMPLEPIE_NAMESPACE_DC_11",
        "body": "SIMPLEPIE_NAMESPACE_DC_11",
        "description": "DC 1.1 Namespace"
    },
    "Constant: SIMPLEPIE_NAMESPACE_GEORSS": {
        "prefix": "SIMPLEPIE_NAMESPACE_GEORSS",
        "body": "SIMPLEPIE_NAMESPACE_GEORSS",
        "description": "GeoRSS Namespace"
    },
    "Constant: SIMPLEPIE_NAMESPACE_ITUNES": {
        "prefix": "SIMPLEPIE_NAMESPACE_ITUNES",
        "body": "SIMPLEPIE_NAMESPACE_ITUNES",
        "description": "iTunes RSS Namespace"
    },
    "Constant: SIMPLEPIE_NAMESPACE_MEDIARSS": {
        "prefix": "SIMPLEPIE_NAMESPACE_MEDIARSS",
        "body": "SIMPLEPIE_NAMESPACE_MEDIARSS",
        "description": "Media RSS Namespace"
    },
    "Constant: SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG": {
        "prefix": "SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG",
        "body": "SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG",
        "description": "Wrong Media RSS Namespace. Caused by a long-standing typo in the spec."
    },
    "Constant: SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG2": {
        "prefix": "SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG2",
        "body": "SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG2",
        "description": "Wrong Media RSS Namespace #2. New namespace introduced in Media RSS 1.5."
    },
    "Constant: SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG3": {
        "prefix": "SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG3",
        "body": "SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG3",
        "description": "Wrong Media RSS Namespace #3. A possible typo of the Media RSS 1.5 namespace."
    },
    "Constant: SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG4": {
        "prefix": "SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG4",
        "body": "SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG4",
        "description": "Wrong Media RSS Namespace #4. New spec location after the RSS Advisory Board takes it over, but not a valid namespace."
    },
    "Constant: SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG5": {
        "prefix": "SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG5",
        "body": "SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG5",
        "description": "Wrong Media RSS Namespace #5. A possible typo of the RSS Advisory Board URL."
    },
    "Constant: SIMPLEPIE_NAMESPACE_RDF": {
        "prefix": "SIMPLEPIE_NAMESPACE_RDF",
        "body": "SIMPLEPIE_NAMESPACE_RDF",
        "description": "RDF Namespace"
    },
    "Constant: SIMPLEPIE_NAMESPACE_RSS_090": {
        "prefix": "SIMPLEPIE_NAMESPACE_RSS_090",
        "body": "SIMPLEPIE_NAMESPACE_RSS_090",
        "description": "RSS 0.90 Namespace"
    },
    "Constant: SIMPLEPIE_NAMESPACE_RSS_10": {
        "prefix": "SIMPLEPIE_NAMESPACE_RSS_10",
        "body": "SIMPLEPIE_NAMESPACE_RSS_10",
        "description": "RSS 1.0 Namespace"
    },
    "Constant: SIMPLEPIE_NAMESPACE_RSS_10_MODULES_CONTENT": {
        "prefix": "SIMPLEPIE_NAMESPACE_RSS_10_MODULES_CONTENT",
        "body": "SIMPLEPIE_NAMESPACE_RSS_10_MODULES_CONTENT",
        "description": "RSS 1.0 Content Module Namespace"
    },
    "Constant: SIMPLEPIE_NAMESPACE_RSS_20": {
        "prefix": "SIMPLEPIE_NAMESPACE_RSS_20",
        "body": "SIMPLEPIE_NAMESPACE_RSS_20",
        "description": "RSS 2.0 Namespace (Stupid, I know, but I&#039;m certain it will confuse people less with support.)"
    },
    "Constant: SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO": {
        "prefix": "SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO",
        "body": "SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO",
        "description": "W3C Basic Geo (WGS84 lat/long) Vocabulary Namespace"
    },
    "Constant: SIMPLEPIE_NAMESPACE_XHTML": {
        "prefix": "SIMPLEPIE_NAMESPACE_XHTML",
        "body": "SIMPLEPIE_NAMESPACE_XHTML",
        "description": "XHTML Namespace"
    },
    "Constant: SIMPLEPIE_NAMESPACE_XML": {
        "prefix": "SIMPLEPIE_NAMESPACE_XML",
        "body": "SIMPLEPIE_NAMESPACE_XML",
        "description": "XML Namespace"
    },
    "Constant: SIMPLEPIE_PCRE_HTML_ATTRIBUTE": {
        "prefix": "SIMPLEPIE_PCRE_HTML_ATTRIBUTE",
        "body": "SIMPLEPIE_PCRE_HTML_ATTRIBUTE",
        "description": "PCRE for HTML attributes"
    },
    "Constant: SIMPLEPIE_PCRE_XML_ATTRIBUTE": {
        "prefix": "SIMPLEPIE_PCRE_XML_ATTRIBUTE",
        "body": "SIMPLEPIE_PCRE_XML_ATTRIBUTE",
        "description": "PCRE for XML attributes"
    },
    "Constant: SIMPLEPIE_SAME_CASE": {
        "prefix": "SIMPLEPIE_SAME_CASE",
        "body": "SIMPLEPIE_SAME_CASE",
        "description": "Don&#039;t change case"
    },
    "Constant: SIMPLEPIE_TYPE_ALL": {
        "prefix": "SIMPLEPIE_TYPE_ALL",
        "body": "SIMPLEPIE_TYPE_ALL",
        "description": "All feed types"
    },
    "Constant: SIMPLEPIE_TYPE_ATOM_03": {
        "prefix": "SIMPLEPIE_TYPE_ATOM_03",
        "body": "SIMPLEPIE_TYPE_ATOM_03",
        "description": "Atom 0.3"
    },
    "Constant: SIMPLEPIE_TYPE_ATOM_10": {
        "prefix": "SIMPLEPIE_TYPE_ATOM_10",
        "body": "SIMPLEPIE_TYPE_ATOM_10",
        "description": "Atom 1.0"
    },
    "Constant: SIMPLEPIE_TYPE_ATOM_ALL": {
        "prefix": "SIMPLEPIE_TYPE_ATOM_ALL",
        "body": "SIMPLEPIE_TYPE_ATOM_ALL",
        "description": "All Atom"
    },
    "Constant: SIMPLEPIE_TYPE_NONE": {
        "prefix": "SIMPLEPIE_TYPE_NONE",
        "body": "SIMPLEPIE_TYPE_NONE",
        "description": "No known feed type"
    },
    "Constant: SIMPLEPIE_TYPE_RSS_090": {
        "prefix": "SIMPLEPIE_TYPE_RSS_090",
        "body": "SIMPLEPIE_TYPE_RSS_090",
        "description": "RSS 0.90"
    },
    "Constant: SIMPLEPIE_TYPE_RSS_091": {
        "prefix": "SIMPLEPIE_TYPE_RSS_091",
        "body": "SIMPLEPIE_TYPE_RSS_091",
        "description": "RSS 0.91 (both Netscape and Userland)"
    },
    "Constant: SIMPLEPIE_TYPE_RSS_091_NETSCAPE": {
        "prefix": "SIMPLEPIE_TYPE_RSS_091_NETSCAPE",
        "body": "SIMPLEPIE_TYPE_RSS_091_NETSCAPE",
        "description": "RSS 0.91 (Netscape)"
    },
    "Constant: SIMPLEPIE_TYPE_RSS_091_USERLAND": {
        "prefix": "SIMPLEPIE_TYPE_RSS_091_USERLAND",
        "body": "SIMPLEPIE_TYPE_RSS_091_USERLAND",
        "description": "RSS 0.91 (Userland)"
    },
    "Constant: SIMPLEPIE_TYPE_RSS_092": {
        "prefix": "SIMPLEPIE_TYPE_RSS_092",
        "body": "SIMPLEPIE_TYPE_RSS_092",
        "description": "RSS 0.92"
    },
    "Constant: SIMPLEPIE_TYPE_RSS_093": {
        "prefix": "SIMPLEPIE_TYPE_RSS_093",
        "body": "SIMPLEPIE_TYPE_RSS_093",
        "description": "RSS 0.93"
    },
    "Constant: SIMPLEPIE_TYPE_RSS_094": {
        "prefix": "SIMPLEPIE_TYPE_RSS_094",
        "body": "SIMPLEPIE_TYPE_RSS_094",
        "description": "RSS 0.94"
    },
    "Constant: SIMPLEPIE_TYPE_RSS_10": {
        "prefix": "SIMPLEPIE_TYPE_RSS_10",
        "body": "SIMPLEPIE_TYPE_RSS_10",
        "description": "RSS 1.0"
    },
    "Constant: SIMPLEPIE_TYPE_RSS_20": {
        "prefix": "SIMPLEPIE_TYPE_RSS_20",
        "body": "SIMPLEPIE_TYPE_RSS_20",
        "description": "RSS 2.0"
    },
    "Constant: SIMPLEPIE_TYPE_RSS_ALL": {
        "prefix": "SIMPLEPIE_TYPE_RSS_ALL",
        "body": "SIMPLEPIE_TYPE_RSS_ALL",
        "description": "All RSS"
    },
    "Constant: SIMPLEPIE_TYPE_RSS_RDF": {
        "prefix": "SIMPLEPIE_TYPE_RSS_RDF",
        "body": "SIMPLEPIE_TYPE_RSS_RDF",
        "description": "RDF-based RSS"
    },
    "Constant: SIMPLEPIE_TYPE_RSS_SYNDICATION": {
        "prefix": "SIMPLEPIE_TYPE_RSS_SYNDICATION",
        "body": "SIMPLEPIE_TYPE_RSS_SYNDICATION",
        "description": "Non-RDF-based RSS (truly intended as syndication format)"
    },
    "Constant: SIMPLEPIE_UPPERCASE": {
        "prefix": "SIMPLEPIE_UPPERCASE",
        "body": "SIMPLEPIE_UPPERCASE",
        "description": "Change to uppercase"
    },
    "Constant: SIMPLEPIE_URL": {
        "prefix": "SIMPLEPIE_URL",
        "body": "SIMPLEPIE_URL",
        "description": "SimplePie Website URL"
    },
    "Constant: SIMPLEPIE_USERAGENT": {
        "prefix": "SIMPLEPIE_USERAGENT",
        "body": "SIMPLEPIE_USERAGENT",
        "description": "SimplePie Useragent"
    },
    "Constant: SIMPLEPIE_VERSION": {
        "prefix": "SIMPLEPIE_VERSION",
        "body": "SIMPLEPIE_VERSION",
        "description": "SimplePie Version"
    },
    "Constant: SITECOOKIEPATH": {
        "prefix": "SITECOOKIEPATH",
        "body": "SITECOOKIEPATH",
        "description": ""
    },
    "Constant: STYLESHEETPATH": {
        "prefix": "STYLESHEETPATH",
        "body": "STYLESHEETPATH",
        "description": "Filesystem path to the current active template stylesheet directory"
    },
    "Constant: SUBDOMAIN_INSTALL": {
        "prefix": "SUBDOMAIN_INSTALL",
        "body": "SUBDOMAIN_INSTALL",
        "description": ""
    },
    "Constant: TB_IN_BYTES": {
        "prefix": "TB_IN_BYTES",
        "body": "TB_IN_BYTES",
        "description": ""
    },
    "Constant: TEMPLATEPATH": {
        "prefix": "TEMPLATEPATH",
        "body": "TEMPLATEPATH",
        "description": "Filesystem path to the current active template directory"
    },
    "Constant: TEST_COOKIE": {
        "prefix": "TEST_COOKIE",
        "body": "TEST_COOKIE",
        "description": ""
    },
    "Constant: UPLOADBLOGSDIR": {
        "prefix": "UPLOADBLOGSDIR",
        "body": "UPLOADBLOGSDIR",
        "description": ""
    },
    "Constant: UPLOADS": {
        "prefix": "UPLOADS",
        "body": "UPLOADS",
        "description": ""
    },
    "Constant: USER_COOKIE": {
        "prefix": "USER_COOKIE",
        "body": "USER_COOKIE",
        "description": ""
    },
    "Constant: VHOST": {
        "prefix": "VHOST",
        "body": "VHOST",
        "description": ""
    },
    "Constant: WEEK_IN_SECONDS": {
        "prefix": "WEEK_IN_SECONDS",
        "body": "WEEK_IN_SECONDS",
        "description": ""
    },
    "Constant: WP_ADMIN": {
        "prefix": "WP_ADMIN",
        "body": "WP_ADMIN",
        "description": ""
    },
    "Constant: WP_BLOG_ADMIN": {
        "prefix": "WP_BLOG_ADMIN",
        "body": "WP_BLOG_ADMIN",
        "description": ""
    },
    "Constant: WP_CACHE": {
        "prefix": "WP_CACHE",
        "body": "WP_CACHE",
        "description": ""
    },
    "Constant: WP_CONTENT_DIR": {
        "prefix": "WP_CONTENT_DIR",
        "body": "WP_CONTENT_DIR",
        "description": ""
    },
    "Constant: WP_CONTENT_URL": {
        "prefix": "WP_CONTENT_URL",
        "body": "WP_CONTENT_URL",
        "description": ""
    },
    "Constant: WP_CRON_LOCK_TIMEOUT": {
        "prefix": "WP_CRON_LOCK_TIMEOUT",
        "body": "WP_CRON_LOCK_TIMEOUT",
        "description": ""
    },
    "Constant: WP_DEBUG": {
        "prefix": "WP_DEBUG",
        "body": "WP_DEBUG",
        "description": "For developers: WordPress debugging mode."
    },
    "Constant: WP_DEBUG_DISPLAY": {
        "prefix": "WP_DEBUG_DISPLAY",
        "body": "WP_DEBUG_DISPLAY",
        "description": ""
    },
    "Constant: WP_DEBUG_LOG": {
        "prefix": "WP_DEBUG_LOG",
        "body": "WP_DEBUG_LOG",
        "description": ""
    },
    "Constant: WP_DEFAULT_THEME": {
        "prefix": "WP_DEFAULT_THEME",
        "body": "WP_DEFAULT_THEME",
        "description": ""
    },
    "Constant: WP_FEATURE_BETTER_PASSWORDS": {
        "prefix": "WP_FEATURE_BETTER_PASSWORDS",
        "body": "WP_FEATURE_BETTER_PASSWORDS",
        "description": ""
    },
    "Constant: WP_IMPORTING": {
        "prefix": "WP_IMPORTING",
        "body": "WP_IMPORTING",
        "description": ""
    },
    "Constant: WP_INSTALLING": {
        "prefix": "WP_INSTALLING",
        "body": "WP_INSTALLING",
        "description": "We are upgrading WordPress."
    },
    "Constant: WP_INSTALLING_NETWORK": {
        "prefix": "WP_INSTALLING_NETWORK",
        "body": "WP_INSTALLING_NETWORK",
        "description": ""
    },
    "Constant: WP_JSON_SERIALIZE_COMPATIBLE": {
        "prefix": "WP_JSON_SERIALIZE_COMPATIBLE",
        "body": "WP_JSON_SERIALIZE_COMPATIBLE",
        "description": ""
    },
    "Constant: WP_LANG_DIR": {
        "prefix": "WP_LANG_DIR",
        "body": "WP_LANG_DIR",
        "description": "Server path of the language directory."
    },
    "Constant: WP_LOAD_IMPORTERS": {
        "prefix": "WP_LOAD_IMPORTERS",
        "body": "WP_LOAD_IMPORTERS",
        "description": ""
    },
    "Constant: WP_MAIL_INTERVAL": {
        "prefix": "WP_MAIL_INTERVAL",
        "body": "WP_MAIL_INTERVAL",
        "description": ""
    },
    "Constant: WP_MAX_MEMORY_LIMIT": {
        "prefix": "WP_MAX_MEMORY_LIMIT",
        "body": "WP_MAX_MEMORY_LIMIT",
        "description": ""
    },
    "Constant: WP_MEMORY_LIMIT": {
        "prefix": "WP_MEMORY_LIMIT",
        "body": "WP_MEMORY_LIMIT",
        "description": ""
    },
    "Constant: WP_NETWORK_ADMIN": {
        "prefix": "WP_NETWORK_ADMIN",
        "body": "WP_NETWORK_ADMIN",
        "description": ""
    },
    "Constant: WP_PLUGIN_DIR": {
        "prefix": "WP_PLUGIN_DIR",
        "body": "WP_PLUGIN_DIR",
        "description": ""
    },
    "Constant: WP_PLUGIN_URL": {
        "prefix": "WP_PLUGIN_URL",
        "body": "WP_PLUGIN_URL",
        "description": ""
    },
    "Constant: WP_POST_REVISIONS": {
        "prefix": "WP_POST_REVISIONS",
        "body": "WP_POST_REVISIONS",
        "description": ""
    },
    "Constant: WP_REPAIRING": {
        "prefix": "WP_REPAIRING",
        "body": "WP_REPAIRING",
        "description": ""
    },
    "Constant: WP_SETUP_CONFIG": {
        "prefix": "WP_SETUP_CONFIG",
        "body": "WP_SETUP_CONFIG",
        "description": "We are blissfully unaware of anything."
    },
    "Constant: WP_UNINSTALL_PLUGIN": {
        "prefix": "WP_UNINSTALL_PLUGIN",
        "body": "WP_UNINSTALL_PLUGIN",
        "description": ""
    },
    "Constant: WP_USE_THEMES": {
        "prefix": "WP_USE_THEMES",
        "body": "WP_USE_THEMES",
        "description": "Tells WordPress to load the WordPress theme and output it."
    },
    "Constant: WP_USER_ADMIN": {
        "prefix": "WP_USER_ADMIN",
        "body": "WP_USER_ADMIN",
        "description": ""
    },
    "Constant: WPINC": {
        "prefix": "WPINC",
        "body": "WPINC",
        "description": "Stores the location of the WordPress directory of functions, classes, and core content."
    },
    "Constant: WPMU_ACCEL_REDIRECT": {
        "prefix": "WPMU_ACCEL_REDIRECT",
        "body": "WPMU_ACCEL_REDIRECT",
        "description": ""
    },
    "Constant: WPMU_PLUGIN_DIR": {
        "prefix": "WPMU_PLUGIN_DIR",
        "body": "WPMU_PLUGIN_DIR",
        "description": ""
    },
    "Constant: WPMU_PLUGIN_URL": {
        "prefix": "WPMU_PLUGIN_URL",
        "body": "WPMU_PLUGIN_URL",
        "description": ""
    },
    "Constant: WPMU_SENDFILE": {
        "prefix": "WPMU_SENDFILE",
        "body": "WPMU_SENDFILE",
        "description": ""
    },
    "Constant: WXR_VERSION": {
        "prefix": "WXR_VERSION",
        "body": "WXR_VERSION",
        "description": "Version number for the export format."
    },
    "Constant: XMLRPC_REQUEST": {
        "prefix": "XMLRPC_REQUEST",
        "body": "XMLRPC_REQUEST",
        "description": "Whether this is an XML-RPC Request"
    },
    "Constant: YEAR_IN_SECONDS": {
        "prefix": "YEAR_IN_SECONDS",
        "body": "YEAR_IN_SECONDS",
        "description": ""
    },
    "Function: _": {
        "prefix": "_",
        "body": "_( ${1:\\$string:} )",
        "description": ""
    },
    "Function: __": {
        "prefix": "__",
        "body": "__( ${1:\\$text:string}, ${2:\\$domain:string} )",
        "description": "Retrieve the translation of $text."
    },
    "Function: __autoload": {
        "prefix": "__autoload",
        "body": "__autoload( ${1:\\$classname:string} )",
        "description": "Autoloader compatibility callback."
    },
    "Function: __checked_selected_helper": {
        "prefix": "__checked_selected_helper",
        "body": "__checked_selected_helper( ${1:\\$helper:mixed}, ${2:\\$current:mixed}, ${3:\\$echo:boolean}, ${4:\\$type:string} )",
        "description": "Private helper function for checked, selected, disabled and readonly."
    },
    "Function: __clear_multi_author_cache": {
        "prefix": "__clear_multi_author_cache",
        "body": "__clear_multi_author_cache(  )",
        "description": "Helper function to clear the cache for number of authors."
    },
    "Function: __ngettext": {
        "prefix": "__ngettext",
        "body": "__ngettext(  )",
        "description": "Retrieve the plural or single form based on the amount."
    },
    "Function: __ngettext_noop": {
        "prefix": "__ngettext_noop",
        "body": "__ngettext_noop(  )",
        "description": "Register plural strings in POT file, but don&#039;t translate them."
    },
    "Function: __return_empty_array": {
        "prefix": "__return_empty_array",
        "body": "__return_empty_array(  )",
        "description": "Returns an empty array."
    },
    "Function: __return_empty_string": {
        "prefix": "__return_empty_string",
        "body": "__return_empty_string(  )",
        "description": "Returns an empty string."
    },
    "Function: __return_false": {
        "prefix": "__return_false",
        "body": "__return_false(  )",
        "description": "Returns false."
    },
    "Function: __return_null": {
        "prefix": "__return_null",
        "body": "__return_null(  )",
        "description": "Returns null."
    },
    "Function: __return_true": {
        "prefix": "__return_true",
        "body": "__return_true(  )",
        "description": "Returns true."
    },
    "Function: __return_zero": {
        "prefix": "__return_zero",
        "body": "__return_zero(  )",
        "description": "Returns 0."
    },
    "Function: _access_denied_splash": {
        "prefix": "_access_denied_splash",
        "body": "_access_denied_splash(  )",
        "description": "Displays an access denied message when a user tries to view a site&#039;s dashboard they do not have access to."
    },
    "Function: _add_post_type_submenus": {
        "prefix": "_add_post_type_submenus",
        "body": "_add_post_type_submenus(  )",
        "description": "Add submenus for post types."
    },
    "Function: _add_themes_utility_last": {
        "prefix": "_add_themes_utility_last",
        "body": "_add_themes_utility_last(  )",
        "description": "Adds the (theme) &#039;Editor&#039; link to the bottom of the Appearance menu."
    },
    "Function: _admin_bar_bump_cb": {
        "prefix": "_admin_bar_bump_cb",
        "body": "_admin_bar_bump_cb(  )",
        "description": "Default admin bar callback."
    },
    "Function: _admin_notice_post_locked": {
        "prefix": "_admin_notice_post_locked",
        "body": "_admin_notice_post_locked(  )",
        "description": "Outputs the HTML for the notice to say that someone else is editing or has taken over editing of this post."
    },
    "Function: _admin_search_query": {
        "prefix": "_admin_search_query",
        "body": "_admin_search_query(  )",
        "description": "Displays the search query."
    },
    "Function: _ajax_wp_die_handler": {
        "prefix": "_ajax_wp_die_handler",
        "body": "_ajax_wp_die_handler( ${1:\\$message:string}, ${2:\\$title:string}, ${3:\\$args:string|array} )",
        "description": "Kill WordPress ajax execution."
    },
    "Function: _autop_newline_preservation_helper": {
        "prefix": "_autop_newline_preservation_helper",
        "body": "_autop_newline_preservation_helper( ${1:\\$matches:array} )",
        "description": "Newline preservation help function for wpautop"
    },
    "Function: _c": {
        "prefix": "_c",
        "body": "_c( ${1:\\$text:string}, ${2:\\$domain:string} )",
        "description": "Retrieve translated string with vertical bar context"
    },
    "Function: _canonical_charset": {
        "prefix": "_canonical_charset",
        "body": "_canonical_charset( ${1:\\$charset:string} )",
        "description": "Retrieve a canonical form of the provided charset appropriate for passing to PHP functions such as htmlspecialchars() and charset html attributes."
    },
    "Function: _cleanup_header_comment": {
        "prefix": "_cleanup_header_comment",
        "body": "_cleanup_header_comment( ${1:\\$str:string} )",
        "description": "Strip close comment and close php tags from file headers used by WP."
    },
    "Function: _cleanup_image_add_caption": {
        "prefix": "_cleanup_image_add_caption",
        "body": "_cleanup_image_add_caption( ${1:\\$matches:} )",
        "description": "Private preg_replace callback used in image_add_caption()"
    },
    "Function: _clear_modified_cache_on_transition_comment_status": {
        "prefix": "_clear_modified_cache_on_transition_comment_status",
        "body": "_clear_modified_cache_on_transition_comment_status( ${1:\\$new_status:string}, ${2:\\$old_status:string} )",
        "description": "Clear the lastcommentmodified cached value when a comment status is changed."
    },
    "Function: _close_comments_for_old_post": {
        "prefix": "_close_comments_for_old_post",
        "body": "_close_comments_for_old_post( ${1:\\$open:boolean}, ${2:\\$post_id:integer} )",
        "description": "Close comments on an old post. Hooked to comments_open and pings_open."
    },
    "Function: _close_comments_for_old_posts": {
        "prefix": "_close_comments_for_old_posts",
        "body": "_close_comments_for_old_posts( ${1:\\$posts:WP_Post}, ${2:\\$query:WP_Query} )",
        "description": "Close comments on old posts on the fly, without any extra DB queries. Hooked to the_posts."
    },
    "Function: _config_wp_home": {
        "prefix": "_config_wp_home",
        "body": "_config_wp_home( ${1:\\$url:string} )",
        "description": "Retrieve the WordPress home page URL."
    },
    "Function: _config_wp_siteurl": {
        "prefix": "_config_wp_siteurl",
        "body": "_config_wp_siteurl( ${1:\\$url:string} )",
        "description": "Retrieve the WordPress site URL."
    },
    "Function: _convert_urlencoded_to_entities": {
        "prefix": "_convert_urlencoded_to_entities",
        "body": "_convert_urlencoded_to_entities( ${1:\\$match:array} )",
        "description": "Preview fix for JavaScript bug with foreign languages."
    },
    "Function: _copy_image_file": {
        "prefix": "_copy_image_file",
        "body": "_copy_image_file( ${1:\\$attachment_id:string} )",
        "description": "Copy an existing image file."
    },
    "Function: _count_posts_cache_key": {
        "prefix": "_count_posts_cache_key",
        "body": "_count_posts_cache_key( ${1:\\$type:string}, ${2:\\$perm:string} )",
        "description": "Return the cache key for wp_count_posts() based on the passed arguments."
    },
    "Function: _custom_background_cb": {
        "prefix": "_custom_background_cb",
        "body": "_custom_background_cb(  )",
        "description": "Default custom background callback."
    },
    "Function: _custom_header_background_just_in_time": {
        "prefix": "_custom_header_background_just_in_time",
        "body": "_custom_header_background_just_in_time(  )",
        "description": "Registers the internal custom header and background routines."
    },
    "Function: _custom_logo_header_styles": {
        "prefix": "_custom_logo_header_styles",
        "body": "_custom_logo_header_styles(  )",
        "description": "Adds CSS to hide header text for custom logo, based on Customizer setting."
    },
    "Function: _deep_replace": {
        "prefix": "_deep_replace",
        "body": "_deep_replace( ${1:\\$search:string|array}, ${2:\\$subject:string} )",
        "description": "Perform a deep string replace operation to ensure the values in $search are no longer present"
    },
    "Function: _default_wp_die_handler": {
        "prefix": "_default_wp_die_handler",
        "body": "_default_wp_die_handler( ${1:\\$message:string|WP_Error}, ${2:\\$title:string}, ${3:\\$args:string|array} )",
        "description": "Kills WordPress execution and display HTML message with error message."
    },
    "Function: _delete_attachment_theme_mod": {
        "prefix": "_delete_attachment_theme_mod",
        "body": "_delete_attachment_theme_mod( ${1:\\$id:integer} )",
        "description": "Checks an attachment being deleted to see if it&#039;s a header or background image."
    },
    "Function: _delete_option_fresh_site": {
        "prefix": "_delete_option_fresh_site",
        "body": "_delete_option_fresh_site(  )",
        "description": "Delete the fresh site option."
    },
    "Function: _deprecated_argument": {
        "prefix": "_deprecated_argument",
        "body": "_deprecated_argument( ${1:\\$function:string}, ${2:\\$version:string}, ${3:\\$message:string|null} )",
        "description": "Mark a function argument as deprecated and inform when it has been used."
    },
    "Function: _deprecated_constructor": {
        "prefix": "_deprecated_constructor",
        "body": "_deprecated_constructor( ${1:\\$class:string}, ${2:\\$version:string}, ${3:\\$parent_class:string} )",
        "description": "Marks a constructor as deprecated and informs when it has been used."
    },
    "Function: _deprecated_file": {
        "prefix": "_deprecated_file",
        "body": "_deprecated_file( ${1:\\$file:string}, ${2:\\$version:string}, ${3:\\$replacement:string|null}, ${4:\\$message:string} )",
        "description": "Mark a file as deprecated and inform when it has been used."
    },
    "Function: _deprecated_function": {
        "prefix": "_deprecated_function",
        "body": "_deprecated_function( ${1:\\$function:string}, ${2:\\$version:string}, ${3:\\$replacement:string|null} )",
        "description": "Mark a function as deprecated and inform when it has been used."
    },
    "Function: _deprecated_hook": {
        "prefix": "_deprecated_hook",
        "body": "_deprecated_hook( ${1:\\$hook:string}, ${2:\\$version:string}, ${3:\\$replacement:string|null}, ${4:\\$message:string|null} )",
        "description": "Marks a deprecated action or filter hook as deprecated and throws a notice."
    },
    "Function: _device_can_upload": {
        "prefix": "_device_can_upload",
        "body": "_device_can_upload(  )",
        "description": "Test if the current device has the capability to upload files."
    },
    "Function: _doing_it_wrong": {
        "prefix": "_doing_it_wrong",
        "body": "_doing_it_wrong( ${1:\\$function:string}, ${2:\\$message:string}, ${3:\\$version:string} )",
        "description": "Mark something as being incorrectly called."
    },
    "Function: _draft_or_post_title": {
        "prefix": "_draft_or_post_title",
        "body": "_draft_or_post_title( ${1:\\$post:integer|WP_Post} )",
        "description": "Get the post title."
    },
    "Function: _e": {
        "prefix": "_e",
        "body": "_e( ${1:\\$text:string}, ${2:\\$domain:string} )",
        "description": "Display translated text."
    },
    "Function: _ex": {
        "prefix": "_ex",
        "body": "_ex( ${1:\\$text:string}, ${2:\\$context:string}, ${3:\\$domain:string} )",
        "description": "Display translated string with gettext context."
    },
    "Function: _fetch_remote_file": {
        "prefix": "_fetch_remote_file",
        "body": "_fetch_remote_file( ${1:\\$url:string}, ${2:\\$headers:array} )",
        "description": "Retrieve URL headers and content using WP HTTP Request API."
    },
    "Function: _filter_query_attachment_filenames": {
        "prefix": "_filter_query_attachment_filenames",
        "body": "_filter_query_attachment_filenames( ${1:\\$clauses:array} )",
        "description": "Filter the SQL clauses of an attachment query to include filenames."
    },
    "Function: _find_post_by_old_date": {
        "prefix": "_find_post_by_old_date",
        "body": "_find_post_by_old_date( ${1:\\$post_type:string} )",
        "description": "Find the post ID for redirecting an old date."
    },
    "Function: _find_post_by_old_slug": {
        "prefix": "_find_post_by_old_slug",
        "body": "_find_post_by_old_slug( ${1:\\$post_type:string} )",
        "description": "Find the post ID for redirecting an old slug."
    },
    "Function: _fix_attachment_links": {
        "prefix": "_fix_attachment_links",
        "body": "_fix_attachment_links( ${1:\\$post:integer|object} )",
        "description": "Replace hrefs of attachment anchors with up-to-date permalinks."
    },
    "Function: _future_post_hook": {
        "prefix": "_future_post_hook",
        "body": "_future_post_hook( ${1:\\$deprecated:integer}, ${2:\\$post:WP_Post} )",
        "description": "Hook used to schedule publication for a post marked for the future."
    },
    "Function: _get_additional_user_keys": {
        "prefix": "_get_additional_user_keys",
        "body": "_get_additional_user_keys( ${1:\\$user:WP_User} )",
        "description": "Returns a list of meta keys to be (maybe) populated in wp_update_user()."
    },
    "Function: _get_admin_bar_pref": {
        "prefix": "_get_admin_bar_pref",
        "body": "_get_admin_bar_pref( ${1:\\$context:string}, ${2:\\$user:integer} )",
        "description": "Retrieve the admin bar display preference of a user."
    },
    "Function: _get_cron_array": {
        "prefix": "_get_cron_array",
        "body": "_get_cron_array(  )",
        "description": "Retrieve cron info array option."
    },
    "Function: _get_custom_object_labels": {
        "prefix": "_get_custom_object_labels",
        "body": "_get_custom_object_labels( ${1:\\$object:object}, ${2:\\$nohier_vs_hier_defaults:array} )",
        "description": "Build an object with custom-something object (post type, taxonomy) labels out of a custom-something object"
    },
    "Function: _get_dropins": {
        "prefix": "_get_dropins",
        "body": "_get_dropins(  )",
        "description": "Returns drop-ins that WordPress uses."
    },
    "Function: _get_last_post_time": {
        "prefix": "_get_last_post_time",
        "body": "_get_last_post_time( ${1:\\$timezone:string}, ${2:\\$field:string}, ${3:\\$post_type:string} )",
        "description": "Get the timestamp of the last time any post was modified or published."
    },
    "Function: _get_list_table": {
        "prefix": "_get_list_table",
        "body": "_get_list_table( ${1:\\$class:string}, ${2:\\$args:array} )",
        "description": "Fetch an instance of a WP_List_Table class."
    },
    "Function: _get_meta_table": {
        "prefix": "_get_meta_table",
        "body": "_get_meta_table( ${1:\\$type:string} )",
        "description": "Retrieve the name of the metadata table for the specified object type."
    },
    "Function: _get_non_cached_ids": {
        "prefix": "_get_non_cached_ids",
        "body": "_get_non_cached_ids( ${1:\\$object_ids:array}, ${2:\\$cache_key:string} )",
        "description": "Retrieve ids that are not already present in the cache."
    },
    "Function: _get_page_link": {
        "prefix": "_get_page_link",
        "body": "_get_page_link( ${1:\\$post:integer|WP_Post}, ${2:\\$leavename:boolean}, ${3:\\$sample:boolean} )",
        "description": "Retrieves the page permalink."
    },
    "Function: _get_path_to_translation": {
        "prefix": "_get_path_to_translation",
        "body": "_get_path_to_translation( ${1:\\$domain:string}, ${2:\\$reset:boolean} )",
        "description": "Gets the path to a translation file for loading a textdomain just in time."
    },
    "Function: _get_path_to_translation_from_lang_dir": {
        "prefix": "_get_path_to_translation_from_lang_dir",
        "body": "_get_path_to_translation_from_lang_dir( ${1:\\$domain:string} )",
        "description": "Gets the path to a translation file in the languages directory for the current locale."
    },
    "Function: _get_plugin_data_markup_translate": {
        "prefix": "_get_plugin_data_markup_translate",
        "body": "_get_plugin_data_markup_translate( ${1:\\$plugin_file:}, ${2:\\$plugin_data:}, ${3:\\$markup:}, ${4:\\$translate:} )",
        "description": "Sanitizes plugin data, optionally adds markup, optionally translates."
    },
    "Function: _get_post_ancestors": {
        "prefix": "_get_post_ancestors",
        "body": "_get_post_ancestors( ${1:\\$post:WP_Post} )",
        "description": "Retrieve post ancestors."
    },
    "Function: _get_random_header_data": {
        "prefix": "_get_random_header_data",
        "body": "_get_random_header_data(  )",
        "description": "Get random header image data from registered images in theme."
    },
    "Function: _get_template_edit_filename": {
        "prefix": "_get_template_edit_filename",
        "body": "_get_template_edit_filename( ${1:\\$fullpath:string}, ${2:\\$containingfolder:string} )",
        "description": "Tidies a filename for url display by the theme editor."
    },
    "Function: _get_term_children": {
        "prefix": "_get_term_children",
        "body": "_get_term_children( ${1:\\$term_id:integer}, ${2:\\$terms:array}, ${3:\\$taxonomy:string}, ${4:\\$ancestors:array} )",
        "description": "Get the subset of $terms that are descendants of $term_id."
    },
    "Function: _get_widget_id_base": {
        "prefix": "_get_widget_id_base",
        "body": "_get_widget_id_base( ${1:\\$id:string} )",
        "description": "Retrieves the widget ID base value."
    },
    "Function: _http_build_query": {
        "prefix": "_http_build_query",
        "body": "_http_build_query( ${1:\\$data:array|object}, ${2:\\$prefix:string|null}, ${3:\\$sep:string|null}, ${4:\\$key:string}, ${5:\\$urlencode:boolean} )",
        "description": "From php.net (modified by Mark Jaquith to behave like the native PHP5 function)."
    },
    "Function: _insert_into_post_button": {
        "prefix": "_insert_into_post_button",
        "body": "_insert_into_post_button( ${1:\\$type:} )",
        "description": "This was once used to display an &#039;Insert into Post&#039; button."
    },
    "Function: _ipad_meta": {
        "prefix": "_ipad_meta",
        "body": "_ipad_meta(  )",
        "description": ""
    },
    "Function: _is_valid_nav_menu_item": {
        "prefix": "_is_valid_nav_menu_item",
        "body": "_is_valid_nav_menu_item( ${1:\\$item:object} )",
        "description": "Return if a menu item is valid."
    },
    "Function: _json_decode_object_helper": {
        "prefix": "_json_decode_object_helper",
        "body": "_json_decode_object_helper( ${1:\\$data:object} )",
        "description": ""
    },
    "Function: _links_add_base": {
        "prefix": "_links_add_base",
        "body": "_links_add_base( ${1:\\$m:string} )",
        "description": "Callback to add a base url to relative links in passed content."
    },
    "Function: _links_add_target": {
        "prefix": "_links_add_target",
        "body": "_links_add_target( ${1:\\$m:string} )",
        "description": "Callback to add a target attribute to all links in passed content."
    },
    "Function: _list_meta_row": {
        "prefix": "_list_meta_row",
        "body": "_list_meta_row( ${1:\\$entry:array}, ${2:\\$count:integer} )",
        "description": "Outputs a single row of public meta data in the Custom Fields meta box."
    },
    "Function: _load_image_to_edit_path": {
        "prefix": "_load_image_to_edit_path",
        "body": "_load_image_to_edit_path( ${1:\\$attachment_id:string}, ${2:\\$size:string} )",
        "description": "Retrieve the path or url of an attachment&#039;s attached file."
    },
    "Function: _load_textdomain_just_in_time": {
        "prefix": "_load_textdomain_just_in_time",
        "body": "_load_textdomain_just_in_time( ${1:\\$domain:string} )",
        "description": "Loads plugin and theme textdomains just-in-time."
    },
    "Function: _local_storage_notice": {
        "prefix": "_local_storage_notice",
        "body": "_local_storage_notice(  )",
        "description": "Output the HTML for restoring the post data from DOM storage"
    },
    "Function: _make_cat_compat": {
        "prefix": "_make_cat_compat",
        "body": "_make_cat_compat( ${1:\\$category:array|object|WP_Term} )",
        "description": "Update category structure to old pre 2.3 from new taxonomy structure."
    },
    "Function: _make_email_clickable_cb": {
        "prefix": "_make_email_clickable_cb",
        "body": "_make_email_clickable_cb( ${1:\\$matches:array} )",
        "description": "Callback to convert email address match to HTML A element."
    },
    "Function: _make_url_clickable_cb": {
        "prefix": "_make_url_clickable_cb",
        "body": "_make_url_clickable_cb( ${1:\\$matches:array} )",
        "description": "Callback to convert URI match to HTML A element."
    },
    "Function: _make_web_ftp_clickable_cb": {
        "prefix": "_make_web_ftp_clickable_cb",
        "body": "_make_web_ftp_clickable_cb( ${1:\\$matches:array} )",
        "description": "Callback to convert URL match to HTML A element."
    },
    "Function: _maybe_update_core": {
        "prefix": "_maybe_update_core",
        "body": "_maybe_update_core(  )",
        "description": "Determines whether core should be updated."
    },
    "Function: _maybe_update_plugins": {
        "prefix": "_maybe_update_plugins",
        "body": "_maybe_update_plugins(  )",
        "description": "Check the last time plugins were run before checking plugin versions."
    },
    "Function: _maybe_update_themes": {
        "prefix": "_maybe_update_themes",
        "body": "_maybe_update_themes(  )",
        "description": "Check themes versions only after a duration of time."
    },
    "Function: _mce_set_direction": {
        "prefix": "_mce_set_direction",
        "body": "_mce_set_direction( ${1:\\$mce_init:array} )",
        "description": "Set the localized direction for MCE plugin."
    },
    "Function: _media_button": {
        "prefix": "_media_button",
        "body": "_media_button( ${1:\\$title:}, ${2:\\$icon:}, ${3:\\$type:}, ${4:\\$id:} )",
        "description": "This was once used to display a media button."
    },
    "Function: _media_states": {
        "prefix": "_media_states",
        "body": "_media_states( ${1:\\$post:WP_Post} )",
        "description": ""
    },
    "Function: _n": {
        "prefix": "_n",
        "body": "_n( ${1:\\$single:string}, ${2:\\$plural:string}, ${3:\\$number:integer}, ${4:\\$domain:string} )",
        "description": "Translates and retrieves the singular or plural form based on the supplied number."
    },
    "Function: _n_noop": {
        "prefix": "_n_noop",
        "body": "_n_noop( ${1:\\$singular:string}, ${2:\\$plural:string}, ${3:\\$domain:string|null} )",
        "description": "Registers plural strings in POT file, but does not translate them."
    },
    "Function: _nav_menu_item_id_use_once": {
        "prefix": "_nav_menu_item_id_use_once",
        "body": "_nav_menu_item_id_use_once( ${1:\\$id:string}, ${2:\\$item:object} )",
        "description": "Prevents a menu item ID from being used more than once."
    },
    "Function: _navigation_markup": {
        "prefix": "_navigation_markup",
        "body": "_navigation_markup( ${1:\\$links:string}, ${2:\\$class:string}, ${3:\\$screen_reader_text:string} )",
        "description": "Wraps passed links in navigational markup."
    },
    "Function: _nc": {
        "prefix": "_nc",
        "body": "_nc( ${1:\\$single:string}, ${2:\\$plural:string}, ${3:\\$number:integer}, ${4:\\$domain:string} )",
        "description": "Legacy version of _n(), which supports contexts."
    },
    "Function: _nx": {
        "prefix": "_nx",
        "body": "_nx( ${1:\\$single:string}, ${2:\\$plural:string}, ${3:\\$number:integer}, ${4:\\$context:string}, ${5:\\$domain:string} )",
        "description": "Translates and retrieves the singular or plural form based on the supplied number, with gettext context."
    },
    "Function: _nx_noop": {
        "prefix": "_nx_noop",
        "body": "_nx_noop( ${1:\\$singular:string}, ${2:\\$plural:string}, ${3:\\$context:string}, ${4:\\$domain:string|null} )",
        "description": "Registers plural strings with gettext context in POT file, but does not translate them."
    },
    "Function: _oembed_create_xml": {
        "prefix": "_oembed_create_xml",
        "body": "_oembed_create_xml( ${1:\\$data:array}, ${2:\\$node:SimpleXMLElement|null} )",
        "description": "Creates an XML string from a given array."
    },
    "Function: _oembed_filter_feed_content": {
        "prefix": "_oembed_filter_feed_content",
        "body": "_oembed_filter_feed_content( ${1:\\$content:string} )",
        "description": "Prepare the oembed HTML to be displayed in an RSS feed."
    },
    "Function: _oembed_rest_pre_serve_request": {
        "prefix": "_oembed_rest_pre_serve_request",
        "body": "_oembed_rest_pre_serve_request( ${1:\\$served:boolean}, ${2:\\$result:WP_HTTP_ResponseInterface}, ${3:\\$request:WP_REST_Request}, ${4:\\$server:WP_REST_Server} )",
        "description": "Hooks into the REST API output to print XML instead of JSON."
    },
    "Function: _pad_term_counts": {
        "prefix": "_pad_term_counts",
        "body": "_pad_term_counts( ${1:\\$terms:array}, ${2:\\$taxonomy:string} )",
        "description": "Add count of children to parent count."
    },
    "Function: _page_traverse_name": {
        "prefix": "_page_traverse_name",
        "body": "_page_traverse_name( ${1:\\$page_id:integer}, ${2:\\$children:array}, ${3:\\$result:array} )",
        "description": "Traverse and return all the nested children post names of a root page."
    },
    "Function: _post_format_get_term": {
        "prefix": "_post_format_get_term",
        "body": "_post_format_get_term( ${1:\\$term:object} )",
        "description": "Remove the post format prefix from the name property of the term object created by get_term()."
    },
    "Function: _post_format_get_terms": {
        "prefix": "_post_format_get_terms",
        "body": "_post_format_get_terms( ${1:\\$terms:array}, ${2:\\$taxonomies:string|array}, ${3:\\$args:array} )",
        "description": "Remove the post format prefix from the name property of the term objects created by get_terms()."
    },
    "Function: _post_format_link": {
        "prefix": "_post_format_link",
        "body": "_post_format_link( ${1:\\$link:string}, ${2:\\$term:object}, ${3:\\$taxonomy:string} )",
        "description": "Filters the post format term link to remove the format prefix."
    },
    "Function: _post_format_request": {
        "prefix": "_post_format_request",
        "body": "_post_format_request( ${1:\\$qvs:array} )",
        "description": "Filters the request to allow for the format prefix."
    },
    "Function: _post_format_wp_get_object_terms": {
        "prefix": "_post_format_wp_get_object_terms",
        "body": "_post_format_wp_get_object_terms( ${1:\\$terms:array} )",
        "description": "Remove the post format prefix from the name property of the term objects created by wp_get_object_terms()."
    },
    "Function: _post_states": {
        "prefix": "_post_states",
        "body": "_post_states( ${1:\\$post:WP_Post} )",
        "description": ""
    },
    "Function: _post_type_meta_capabilities": {
        "prefix": "_post_type_meta_capabilities",
        "body": "_post_type_meta_capabilities( ${1:\\$capabilities:array|null} )",
        "description": "Store or return a list of post type meta caps for map_meta_cap()."
    },
    "Function: _preview_theme_stylesheet_filter": {
        "prefix": "_preview_theme_stylesheet_filter",
        "body": "_preview_theme_stylesheet_filter(  )",
        "description": "Private function to modify the current stylesheet when previewing a theme"
    },
    "Function: _preview_theme_template_filter": {
        "prefix": "_preview_theme_template_filter",
        "body": "_preview_theme_template_filter(  )",
        "description": "Private function to modify the current template when previewing a theme"
    },
    "Function: _prime_comment_caches": {
        "prefix": "_prime_comment_caches",
        "body": "_prime_comment_caches( ${1:\\$comment_ids:array}, ${2:\\$update_meta_cache:boolean} )",
        "description": "Adds any comments from the given IDs to the cache that do not already exist in cache."
    },
    "Function: _prime_network_caches": {
        "prefix": "_prime_network_caches",
        "body": "_prime_network_caches( ${1:\\$network_ids:array} )",
        "description": "Adds any networks from the given IDs to the cache that do not already exist in cache."
    },
    "Function: _prime_post_caches": {
        "prefix": "_prime_post_caches",
        "body": "_prime_post_caches( ${1:\\$ids:array}, ${2:\\$update_term_cache:boolean}, ${3:\\$update_meta_cache:boolean} )",
        "description": "Adds any posts from the given ids to the cache that do not already exist in cache"
    },
    "Function: _prime_site_caches": {
        "prefix": "_prime_site_caches",
        "body": "_prime_site_caches( ${1:\\$ids:array} )",
        "description": "Adds any sites from the given ids to the cache that do not already exist in cache."
    },
    "Function: _prime_term_caches": {
        "prefix": "_prime_term_caches",
        "body": "_prime_term_caches( ${1:\\$term_ids:array}, ${2:\\$update_meta_cache:boolean} )",
        "description": "Adds any terms from the given IDs to the cache that do not already exist in cache."
    },
    "Function: _publish_post_hook": {
        "prefix": "_publish_post_hook",
        "body": "_publish_post_hook( ${1:\\$post_id:integer} )",
        "description": "Hook to schedule pings and enclosures when a post is published."
    },
    "Function: _redirect_to_about_wordpress": {
        "prefix": "_redirect_to_about_wordpress",
        "body": "_redirect_to_about_wordpress( ${1:\\$new_version:string} )",
        "description": "Redirect to the About WordPress page after a successful upgrade."
    },
    "Function: _register_widget_form_callback": {
        "prefix": "_register_widget_form_callback",
        "body": "_register_widget_form_callback( ${1:\\$id:integer|string}, ${2:\\$name:string}, ${3:\\$form_callback:callable}, ${4:\\$options:array} )",
        "description": "Registers the form callback for a widget."
    },
    "Function: _register_widget_update_callback": {
        "prefix": "_register_widget_update_callback",
        "body": "_register_widget_update_callback( ${1:\\$id_base:string}, ${2:\\$update_callback:callable}, ${3:\\$options:array} )",
        "description": "Registers the update callback for a widget."
    },
    "Function: _relocate_children": {
        "prefix": "_relocate_children",
        "body": "_relocate_children( ${1:\\$old_ID:integer}, ${2:\\$new_ID:integer} )",
        "description": "This was once used to move child posts to a new parent."
    },
    "Function: _remove_qs_args_if_not_in_url": {
        "prefix": "_remove_qs_args_if_not_in_url",
        "body": "_remove_qs_args_if_not_in_url( ${1:\\$query_string:string}, ${2:\\$args_to_check:array}, ${3:\\$url:string} )",
        "description": "Removes arguments from a query string if they are not present in a URL DO NOT use this in plugin code."
    },
    "Function: _remove_theme_support": {
        "prefix": "_remove_theme_support",
        "body": "_remove_theme_support( ${1:\\$feature:string} )",
        "description": "Do not use. Removes theme support internally, ignorant of the blacklist."
    },
    "Function: _reset_front_page_settings_for_post": {
        "prefix": "_reset_front_page_settings_for_post",
        "body": "_reset_front_page_settings_for_post( ${1:\\$post_id:integer} )",
        "description": "Reset the page_on_front, show_on_front, and page_for_post settings when a linked page is deleted or trashed."
    },
    "Function: _response_to_rss": {
        "prefix": "_response_to_rss",
        "body": "_response_to_rss( ${1:\\$resp:array} )",
        "description": "Retrieve"
    },
    "Function: _sanitize_text_fields": {
        "prefix": "_sanitize_text_fields",
        "body": "_sanitize_text_fields( ${1:\\$str:string}, ${2:\\$keep_newlines:boolean} )",
        "description": "Internal helper function to sanitize a string from user input or from the db"
    },
    "Function: _save_post_hook": {
        "prefix": "_save_post_hook",
        "body": "_save_post_hook(  )",
        "description": "Callback formerly fired on the save_post hook. No longer needed."
    },
    "Function: _scalar_wp_die_handler": {
        "prefix": "_scalar_wp_die_handler",
        "body": "_scalar_wp_die_handler( ${1:\\$message:string} )",
        "description": "Kill WordPress execution."
    },
    "Function: _search_terms_tidy": {
        "prefix": "_search_terms_tidy",
        "body": "_search_terms_tidy( ${1:\\$t:string} )",
        "description": "Formerly used internally to tidy up the search terms."
    },
    "Function: _set_cron_array": {
        "prefix": "_set_cron_array",
        "body": "_set_cron_array( ${1:\\$cron:array} )",
        "description": "Updates the CRON option with the new CRON array."
    },
    "Function: _set_preview": {
        "prefix": "_set_preview",
        "body": "_set_preview( ${1:\\$post:WP_Post} )",
        "description": "Sets up the post object for preview based on the post autosave."
    },
    "Function: _show_post_preview": {
        "prefix": "_show_post_preview",
        "body": "_show_post_preview(  )",
        "description": "Filters the latest content for preview from the post autosave."
    },
    "Function: _sort_name_callback": {
        "prefix": "_sort_name_callback",
        "body": "_sort_name_callback( ${1:\\$a:}, ${2:\\$b:} )",
        "description": "Callback to sort array by a &#039;name&#039; key."
    },
    "Function: _sort_nav_menu_items": {
        "prefix": "_sort_nav_menu_items",
        "body": "_sort_nav_menu_items( ${1:\\$a:object}, ${2:\\$b:object} )",
        "description": "Sort menu items by the desired key."
    },
    "Function: _sort_uname_callback": {
        "prefix": "_sort_uname_callback",
        "body": "_sort_uname_callback( ${1:\\$a:}, ${2:\\$b:} )",
        "description": "Callback to sort array by a &#039;Name&#039; key."
    },
    "Function: _split_str_by_whitespace": {
        "prefix": "_split_str_by_whitespace",
        "body": "_split_str_by_whitespace( ${1:\\$string:string}, ${2:\\$goal:integer} )",
        "description": "Breaks a string into chunks by splitting at whitespace characters."
    },
    "Function: _thickbox_path_admin_subfolder": {
        "prefix": "_thickbox_path_admin_subfolder",
        "body": "_thickbox_path_admin_subfolder(  )",
        "description": "Thickbox image paths for Network Admin."
    },
    "Function: _transition_post_status": {
        "prefix": "_transition_post_status",
        "body": "_transition_post_status( ${1:\\$new_status:string}, ${2:\\$old_status:string}, ${3:\\$post:WP_Post} )",
        "description": "Hook for managing future post transitions to published."
    },
    "Function: _truncate_post_slug": {
        "prefix": "_truncate_post_slug",
        "body": "_truncate_post_slug( ${1:\\$slug:string}, ${2:\\$length:integer} )",
        "description": "Truncate a post slug."
    },
    "Function: _unzip_file_pclzip": {
        "prefix": "_unzip_file_pclzip",
        "body": "_unzip_file_pclzip( ${1:\\$file:string}, ${2:\\$to:string}, ${3:\\$needed_dirs:array} )",
        "description": "This function should not be called directly, use unzip_file instead. Attempts to unzip an archive using the PclZip library."
    },
    "Function: _unzip_file_ziparchive": {
        "prefix": "_unzip_file_ziparchive",
        "body": "_unzip_file_ziparchive( ${1:\\$file:string}, ${2:\\$to:string}, ${3:\\$needed_dirs:array} )",
        "description": "This function should not be called directly, use unzip_file instead. Attempts to unzip an archive using the ZipArchive class."
    },
    "Function: _update_blog_date_on_post_delete": {
        "prefix": "_update_blog_date_on_post_delete",
        "body": "_update_blog_date_on_post_delete( ${1:\\$post_id:integer} )",
        "description": "Handler for updating the current site&#039;s last updated date when a published post is deleted."
    },
    "Function: _update_blog_date_on_post_publish": {
        "prefix": "_update_blog_date_on_post_publish",
        "body": "_update_blog_date_on_post_publish( ${1:\\$new_status:string}, ${2:\\$old_status:string}, ${3:\\$post:object} )",
        "description": "Handler for updating the site&#039;s last updated date when a post is published or an already published post is changed."
    },
    "Function: _update_generic_term_count": {
        "prefix": "_update_generic_term_count",
        "body": "_update_generic_term_count( ${1:\\$terms:array}, ${2:\\$taxonomy:object} )",
        "description": "Will update term count based on number of objects."
    },
    "Function: _update_post_term_count": {
        "prefix": "_update_post_term_count",
        "body": "_update_post_term_count( ${1:\\$terms:array}, ${2:\\$taxonomy:object} )",
        "description": "Will update term count based on object types of the current taxonomy."
    },
    "Function: _update_posts_count_on_delete": {
        "prefix": "_update_posts_count_on_delete",
        "body": "_update_posts_count_on_delete( ${1:\\$post_id:integer} )",
        "description": "Handler for updating the current site&#039;s posts count when a post is deleted."
    },
    "Function: _update_posts_count_on_transition_post_status": {
        "prefix": "_update_posts_count_on_transition_post_status",
        "body": "_update_posts_count_on_transition_post_status( ${1:\\$new_status:string}, ${2:\\$old_status:string}, ${3:\\$post:WP_Post|null} )",
        "description": "Handler for updating the current site&#039;s posts count when a post status changes."
    },
    "Function: _update_term_count_on_transition_post_status": {
        "prefix": "_update_term_count_on_transition_post_status",
        "body": "_update_term_count_on_transition_post_status( ${1:\\$new_status:string}, ${2:\\$old_status:string}, ${3:\\$post:WP_Post} )",
        "description": "Update the custom taxonomies&#039; term counts when a post&#039;s status is changed."
    },
    "Function: _upgrade_422_remove_genericons": {
        "prefix": "_upgrade_422_remove_genericons",
        "body": "_upgrade_422_remove_genericons(  )",
        "description": "Cleans up Genericons example files."
    },
    "Function: _upgrade_cron_array": {
        "prefix": "_upgrade_cron_array",
        "body": "_upgrade_cron_array( ${1:\\$cron:array} )",
        "description": "Upgrade a Cron info array."
    },
    "Function: _usort_by_first_member": {
        "prefix": "_usort_by_first_member",
        "body": "_usort_by_first_member( ${1:\\$a:array}, ${2:\\$b:array} )",
        "description": "Sorts a multidimensional array by first member of each top level member"
    },
    "Function: _usort_terms_by_ID": {
        "prefix": "_usort_terms_by_ID",
        "body": "_usort_terms_by_ID( ${1:\\$a:object}, ${2:\\$b:object} )",
        "description": "Sort categories by ID."
    },
    "Function: _usort_terms_by_name": {
        "prefix": "_usort_terms_by_name",
        "body": "_usort_terms_by_name( ${1:\\$a:object}, ${2:\\$b:object} )",
        "description": "Sort categories by name."
    },
    "Function: _walk_bookmarks": {
        "prefix": "_walk_bookmarks",
        "body": "_walk_bookmarks( ${1:\\$bookmarks:array}, ${2:\\$args:string|array} )",
        "description": "The formatted output of a list of bookmarks."
    },
    "Function: _wp_add_global_attributes": {
        "prefix": "_wp_add_global_attributes",
        "body": "_wp_add_global_attributes( ${1:\\$value:array} )",
        "description": "Helper function to add global attributes to a tag in the allowed html list."
    },
    "Function: _wp_admin_bar_init": {
        "prefix": "_wp_admin_bar_init",
        "body": "_wp_admin_bar_init(  )",
        "description": "Instantiate the admin bar object and set it up as a global for access elsewhere."
    },
    "Function: _wp_admin_html_begin": {
        "prefix": "_wp_admin_html_begin",
        "body": "_wp_admin_html_begin(  )",
        "description": ""
    },
    "Function: _wp_ajax_add_hierarchical_term": {
        "prefix": "_wp_ajax_add_hierarchical_term",
        "body": "_wp_ajax_add_hierarchical_term(  )",
        "description": "Ajax handler for adding a hierarchical term."
    },
    "Function: _wp_ajax_delete_comment_response": {
        "prefix": "_wp_ajax_delete_comment_response",
        "body": "_wp_ajax_delete_comment_response( ${1:\\$comment_id:integer}, ${2:\\$delta:integer} )",
        "description": "Sends back current comment total and new page links if they need to be updated."
    },
    "Function: _wp_ajax_menu_quick_search": {
        "prefix": "_wp_ajax_menu_quick_search",
        "body": "_wp_ajax_menu_quick_search( ${1:\\$request:array} )",
        "description": "Prints the appropriate response to a menu quick search."
    },
    "Function: _wp_auto_add_pages_to_menu": {
        "prefix": "_wp_auto_add_pages_to_menu",
        "body": "_wp_auto_add_pages_to_menu( ${1:\\$new_status:string}, ${2:\\$old_status:string}, ${3:\\$post:object} )",
        "description": "Automatically add newly published page objects to menus with that as an option."
    },
    "Function: _wp_batch_split_terms": {
        "prefix": "_wp_batch_split_terms",
        "body": "_wp_batch_split_terms(  )",
        "description": "Splits a batch of shared taxonomy terms."
    },
    "Function: _wp_call_all_hook": {
        "prefix": "_wp_call_all_hook",
        "body": "_wp_call_all_hook( ${1:\\$args:array} )",
        "description": "Call the &#039;all&#039; hook, which will process the functions hooked into it."
    },
    "Function: _wp_credits_add_profile_link": {
        "prefix": "_wp_credits_add_profile_link",
        "body": "_wp_credits_add_profile_link( ${1:\\$display_name:string}, ${2:\\$username:string}, ${3:\\$profiles:string} )",
        "description": "Retrieve the link to a contributor&#039;s WordPress.org profile page."
    },
    "Function: _wp_credits_build_object_link": {
        "prefix": "_wp_credits_build_object_link",
        "body": "_wp_credits_build_object_link( ${1:\\$data:string} )",
        "description": "Retrieve the link to an external library used in WordPress."
    },
    "Function: _wp_customize_changeset_filter_insert_post_data": {
        "prefix": "_wp_customize_changeset_filter_insert_post_data",
        "body": "_wp_customize_changeset_filter_insert_post_data( ${1:\\$post_data:array}, ${2:\\$supplied_post_data:array} )",
        "description": "Filters changeset post data upon insert to ensure post_name is intact."
    },
    "Function: _wp_customize_include": {
        "prefix": "_wp_customize_include",
        "body": "_wp_customize_include(  )",
        "description": "Includes and instantiates the WP_Customize_Manager class."
    },
    "Function: _wp_customize_loader_settings": {
        "prefix": "_wp_customize_loader_settings",
        "body": "_wp_customize_loader_settings(  )",
        "description": "Adds settings for the customize-loader script."
    },
    "Function: _wp_customize_publish_changeset": {
        "prefix": "_wp_customize_publish_changeset",
        "body": "_wp_customize_publish_changeset( ${1:\\$new_status:string}, ${2:\\$old_status:string}, ${3:\\$changeset_post:WP_Post} )",
        "description": "Publishes a snapshot&#039;s changes."
    },
    "Function: _wp_dashboard_control_callback": {
        "prefix": "_wp_dashboard_control_callback",
        "body": "_wp_dashboard_control_callback( ${1:\\$dashboard:mixed}, ${2:\\$meta_box:array} )",
        "description": "Outputs controls for the current dashboard widget."
    },
    "Function: _wp_dashboard_recent_comments_row": {
        "prefix": "_wp_dashboard_recent_comments_row",
        "body": "_wp_dashboard_recent_comments_row( ${1:\\$comment:WP_Comment}, ${2:\\$show_date:boolean} )",
        "description": "Outputs a row for the Recent Comments widget."
    },
    "Function: _wp_delete_customize_changeset_dependent_auto_drafts": {
        "prefix": "_wp_delete_customize_changeset_dependent_auto_drafts",
        "body": "_wp_delete_customize_changeset_dependent_auto_drafts( ${1:\\$post_id:integer} )",
        "description": "Delete auto-draft posts associated with the supplied changeset."
    },
    "Function: _wp_delete_orphaned_draft_menu_items": {
        "prefix": "_wp_delete_orphaned_draft_menu_items",
        "body": "_wp_delete_orphaned_draft_menu_items(  )",
        "description": "Deletes orphaned draft menu items"
    },
    "Function: _wp_delete_post_menu_item": {
        "prefix": "_wp_delete_post_menu_item",
        "body": "_wp_delete_post_menu_item( ${1:\\$object_id:integer} )",
        "description": "Callback for handling a menu item when its original object is deleted."
    },
    "Function: _wp_delete_tax_menu_item": {
        "prefix": "_wp_delete_tax_menu_item",
        "body": "_wp_delete_tax_menu_item( ${1:\\$object_id:integer}, ${2:\\$tt_id:integer}, ${3:\\$taxonomy:string} )",
        "description": "Serves as a callback for handling a menu item when its original object is deleted."
    },
    "Function: _wp_emoji_list": {
        "prefix": "_wp_emoji_list",
        "body": "_wp_emoji_list( ${1:\\$type:string} )",
        "description": "Returns a arrays of emoji data."
    },
    "Function: _wp_filter_build_unique_id": {
        "prefix": "_wp_filter_build_unique_id",
        "body": "_wp_filter_build_unique_id( ${1:\\$tag:string}, ${2:\\$function:callable}, ${3:\\$priority:integer|boolean} )",
        "description": "Build Unique ID for storage and retrieval."
    },
    "Function: _wp_filter_taxonomy_base": {
        "prefix": "_wp_filter_taxonomy_base",
        "body": "_wp_filter_taxonomy_base( ${1:\\$base:string} )",
        "description": "Filters the URL base for taxonomies."
    },
    "Function: _wp_footer_scripts": {
        "prefix": "_wp_footer_scripts",
        "body": "_wp_footer_scripts(  )",
        "description": "Private, for use in *_footer_scripts hooks"
    },
    "Function: _wp_get_attachment_relative_path": {
        "prefix": "_wp_get_attachment_relative_path",
        "body": "_wp_get_attachment_relative_path( ${1:\\$file:string} )",
        "description": "Get the attachment path relative to the upload directory."
    },
    "Function: _wp_get_current_user": {
        "prefix": "_wp_get_current_user",
        "body": "_wp_get_current_user(  )",
        "description": "Retrieves the current user object."
    },
    "Function: _wp_get_image_size_from_meta": {
        "prefix": "_wp_get_image_size_from_meta",
        "body": "_wp_get_image_size_from_meta( ${1:\\$size_name:string}, ${2:\\$image_meta:array} )",
        "description": "Get the image size as array from its meta data."
    },
    "Function: _wp_get_post_revision_version": {
        "prefix": "_wp_get_post_revision_version",
        "body": "_wp_get_post_revision_version( ${1:\\$revision:WP_Post} )",
        "description": "Gets the post revision version."
    },
    "Function: _wp_get_user_contactmethods": {
        "prefix": "_wp_get_user_contactmethods",
        "body": "_wp_get_user_contactmethods( ${1:\\$user:WP_User|null} )",
        "description": "The old private function for setting up user contact methods."
    },
    "Function: _wp_handle_upload": {
        "prefix": "_wp_handle_upload",
        "body": "_wp_handle_upload( ${1:\\$file:array}, ${2:\\$overrides:array|false}, ${3:\\$time:string}, ${4:\\$action:string} )",
        "description": "Handle PHP uploads in WordPress, sanitizing file names, checking extensions for mime type, and moving the file to the appropriate directory within the uploads directory."
    },
    "Function: _wp_http_get_object": {
        "prefix": "_wp_http_get_object",
        "body": "_wp_http_get_object(  )",
        "description": "Returns the initialized WP_Http Object"
    },
    "Function: _wp_iso_convert": {
        "prefix": "_wp_iso_convert",
        "body": "_wp_iso_convert( ${1:\\$match:array} )",
        "description": "Helper function to convert hex encoded chars to ASCII"
    },
    "Function: _wp_keep_alive_customize_changeset_dependent_auto_drafts": {
        "prefix": "_wp_keep_alive_customize_changeset_dependent_auto_drafts",
        "body": "_wp_keep_alive_customize_changeset_dependent_auto_drafts( ${1:\\$new_status:string}, ${2:\\$old_status:string}, ${3:\\$post:WP_Post} )",
        "description": "Make sure that auto-draft posts get their post_date bumped or status changed to draft to prevent premature garbage-collection."
    },
    "Function: _wp_kses_decode_entities_chr": {
        "prefix": "_wp_kses_decode_entities_chr",
        "body": "_wp_kses_decode_entities_chr( ${1:\\$match:array} )",
        "description": "Regex callback for wp_kses_decode_entities()"
    },
    "Function: _wp_kses_decode_entities_chr_hexdec": {
        "prefix": "_wp_kses_decode_entities_chr_hexdec",
        "body": "_wp_kses_decode_entities_chr_hexdec( ${1:\\$match:array} )",
        "description": "Regex callback for wp_kses_decode_entities()"
    },
    "Function: _wp_kses_split_callback": {
        "prefix": "_wp_kses_split_callback",
        "body": "_wp_kses_split_callback( ${1:\\$match:} )",
        "description": "Callback for wp_kses_split."
    },
    "Function: _wp_link_page": {
        "prefix": "_wp_link_page",
        "body": "_wp_link_page( ${1:\\$i:integer} )",
        "description": "Helper function for wp_link_pages()."
    },
    "Function: _wp_menu_item_classes_by_context": {
        "prefix": "_wp_menu_item_classes_by_context",
        "body": "_wp_menu_item_classes_by_context( ${1:\\$menu_items:array} )",
        "description": "Add the class property classes for the current context, if applicable."
    },
    "Function: _wp_menu_output": {
        "prefix": "_wp_menu_output",
        "body": "_wp_menu_output( ${1:\\$menu:array}, ${2:\\$submenu:array}, ${3:\\$submenu_as_parent:boolean} )",
        "description": "Display menu."
    },
    "Function: _wp_menus_changed": {
        "prefix": "_wp_menus_changed",
        "body": "_wp_menus_changed(  )",
        "description": "Handle menu config after theme change."
    },
    "Function: _wp_nav_menu_meta_box_object": {
        "prefix": "_wp_nav_menu_meta_box_object",
        "body": "_wp_nav_menu_meta_box_object( ${1:\\$object:object|null} )",
        "description": "Adds custom arguments to some of the meta box object types."
    },
    "Function: _wp_object_count_sort_cb": {
        "prefix": "_wp_object_count_sort_cb",
        "body": "_wp_object_count_sort_cb( ${1:\\$a:object}, ${2:\\$b:object} )",
        "description": "Serves as a callback for comparing objects based on count."
    },
    "Function: _wp_object_name_sort_cb": {
        "prefix": "_wp_object_name_sort_cb",
        "body": "_wp_object_name_sort_cb( ${1:\\$a:object}, ${2:\\$b:object} )",
        "description": "Serves as a callback for comparing objects based on name."
    },
    "Function: _wp_oembed_get_object": {
        "prefix": "_wp_oembed_get_object",
        "body": "_wp_oembed_get_object(  )",
        "description": "Returns the initialized WP_oEmbed object."
    },
    "Function: _wp_personal_data_cleanup_requests": {
        "prefix": "_wp_personal_data_cleanup_requests",
        "body": "_wp_personal_data_cleanup_requests(  )",
        "description": "Cleans up failed and expired requests before displaying the list table."
    },
    "Function: _wp_personal_data_export_page": {
        "prefix": "_wp_personal_data_export_page",
        "body": "_wp_personal_data_export_page(  )",
        "description": "Personal data export."
    },
    "Function: _wp_personal_data_handle_actions": {
        "prefix": "_wp_personal_data_handle_actions",
        "body": "_wp_personal_data_handle_actions(  )",
        "description": "Handle list table actions."
    },
    "Function: _wp_personal_data_removal_page": {
        "prefix": "_wp_personal_data_removal_page",
        "body": "_wp_personal_data_removal_page(  )",
        "description": "Personal data anonymization."
    },
    "Function: _wp_post_revision_data": {
        "prefix": "_wp_post_revision_data",
        "body": "_wp_post_revision_data( ${1:\\$post:array|WP_Post}, ${2:\\$autosave:boolean} )",
        "description": "Returns a post array ready to be inserted into the posts table as a post revision."
    },
    "Function: _wp_post_revision_fields": {
        "prefix": "_wp_post_revision_fields",
        "body": "_wp_post_revision_fields( ${1:\\$post:array|WP_Post}, ${2:\\$deprecated:boolean} )",
        "description": "Determines which fields of posts are to be saved in revisions."
    },
    "Function: _wp_post_thumbnail_html": {
        "prefix": "_wp_post_thumbnail_html",
        "body": "_wp_post_thumbnail_html( ${1:\\$thumbnail_id:integer|null}, ${2:\\$post:mixed|null} )",
        "description": "Output HTML for the post thumbnail meta-box."
    },
    "Function: _wp_preview_post_thumbnail_filter": {
        "prefix": "_wp_preview_post_thumbnail_filter",
        "body": "_wp_preview_post_thumbnail_filter( ${1:\\$value:null|array|string}, ${2:\\$post_id:integer}, ${3:\\$meta_key:string} )",
        "description": "Filters post thumbnail lookup to set the post thumbnail."
    },
    "Function: _wp_preview_terms_filter": {
        "prefix": "_wp_preview_terms_filter",
        "body": "_wp_preview_terms_filter( ${1:\\$terms:array}, ${2:\\$post_id:integer}, ${3:\\$taxonomy:string} )",
        "description": "Filters terms lookup to set the post format."
    },
    "Function: _wp_privacy_account_request_confirmed": {
        "prefix": "_wp_privacy_account_request_confirmed",
        "body": "_wp_privacy_account_request_confirmed( ${1:\\$request_id:integer} )",
        "description": "Update log when privacy request is confirmed."
    },
    "Function: _wp_privacy_account_request_confirmed_message": {
        "prefix": "_wp_privacy_account_request_confirmed_message",
        "body": "_wp_privacy_account_request_confirmed_message( ${1:\\$request_id:integer} )",
        "description": "Return request confirmation message HTML."
    },
    "Function: _wp_privacy_action_request_types": {
        "prefix": "_wp_privacy_action_request_types",
        "body": "_wp_privacy_action_request_types(  )",
        "description": "Get all user privacy request types."
    },
    "Function: _wp_privacy_completed_request": {
        "prefix": "_wp_privacy_completed_request",
        "body": "_wp_privacy_completed_request( ${1:\\$request_id:integer} )",
        "description": "Marks a request as completed by the admin and logs the current timestamp."
    },
    "Function: _wp_privacy_hook_requests_page": {
        "prefix": "_wp_privacy_hook_requests_page",
        "body": "_wp_privacy_hook_requests_page(  )",
        "description": "Add requests pages."
    },
    "Function: _wp_privacy_resend_request": {
        "prefix": "_wp_privacy_resend_request",
        "body": "_wp_privacy_resend_request( ${1:\\$request_id:integer} )",
        "description": "Resend an existing request and return the result."
    },
    "Function: _wp_privacy_send_erasure_fulfillment_notification": {
        "prefix": "_wp_privacy_send_erasure_fulfillment_notification",
        "body": "_wp_privacy_send_erasure_fulfillment_notification( ${1:\\$request_id:integer} )",
        "description": "Notify the user when their erasure request is fulfilled."
    },
    "Function: _wp_privacy_send_request_confirmation_notification": {
        "prefix": "_wp_privacy_send_request_confirmation_notification",
        "body": "_wp_privacy_send_request_confirmation_notification( ${1:\\$request_id:integer} )",
        "description": "Notify the site administrator via email when a request is confirmed."
    },
    "Function: _wp_privacy_statuses": {
        "prefix": "_wp_privacy_statuses",
        "body": "_wp_privacy_statuses(  )",
        "description": "Return statuses for privacy requests."
    },
    "Function: _wp_put_post_revision": {
        "prefix": "_wp_put_post_revision",
        "body": "_wp_put_post_revision( ${1:\\$post:integer|WP_Post|array|null}, ${2:\\$autosave:boolean} )",
        "description": "Inserts post data into the posts table as a post revision."
    },
    "Function: _wp_register_meta_args_whitelist": {
        "prefix": "_wp_register_meta_args_whitelist",
        "body": "_wp_register_meta_args_whitelist( ${1:\\$args:array}, ${2:\\$default_args:array} )",
        "description": "Filter out `register_meta()` args based on a whitelist."
    },
    "Function: _wp_relative_upload_path": {
        "prefix": "_wp_relative_upload_path",
        "body": "_wp_relative_upload_path( ${1:\\$path:string} )",
        "description": "Return relative path to an uploaded file."
    },
    "Function: _wp_remove_unregistered_widgets": {
        "prefix": "_wp_remove_unregistered_widgets",
        "body": "_wp_remove_unregistered_widgets( ${1:\\$sidebars_widgets:array}, ${2:\\$whitelist:array} )",
        "description": "Compares a list of sidebars with their widgets against a whitelist."
    },
    "Function: _wp_sidebars_changed": {
        "prefix": "_wp_sidebars_changed",
        "body": "_wp_sidebars_changed(  )",
        "description": "Handle sidebars config after theme change"
    },
    "Function: _wp_specialchars": {
        "prefix": "_wp_specialchars",
        "body": "_wp_specialchars( ${1:\\$string:string}, ${2:\\$quote_style:integer|string}, ${3:\\$charset:string}, ${4:\\$double_encode:boolean} )",
        "description": "Converts a number of special characters into their HTML entities."
    },
    "Function: _wp_timezone_choice_usort_callback": {
        "prefix": "_wp_timezone_choice_usort_callback",
        "body": "_wp_timezone_choice_usort_callback( ${1:\\$a:array}, ${2:\\$b:array} )",
        "description": "Sort-helper for timezones."
    },
    "Function: _wp_translate_postdata": {
        "prefix": "_wp_translate_postdata",
        "body": "_wp_translate_postdata( ${1:\\$update:boolean}, ${2:\\$post_data:array|null} )",
        "description": "Rename $_POST data from form names to DB post columns."
    },
    "Function: _wp_upgrade_revisions_of_post": {
        "prefix": "_wp_upgrade_revisions_of_post",
        "body": "_wp_upgrade_revisions_of_post( ${1:\\$post:WP_Post}, ${2:\\$revisions:array} )",
        "description": "Upgrade the revisions author, add the current post as a revision and set the revisions version to 1"
    },
    "Function: _wp_upload_dir": {
        "prefix": "_wp_upload_dir",
        "body": "_wp_upload_dir( ${1:\\$time:string|null} )",
        "description": "A non-filtered, non-cached version of wp_upload_dir() that doesn&#039;t check the path."
    },
    "Function: _wptexturize_pushpop_element": {
        "prefix": "_wptexturize_pushpop_element",
        "body": "_wptexturize_pushpop_element( ${1:\\$text:string}, ${2:\\$stack:array}, ${3:\\$disabled_elements:array} )",
        "description": "Search for disabled element tags. Push element to stack on tag open and pop on tag close."
    },
    "Function: _x": {
        "prefix": "_x",
        "body": "_x( ${1:\\$text:string}, ${2:\\$context:string}, ${3:\\$domain:string} )",
        "description": "Retrieve translated string with gettext context."
    },
    "Function: _xmlrpc_wp_die_handler": {
        "prefix": "_xmlrpc_wp_die_handler",
        "body": "_xmlrpc_wp_die_handler( ${1:\\$message:string}, ${2:\\$title:string}, ${3:\\$args:string|array} )",
        "description": "Kill WordPress execution and display XML message with error message."
    },
    "Function: absint": {
        "prefix": "absint",
        "body": "absint( ${1:\\$maybeint:mixed} )",
        "description": "Convert a value to non-negative integer."
    },
    "Function: activate_plugin": {
        "prefix": "activate_plugin",
        "body": "activate_plugin( ${1:\\$plugin:string}, ${2:\\$redirect:string}, ${3:\\$network_wide:boolean}, ${4:\\$silent:boolean} )",
        "description": "Attempts activation of plugin in a &quot;sandbox&quot; and redirects on success."
    },
    "Function: activate_plugins": {
        "prefix": "activate_plugins",
        "body": "activate_plugins( ${1:\\$plugins:string|array}, ${2:\\$redirect:string}, ${3:\\$network_wide:boolean}, ${4:\\$silent:boolean} )",
        "description": "Activate multiple plugins."
    },
    "Function: activate_sitewide_plugin": {
        "prefix": "activate_sitewide_plugin",
        "body": "activate_sitewide_plugin(  )",
        "description": "Deprecated functionality for activating a network-only plugin."
    },
    "Function: add_action": {
        "prefix": "add_action",
        "body": "add_action( ${1:\\$tag:string}, ${2:\\$function_to_add:callable}, ${3:\\$priority:integer}, ${4:\\$accepted_args:integer} )",
        "description": "Hooks a function on to a specific action."
    },
    "Function: add_blog_option": {
        "prefix": "add_blog_option",
        "body": "add_blog_option( ${1:\\$id:integer}, ${2:\\$option:string}, ${3:\\$value:mixed} )",
        "description": "Add a new option for a given blog id."
    },
    "Function: add_clean_index": {
        "prefix": "add_clean_index",
        "body": "add_clean_index( ${1:\\$table:string}, ${2:\\$index:string} )",
        "description": "Adds an index to a specified table."
    },
    "Function: add_comment_meta": {
        "prefix": "add_comment_meta",
        "body": "add_comment_meta( ${1:\\$comment_id:integer}, ${2:\\$meta_key:string}, ${3:\\$meta_value:mixed}, ${4:\\$unique:boolean} )",
        "description": "Add meta data field to a comment."
    },
    "Function: add_comments_page": {
        "prefix": "add_comments_page",
        "body": "add_comments_page( ${1:\\$page_title:string}, ${2:\\$menu_title:string}, ${3:\\$capability:string}, ${4:\\$menu_slug:string}, ${5:\\$function:callable} )",
        "description": "Add submenu page to the Comments main menu."
    },
    "Function: add_contextual_help": {
        "prefix": "add_contextual_help",
        "body": "add_contextual_help( ${1:\\$screen:string}, ${2:\\$help:string} )",
        "description": "Add contextual help text for a page."
    },
    "Function: add_cssclass": {
        "prefix": "add_cssclass",
        "body": "add_cssclass( ${1:\\$add:string}, ${2:\\$class:string} )",
        "description": ""
    },
    "Function: add_custom_background": {
        "prefix": "add_custom_background",
        "body": "add_custom_background( ${1:\\$wp_head_callback:callable}, ${2:\\$admin_head_callback:callable}, ${3:\\$admin_preview_callback:callable} )",
        "description": "Add callbacks for background image display."
    },
    "Function: add_custom_image_header": {
        "prefix": "add_custom_image_header",
        "body": "add_custom_image_header( ${1:\\$wp_head_callback:callable}, ${2:\\$admin_head_callback:callable}, ${3:\\$admin_preview_callback:callable} )",
        "description": "Add callbacks for image header display."
    },
    "Function: add_dashboard_page": {
        "prefix": "add_dashboard_page",
        "body": "add_dashboard_page( ${1:\\$page_title:string}, ${2:\\$menu_title:string}, ${3:\\$capability:string}, ${4:\\$menu_slug:string}, ${5:\\$function:callable} )",
        "description": "Add submenu page to the Dashboard main menu."
    },
    "Function: add_editor_style": {
        "prefix": "add_editor_style",
        "body": "add_editor_style( ${1:\\$stylesheet:array|string} )",
        "description": "Add callback for custom TinyMCE editor stylesheets."
    },
    "Function: add_existing_user_to_blog": {
        "prefix": "add_existing_user_to_blog",
        "body": "add_existing_user_to_blog( ${1:\\$details:array} )",
        "description": "Add a user to a blog based on details from maybe_add_existing_user_to_blog()."
    },
    "Function: add_feed": {
        "prefix": "add_feed",
        "body": "add_feed( ${1:\\$feedname:string}, ${2:\\$function:callable} )",
        "description": "Add a new feed type like /atom1/."
    },
    "Function: add_filter": {
        "prefix": "add_filter",
        "body": "add_filter( ${1:\\$tag:string}, ${2:\\$function_to_add:callable}, ${3:\\$priority:integer}, ${4:\\$accepted_args:integer} )",
        "description": "Hook a function or method to a specific filter action."
    },
    "Function: add_image_size": {
        "prefix": "add_image_size",
        "body": "add_image_size( ${1:\\$name:string}, ${2:\\$width:integer}, ${3:\\$height:integer}, ${4:\\$crop:boolean|array} )",
        "description": "Register a new image size."
    },
    "Function: add_link": {
        "prefix": "add_link",
        "body": "add_link(  )",
        "description": "Add a link to using values provided in $_POST."
    },
    "Function: add_links_page": {
        "prefix": "add_links_page",
        "body": "add_links_page( ${1:\\$page_title:string}, ${2:\\$menu_title:string}, ${3:\\$capability:string}, ${4:\\$menu_slug:string}, ${5:\\$function:callable} )",
        "description": "Add submenu page to the Links main menu."
    },
    "Function: add_magic_quotes": {
        "prefix": "add_magic_quotes",
        "body": "add_magic_quotes( ${1:\\$array:array} )",
        "description": "Walks the array while sanitizing the contents."
    },
    "Function: add_management_page": {
        "prefix": "add_management_page",
        "body": "add_management_page( ${1:\\$page_title:string}, ${2:\\$menu_title:string}, ${3:\\$capability:string}, ${4:\\$menu_slug:string}, ${5:\\$function:callable} )",
        "description": "Add submenu page to the Tools main menu."
    },
    "Function: add_media_page": {
        "prefix": "add_media_page",
        "body": "add_media_page( ${1:\\$page_title:string}, ${2:\\$menu_title:string}, ${3:\\$capability:string}, ${4:\\$menu_slug:string}, ${5:\\$function:callable} )",
        "description": "Add submenu page to the Media main menu."
    },
    "Function: add_menu_classes": {
        "prefix": "add_menu_classes",
        "body": "add_menu_classes( ${1:\\$menu:array} )",
        "description": ""
    },
    "Function: add_menu_page": {
        "prefix": "add_menu_page",
        "body": "add_menu_page( ${1:\\$page_title:string}, ${2:\\$menu_title:string}, ${3:\\$capability:string}, ${4:\\$menu_slug:string}, ${5:\\$function:callable}, ${6:\\$icon_url:string}, ${7:\\$position:integer|null} )",
        "description": "Add a top-level menu page."
    },
    "Function: add_meta": {
        "prefix": "add_meta",
        "body": "add_meta( ${1:\\$post_ID:integer} )",
        "description": "Add post meta data defined in $_POST superglobal for post with given ID."
    },
    "Function: add_meta_box": {
        "prefix": "add_meta_box",
        "body": "add_meta_box( ${1:\\$id:string}, ${2:\\$title:string}, ${3:\\$callback:callable}, ${4:\\$screen:string|array|WP_Screen|null}, ${5:\\$context:string}, ${6:\\$priority:string}, ${7:\\$callback_args:array|null} )",
        "description": "Adds a meta box to one or more screens."
    },
    "Function: add_metadata": {
        "prefix": "add_metadata",
        "body": "add_metadata( ${1:\\$meta_type:string}, ${2:\\$object_id:integer}, ${3:\\$meta_key:string}, ${4:\\$meta_value:mixed}, ${5:\\$unique:boolean} )",
        "description": "Add metadata for the specified object."
    },
    "Function: add_network_option": {
        "prefix": "add_network_option",
        "body": "add_network_option( ${1:\\$network_id:integer}, ${2:\\$option:string}, ${3:\\$value:mixed} )",
        "description": "Add a new network option."
    },
    "Function: add_new_user_to_blog": {
        "prefix": "add_new_user_to_blog",
        "body": "add_new_user_to_blog( ${1:\\$user_id:integer}, ${2:\\$password:mixed}, ${3:\\$meta:array} )",
        "description": "Adds a newly created user to the appropriate blog"
    },
    "Function: add_object_page": {
        "prefix": "add_object_page",
        "body": "add_object_page( ${1:\\$page_title:string}, ${2:\\$menu_title:string}, ${3:\\$capability:string}, ${4:\\$menu_slug:string}, ${5:\\$function:callable}, ${6:\\$icon_url:string} )",
        "description": "Add a top-level menu page in the &#039;objects&#039; section."
    },
    "Function: add_option": {
        "prefix": "add_option",
        "body": "add_option( ${1:\\$option:string}, ${2:\\$value:mixed}, ${3:\\$deprecated:string}, ${4:\\$autoload:string|boolean} )",
        "description": "Add a new option."
    },
    "Function: add_option_update_handler": {
        "prefix": "add_option_update_handler",
        "body": "add_option_update_handler( ${1:\\$option_group:string}, ${2:\\$option_name:string}, ${3:\\$sanitize_callback:callable} )",
        "description": "Register a setting and its sanitization callback"
    },
    "Function: add_option_whitelist": {
        "prefix": "add_option_whitelist",
        "body": "add_option_whitelist( ${1:\\$new_options:array}, ${2:\\$options:string|array} )",
        "description": "Adds an array of options to the options whitelist."
    },
    "Function: add_options_page": {
        "prefix": "add_options_page",
        "body": "add_options_page( ${1:\\$page_title:string}, ${2:\\$menu_title:string}, ${3:\\$capability:string}, ${4:\\$menu_slug:string}, ${5:\\$function:callable} )",
        "description": "Add submenu page to the Settings main menu."
    },
    "Function: add_pages_page": {
        "prefix": "add_pages_page",
        "body": "add_pages_page( ${1:\\$page_title:string}, ${2:\\$menu_title:string}, ${3:\\$capability:string}, ${4:\\$menu_slug:string}, ${5:\\$function:callable} )",
        "description": "Add submenu page to the Pages main menu."
    },
    "Function: add_permastruct": {
        "prefix": "add_permastruct",
        "body": "add_permastruct( ${1:\\$name:string}, ${2:\\$struct:string}, ${3:\\$args:array} )",
        "description": "Add permalink structure."
    },
    "Function: add_ping": {
        "prefix": "add_ping",
        "body": "add_ping( ${1:\\$post_id:integer|WP_Post}, ${2:\\$uri:string|array} )",
        "description": "Add a URL to those already pinged."
    },
    "Function: add_plugins_page": {
        "prefix": "add_plugins_page",
        "body": "add_plugins_page( ${1:\\$page_title:string}, ${2:\\$menu_title:string}, ${3:\\$capability:string}, ${4:\\$menu_slug:string}, ${5:\\$function:callable} )",
        "description": "Add submenu page to the Plugins main menu."
    },
    "Function: add_post_meta": {
        "prefix": "add_post_meta",
        "body": "add_post_meta( ${1:\\$post_id:integer}, ${2:\\$meta_key:string}, ${3:\\$meta_value:mixed}, ${4:\\$unique:boolean} )",
        "description": "Add meta data field to a post."
    },
    "Function: add_post_type_support": {
        "prefix": "add_post_type_support",
        "body": "add_post_type_support( ${1:\\$post_type:string}, ${2:\\$feature:string|array} )",
        "description": "Register support of certain features for a post type."
    },
    "Function: add_posts_page": {
        "prefix": "add_posts_page",
        "body": "add_posts_page( ${1:\\$page_title:string}, ${2:\\$menu_title:string}, ${3:\\$capability:string}, ${4:\\$menu_slug:string}, ${5:\\$function:callable} )",
        "description": "Add submenu page to the Posts main menu."
    },
    "Function: add_query_arg": {
        "prefix": "add_query_arg",
        "body": "add_query_arg(  )",
        "description": "Retrieves a modified URL query string."
    },
    "Function: add_rewrite_endpoint": {
        "prefix": "add_rewrite_endpoint",
        "body": "add_rewrite_endpoint( ${1:\\$name:string}, ${2:\\$places:integer}, ${3:\\$query_var:string|boolean} )",
        "description": "Add an endpoint, like /trackback/."
    },
    "Function: add_rewrite_rule": {
        "prefix": "add_rewrite_rule",
        "body": "add_rewrite_rule( ${1:\\$regex:string}, ${2:\\$query:string|array}, ${3:\\$after:string} )",
        "description": "Adds a rewrite rule that transforms a URL structure to a set of query vars."
    },
    "Function: add_rewrite_tag": {
        "prefix": "add_rewrite_tag",
        "body": "add_rewrite_tag( ${1:\\$tag:string}, ${2:\\$regex:string}, ${3:\\$query:string} )",
        "description": "Add a new rewrite tag (like %postname%)."
    },
    "Function: add_role": {
        "prefix": "add_role",
        "body": "add_role( ${1:\\$role:string}, ${2:\\$display_name:string}, ${3:\\$capabilities:array} )",
        "description": "Add role, if it does not exist."
    },
    "Function: add_screen_option": {
        "prefix": "add_screen_option",
        "body": "add_screen_option( ${1:\\$option:string}, ${2:\\$args:mixed} )",
        "description": "Register and configure an admin screen option"
    },
    "Function: add_settings_error": {
        "prefix": "add_settings_error",
        "body": "add_settings_error( ${1:\\$setting:string}, ${2:\\$code:string}, ${3:\\$message:string}, ${4:\\$type:string} )",
        "description": "Register a settings error to be displayed to the user"
    },
    "Function: add_settings_field": {
        "prefix": "add_settings_field",
        "body": "add_settings_field( ${1:\\$id:string}, ${2:\\$title:string}, ${3:\\$callback:callable}, ${4:\\$page:string}, ${5:\\$section:string}, ${6:\\$args:array} )",
        "description": "Add a new field to a section of a settings page"
    },
    "Function: add_settings_section": {
        "prefix": "add_settings_section",
        "body": "add_settings_section( ${1:\\$id:string}, ${2:\\$title:string}, ${3:\\$callback:callable}, ${4:\\$page:string} )",
        "description": "Add a new section to a settings page."
    },
    "Function: add_shortcode": {
        "prefix": "add_shortcode",
        "body": "add_shortcode( ${1:\\$tag:string}, ${2:\\$callback:callable} )",
        "description": "Adds a new shortcode."
    },
    "Function: add_site_option": {
        "prefix": "add_site_option",
        "body": "add_site_option( ${1:\\$option:string}, ${2:\\$value:mixed} )",
        "description": "Add a new option for the current network."
    },
    "Function: add_submenu_page": {
        "prefix": "add_submenu_page",
        "body": "add_submenu_page( ${1:\\$parent_slug:string}, ${2:\\$page_title:string}, ${3:\\$menu_title:string}, ${4:\\$capability:string}, ${5:\\$menu_slug:string}, ${6:\\$function:callable} )",
        "description": "Add a submenu page."
    },
    "Function: add_term_meta": {
        "prefix": "add_term_meta",
        "body": "add_term_meta( ${1:\\$term_id:integer}, ${2:\\$meta_key:string}, ${3:\\$meta_value:mixed}, ${4:\\$unique:boolean} )",
        "description": "Adds metadata to a term."
    },
    "Function: add_theme_page": {
        "prefix": "add_theme_page",
        "body": "add_theme_page( ${1:\\$page_title:string}, ${2:\\$menu_title:string}, ${3:\\$capability:string}, ${4:\\$menu_slug:string}, ${5:\\$function:callable} )",
        "description": "Add submenu page to the Appearance main menu."
    },
    "Function: add_theme_support": {
        "prefix": "add_theme_support",
        "body": "add_theme_support( ${1:\\$feature:string} )",
        "description": "Registers theme support for a given feature."
    },
    "Function: add_thickbox": {
        "prefix": "add_thickbox",
        "body": "add_thickbox(  )",
        "description": "Enqueues the default ThickBox js and css."
    },
    "Function: add_user": {
        "prefix": "add_user",
        "body": "add_user(  )",
        "description": "Creates a new user from the &quot;Users&quot; form using $_POST information."
    },
    "Function: add_user_meta": {
        "prefix": "add_user_meta",
        "body": "add_user_meta( ${1:\\$user_id:integer}, ${2:\\$meta_key:string}, ${3:\\$meta_value:mixed}, ${4:\\$unique:boolean} )",
        "description": "Adds meta data to a user."
    },
    "Function: add_user_to_blog": {
        "prefix": "add_user_to_blog",
        "body": "add_user_to_blog( ${1:\\$blog_id:integer}, ${2:\\$user_id:integer}, ${3:\\$role:string} )",
        "description": "Adds a user to a blog."
    },
    "Function: add_users_page": {
        "prefix": "add_users_page",
        "body": "add_users_page( ${1:\\$page_title:string}, ${2:\\$menu_title:string}, ${3:\\$capability:string}, ${4:\\$menu_slug:string}, ${5:\\$function:callable} )",
        "description": "Add submenu page to the Users/Profile main menu."
    },
    "Function: add_utility_page": {
        "prefix": "add_utility_page",
        "body": "add_utility_page( ${1:\\$page_title:string}, ${2:\\$menu_title:string}, ${3:\\$capability:string}, ${4:\\$menu_slug:string}, ${5:\\$function:callable}, ${6:\\$icon_url:string} )",
        "description": "Add a top-level menu page in the &#039;utility&#039; section."
    },
    "Function: addslashes_gpc": {
        "prefix": "addslashes_gpc",
        "body": "addslashes_gpc( ${1:\\$gpc:string} )",
        "description": "Adds slashes to escape strings."
    },
    "Function: adjacent_image_link": {
        "prefix": "adjacent_image_link",
        "body": "adjacent_image_link( ${1:\\$prev:boolean}, ${2:\\$size:string|array}, ${3:\\$text:boolean} )",
        "description": "Displays next or previous image link that has the same post parent."
    },
    "Function: adjacent_post_link": {
        "prefix": "adjacent_post_link",
        "body": "adjacent_post_link( ${1:\\$format:string}, ${2:\\$link:string}, ${3:\\$in_same_term:boolean}, ${4:\\$excluded_terms:array|string}, ${5:\\$previous:boolean}, ${6:\\$taxonomy:string} )",
        "description": "Displays the adjacent post link."
    },
    "Function: adjacent_posts_rel_link": {
        "prefix": "adjacent_posts_rel_link",
        "body": "adjacent_posts_rel_link( ${1:\\$title:string}, ${2:\\$in_same_term:boolean}, ${3:\\$excluded_terms:array|string}, ${4:\\$taxonomy:string} )",
        "description": "Displays the relational links for the posts adjacent to the current post."
    },
    "Function: adjacent_posts_rel_link_wp_head": {
        "prefix": "adjacent_posts_rel_link_wp_head",
        "body": "adjacent_posts_rel_link_wp_head(  )",
        "description": "Displays relational links for the posts adjacent to the current post for single post pages."
    },
    "Function: admin_color_scheme_picker": {
        "prefix": "admin_color_scheme_picker",
        "body": "admin_color_scheme_picker( ${1:\\$user_id:integer} )",
        "description": "Display the default admin color scheme picker (Used in user-edit.php)"
    },
    "Function: admin_created_user_email": {
        "prefix": "admin_created_user_email",
        "body": "admin_created_user_email( ${1:\\$text:string} )",
        "description": ""
    },
    "Function: admin_url": {
        "prefix": "admin_url",
        "body": "admin_url( ${1:\\$path:string}, ${2:\\$scheme:string} )",
        "description": "Retrieves the URL to the admin area for the current site."
    },
    "Function: akismet_add_comment_author_url": {
        "prefix": "akismet_add_comment_author_url",
        "body": "akismet_add_comment_author_url(  )",
        "description": ""
    },
    "Function: akismet_add_comment_nonce": {
        "prefix": "akismet_add_comment_nonce",
        "body": "akismet_add_comment_nonce( ${1:\\$post_id:} )",
        "description": ""
    },
    "Function: akismet_admin_init": {
        "prefix": "akismet_admin_init",
        "body": "akismet_admin_init(  )",
        "description": ""
    },
    "Function: akismet_admin_menu": {
        "prefix": "akismet_admin_menu",
        "body": "akismet_admin_menu(  )",
        "description": ""
    },
    "Function: akismet_admin_warnings": {
        "prefix": "akismet_admin_warnings",
        "body": "akismet_admin_warnings(  )",
        "description": ""
    },
    "Function: akismet_auto_check_comment": {
        "prefix": "akismet_auto_check_comment",
        "body": "akismet_auto_check_comment( ${1:\\$commentdata:} )",
        "description": ""
    },
    "Function: akismet_auto_check_update_meta": {
        "prefix": "akismet_auto_check_update_meta",
        "body": "akismet_auto_check_update_meta( ${1:\\$id:}, ${2:\\$comment:} )",
        "description": ""
    },
    "Function: akismet_caught": {
        "prefix": "akismet_caught",
        "body": "akismet_caught(  )",
        "description": ""
    },
    "Function: akismet_check_db_comment": {
        "prefix": "akismet_check_db_comment",
        "body": "akismet_check_db_comment( ${1:\\$id:}, ${2:\\$recheck_reason:} )",
        "description": ""
    },
    "Function: akismet_check_for_spam_button": {
        "prefix": "akismet_check_for_spam_button",
        "body": "akismet_check_for_spam_button( ${1:\\$comment_status:} )",
        "description": ""
    },
    "Function: akismet_check_key_status": {
        "prefix": "akismet_check_key_status",
        "body": "akismet_check_key_status( ${1:\\$key:}, ${2:\\$ip:|null} )",
        "description": ""
    },
    "Function: akismet_check_server_connectivity": {
        "prefix": "akismet_check_server_connectivity",
        "body": "akismet_check_server_connectivity(  )",
        "description": ""
    },
    "Function: akismet_cmp_time": {
        "prefix": "akismet_cmp_time",
        "body": "akismet_cmp_time( ${1:\\$a:}, ${2:\\$b:} )",
        "description": ""
    },
    "Function: akismet_comment_column_row": {
        "prefix": "akismet_comment_column_row",
        "body": "akismet_comment_column_row( ${1:\\$column:}, ${2:\\$comment_id:} )",
        "description": ""
    },
    "Function: akismet_comment_row_action": {
        "prefix": "akismet_comment_row_action",
        "body": "akismet_comment_row_action( ${1:\\$a:}, ${2:\\$comment:} )",
        "description": ""
    },
    "Function: akismet_comment_status_meta_box": {
        "prefix": "akismet_comment_status_meta_box",
        "body": "akismet_comment_status_meta_box( ${1:\\$comment:} )",
        "description": ""
    },
    "Function: akismet_comments_columns": {
        "prefix": "akismet_comments_columns",
        "body": "akismet_comments_columns( ${1:\\$columns:} )",
        "description": ""
    },
    "Function: akismet_conf": {
        "prefix": "akismet_conf",
        "body": "akismet_conf(  )",
        "description": ""
    },
    "Function: akismet_cron_recheck": {
        "prefix": "akismet_cron_recheck",
        "body": "akismet_cron_recheck(  )",
        "description": ""
    },
    "Function: akismet_delete_old": {
        "prefix": "akismet_delete_old",
        "body": "akismet_delete_old(  )",
        "description": ""
    },
    "Function: akismet_delete_old_metadata": {
        "prefix": "akismet_delete_old_metadata",
        "body": "akismet_delete_old_metadata(  )",
        "description": ""
    },
    "Function: akismet_fix_scheduled_recheck": {
        "prefix": "akismet_fix_scheduled_recheck",
        "body": "akismet_fix_scheduled_recheck(  )",
        "description": ""
    },
    "Function: akismet_get_comment_history": {
        "prefix": "akismet_get_comment_history",
        "body": "akismet_get_comment_history( ${1:\\$comment_id:} )",
        "description": ""
    },
    "Function: akismet_get_ip_address": {
        "prefix": "akismet_get_ip_address",
        "body": "akismet_get_ip_address(  )",
        "description": ""
    },
    "Function: akismet_get_key": {
        "prefix": "akismet_get_key",
        "body": "akismet_get_key(  )",
        "description": ""
    },
    "Function: akismet_get_server_connectivity": {
        "prefix": "akismet_get_server_connectivity",
        "body": "akismet_get_server_connectivity( ${1:\\$cache_timeout:} )",
        "description": ""
    },
    "Function: akismet_get_user_comments_approved": {
        "prefix": "akismet_get_user_comments_approved",
        "body": "akismet_get_user_comments_approved( ${1:\\$user_id:}, ${2:\\$comment_author_email:}, ${3:\\$comment_author:}, ${4:\\$comment_author_url:} )",
        "description": ""
    },
    "Function: akismet_get_user_roles": {
        "prefix": "akismet_get_user_roles",
        "body": "akismet_get_user_roles( ${1:\\$user_id:} )",
        "description": ""
    },
    "Function: akismet_http_post": {
        "prefix": "akismet_http_post",
        "body": "akismet_http_post( ${1:\\$request:}, ${2:\\$host:}, ${3:\\$path:}, ${4:\\$port:}, ${5:\\$ip:|null} )",
        "description": ""
    },
    "Function: akismet_init": {
        "prefix": "akismet_init",
        "body": "akismet_init(  )",
        "description": ""
    },
    "Function: akismet_kill_proxy_check": {
        "prefix": "akismet_kill_proxy_check",
        "body": "akismet_kill_proxy_check( ${1:\\$option:} )",
        "description": ""
    },
    "Function: akismet_load_js_and_css": {
        "prefix": "akismet_load_js_and_css",
        "body": "akismet_load_js_and_css(  )",
        "description": ""
    },
    "Function: akismet_load_menu": {
        "prefix": "akismet_load_menu",
        "body": "akismet_load_menu(  )",
        "description": ""
    },
    "Function: akismet_manage_page": {
        "prefix": "akismet_manage_page",
        "body": "akismet_manage_page(  )",
        "description": ""
    },
    "Function: akismet_microtime": {
        "prefix": "akismet_microtime",
        "body": "akismet_microtime(  )",
        "description": ""
    },
    "Function: akismet_nonce_field": {
        "prefix": "akismet_nonce_field",
        "body": "akismet_nonce_field( ${1:\\$action:} )",
        "description": ""
    },
    "Function: akismet_pingback_forwarded_for": {
        "prefix": "akismet_pingback_forwarded_for",
        "body": "akismet_pingback_forwarded_for( ${1:\\$r:}, ${2:\\$url:} )",
        "description": ""
    },
    "Function: akismet_plugin_action_links": {
        "prefix": "akismet_plugin_action_links",
        "body": "akismet_plugin_action_links( ${1:\\$links:}, ${2:\\$file:} )",
        "description": ""
    },
    "Function: akismet_pre_check_pingback": {
        "prefix": "akismet_pre_check_pingback",
        "body": "akismet_pre_check_pingback( ${1:\\$method:} )",
        "description": ""
    },
    "Function: akismet_recheck_queue": {
        "prefix": "akismet_recheck_queue",
        "body": "akismet_recheck_queue(  )",
        "description": ""
    },
    "Function: akismet_register_widgets": {
        "prefix": "akismet_register_widgets",
        "body": "akismet_register_widgets(  )",
        "description": ""
    },
    "Function: akismet_remove_comment_author_url": {
        "prefix": "akismet_remove_comment_author_url",
        "body": "akismet_remove_comment_author_url(  )",
        "description": ""
    },
    "Function: akismet_result_hold": {
        "prefix": "akismet_result_hold",
        "body": "akismet_result_hold( ${1:\\$approved:} )",
        "description": ""
    },
    "Function: akismet_result_spam": {
        "prefix": "akismet_result_spam",
        "body": "akismet_result_spam( ${1:\\$approved:} )",
        "description": ""
    },
    "Function: akismet_rightnow": {
        "prefix": "akismet_rightnow",
        "body": "akismet_rightnow(  )",
        "description": ""
    },
    "Function: akismet_server_connectivity_ok": {
        "prefix": "akismet_server_connectivity_ok",
        "body": "akismet_server_connectivity_ok(  )",
        "description": ""
    },
    "Function: akismet_spam_comments": {
        "prefix": "akismet_spam_comments",
        "body": "akismet_spam_comments(  )",
        "description": ""
    },
    "Function: akismet_spam_count": {
        "prefix": "akismet_spam_count",
        "body": "akismet_spam_count( ${1:\\$type:} )",
        "description": ""
    },
    "Function: akismet_spam_totals": {
        "prefix": "akismet_spam_totals",
        "body": "akismet_spam_totals(  )",
        "description": ""
    },
    "Function: akismet_stats": {
        "prefix": "akismet_stats",
        "body": "akismet_stats(  )",
        "description": ""
    },
    "Function: akismet_stats_display": {
        "prefix": "akismet_stats_display",
        "body": "akismet_stats_display(  )",
        "description": ""
    },
    "Function: akismet_submit_nonspam_comment": {
        "prefix": "akismet_submit_nonspam_comment",
        "body": "akismet_submit_nonspam_comment( ${1:\\$comment_id:} )",
        "description": ""
    },
    "Function: akismet_submit_spam_comment": {
        "prefix": "akismet_submit_spam_comment",
        "body": "akismet_submit_spam_comment( ${1:\\$comment_id:} )",
        "description": ""
    },
    "Function: akismet_test_mode": {
        "prefix": "akismet_test_mode",
        "body": "akismet_test_mode(  )",
        "description": ""
    },
    "Function: akismet_text_add_link_callback": {
        "prefix": "akismet_text_add_link_callback",
        "body": "akismet_text_add_link_callback( ${1:\\$m:} )",
        "description": ""
    },
    "Function: akismet_text_add_link_class": {
        "prefix": "akismet_text_add_link_class",
        "body": "akismet_text_add_link_class( ${1:\\$comment_text:} )",
        "description": ""
    },
    "Function: akismet_transition_comment_status": {
        "prefix": "akismet_transition_comment_status",
        "body": "akismet_transition_comment_status( ${1:\\$new_status:}, ${2:\\$old_status:}, ${3:\\$comment:} )",
        "description": ""
    },
    "Function: akismet_update_alert": {
        "prefix": "akismet_update_alert",
        "body": "akismet_update_alert( ${1:\\$response:} )",
        "description": ""
    },
    "Function: akismet_update_comment_history": {
        "prefix": "akismet_update_comment_history",
        "body": "akismet_update_comment_history( ${1:\\$comment_id:}, ${2:\\$message:}, ${3:\\$event:|null} )",
        "description": ""
    },
    "Function: akismet_verify_key": {
        "prefix": "akismet_verify_key",
        "body": "akismet_verify_key( ${1:\\$key:}, ${2:\\$ip:|null} )",
        "description": ""
    },
    "Function: akismet_version_warning": {
        "prefix": "akismet_version_warning",
        "body": "akismet_version_warning(  )",
        "description": ""
    },
    "Function: allow_subdirectory_install": {
        "prefix": "allow_subdirectory_install",
        "body": "allow_subdirectory_install(  )",
        "description": "Allow subdirectory installation."
    },
    "Function: allow_subdomain_install": {
        "prefix": "allow_subdomain_install",
        "body": "allow_subdomain_install(  )",
        "description": "Allow subdomain installation"
    },
    "Function: allowed_http_request_hosts": {
        "prefix": "allowed_http_request_hosts",
        "body": "allowed_http_request_hosts( ${1:\\$is_external:boolean}, ${2:\\$host:string} )",
        "description": "Whitelists allowed redirect hosts for safe HTTP requests as well."
    },
    "Function: allowed_tags": {
        "prefix": "allowed_tags",
        "body": "allowed_tags(  )",
        "description": "Display all of the allowed tags in HTML format with attributes."
    },
    "Function: antispambot": {
        "prefix": "antispambot",
        "body": "antispambot( ${1:\\$email_address:string}, ${2:\\$hex_encoding:integer} )",
        "description": "Converts email addresses characters to HTML entities to block spam bots."
    },
    "Function: apache_mod_loaded": {
        "prefix": "apache_mod_loaded",
        "body": "apache_mod_loaded( ${1:\\$mod:string}, ${2:\\$default:boolean} )",
        "description": "Does the specified module exist in the Apache config?"
    },
    "Function: apply_filters": {
        "prefix": "apply_filters",
        "body": "apply_filters( ${1:\\$tag:string}, ${2:\\$value:mixed} )",
        "description": "Call the functions added to a filter hook."
    },
    "Function: apply_filters_deprecated": {
        "prefix": "apply_filters_deprecated",
        "body": "apply_filters_deprecated( ${1:\\$tag:string}, ${2:\\$args:array}, ${3:\\$version:string}, ${4:\\$replacement:string}, ${5:\\$message:string|null} )",
        "description": "Fires functions attached to a deprecated filter hook."
    },
    "Function: apply_filters_ref_array": {
        "prefix": "apply_filters_ref_array",
        "body": "apply_filters_ref_array( ${1:\\$tag:string}, ${2:\\$args:array} )",
        "description": "Execute functions hooked on a specific filter hook, specifying arguments in an array."
    },
    "Function: array_replace_recursive": {
        "prefix": "array_replace_recursive",
        "body": "array_replace_recursive( ${1:\\$base:array}, ${2:\\$replacements:array} )",
        "description": "PHP-agnostic version of {@link array_replace_recursive()}."
    },
    "Function: atom_enclosure": {
        "prefix": "atom_enclosure",
        "body": "atom_enclosure(  )",
        "description": "Display the atom enclosure for the current post."
    },
    "Function: atom_site_icon": {
        "prefix": "atom_site_icon",
        "body": "atom_site_icon(  )",
        "description": "Displays Site Icon in atom feeds."
    },
    "Function: attachment_id3_data_meta_box": {
        "prefix": "attachment_id3_data_meta_box",
        "body": "attachment_id3_data_meta_box( ${1:\\$post:WP_Post} )",
        "description": "Display fields for ID3 data"
    },
    "Function: attachment_submit_meta_box": {
        "prefix": "attachment_submit_meta_box",
        "body": "attachment_submit_meta_box( ${1:\\$post:object} )",
        "description": "Display attachment submit form fields."
    },
    "Function: attachment_submitbox_metadata": {
        "prefix": "attachment_submitbox_metadata",
        "body": "attachment_submitbox_metadata(  )",
        "description": "Displays non-editable attachment metadata in the publish meta box."
    },
    "Function: attachment_url_to_postid": {
        "prefix": "attachment_url_to_postid",
        "body": "attachment_url_to_postid( ${1:\\$url:string} )",
        "description": "Tries to convert an attachment URL into a post ID."
    },
    "Function: attribute_escape": {
        "prefix": "attribute_escape",
        "body": "attribute_escape( ${1:\\$text:string} )",
        "description": "Escaping for HTML attributes."
    },
    "Function: auth_redirect": {
        "prefix": "auth_redirect",
        "body": "auth_redirect(  )",
        "description": "Checks if a user is logged in, if not it redirects them to the login page."
    },
    "Function: author_can": {
        "prefix": "author_can",
        "body": "author_can( ${1:\\$post:integer|WP_Post}, ${2:\\$capability:string} )",
        "description": "Whether the author of the supplied post has a specific capability."
    },
    "Function: automatic_feed_links": {
        "prefix": "automatic_feed_links",
        "body": "automatic_feed_links( ${1:\\$add:boolean} )",
        "description": "Enable/disable automatic general feed link outputting."
    },
    "Function: avoid_blog_page_permalink_collision": {
        "prefix": "avoid_blog_page_permalink_collision",
        "body": "avoid_blog_page_permalink_collision( ${1:\\$data:array}, ${2:\\$postarr:array} )",
        "description": "Avoids a collision between a site slug and a permalink slug."
    },
    "Function: background_color": {
        "prefix": "background_color",
        "body": "background_color(  )",
        "description": "Display background color value."
    },
    "Function: background_image": {
        "prefix": "background_image",
        "body": "background_image(  )",
        "description": "Display background image path."
    },
    "Function: backslashit": {
        "prefix": "backslashit",
        "body": "backslashit( ${1:\\$string:string} )",
        "description": "Adds backslashes before letters and before a number at the start of a string."
    },
    "Function: balanceTags": {
        "prefix": "balanceTags",
        "body": "balanceTags( ${1:\\$text:string}, ${2:\\$force:boolean} )",
        "description": "Balances tags if forced to, or if the &#039;use_balanceTags&#039; option is set to true."
    },
    "Function: before_last_bar": {
        "prefix": "before_last_bar",
        "body": "before_last_bar( ${1:\\$string:string} )",
        "description": "Remove last item on a pipe-delimited string."
    },
    "Function: bloginfo": {
        "prefix": "bloginfo",
        "body": "bloginfo( ${1:\\$show:string} )",
        "description": "Displays information about the current site."
    },
    "Function: bloginfo_rss": {
        "prefix": "bloginfo_rss",
        "body": "bloginfo_rss( ${1:\\$show:string} )",
        "description": "Display RSS container for the bloginfo function."
    },
    "Function: body_class": {
        "prefix": "body_class",
        "body": "body_class( ${1:\\$class:string|array} )",
        "description": "Display the classes for the body element."
    },
    "Function: bool_from_yn": {
        "prefix": "bool_from_yn",
        "body": "bool_from_yn( ${1:\\$yn:string} )",
        "description": "Whether input is yes or no."
    },
    "Function: build_query": {
        "prefix": "build_query",
        "body": "build_query( ${1:\\$data:array} )",
        "description": "Build URL query based on an associative and, or indexed array."
    },
    "Function: bulk_edit_posts": {
        "prefix": "bulk_edit_posts",
        "body": "bulk_edit_posts( ${1:\\$post_data:array|null} )",
        "description": "Process the post data for the bulk editing of posts."
    },
    "Function: cache_javascript_headers": {
        "prefix": "cache_javascript_headers",
        "body": "cache_javascript_headers(  )",
        "description": "Set the headers for caching for 10 days with JavaScript content type."
    },
    "Function: cache_users": {
        "prefix": "cache_users",
        "body": "cache_users( ${1:\\$user_ids:array} )",
        "description": "Retrieve info for user lists to prevent multiple queries by get_userdata()"
    },
    "Function: calendar_week_mod": {
        "prefix": "calendar_week_mod",
        "body": "calendar_week_mod( ${1:\\$num:integer} )",
        "description": "Get number of days since the start of the week."
    },
    "Function: can_edit_network": {
        "prefix": "can_edit_network",
        "body": "can_edit_network( ${1:\\$network_id:integer} )",
        "description": "Whether or not we can edit this network from this page."
    },
    "Function: cancel_comment_reply_link": {
        "prefix": "cancel_comment_reply_link",
        "body": "cancel_comment_reply_link( ${1:\\$text:string} )",
        "description": "Display HTML content for cancel comment reply link."
    },
    "Function: capital_P_dangit": {
        "prefix": "capital_P_dangit",
        "body": "capital_P_dangit( ${1:\\$text:string} )",
        "description": "Forever eliminate &quot;Wordpress&quot; from the planet (or at least the little bit we can influence)."
    },
    "Function: cat_is_ancestor_of": {
        "prefix": "cat_is_ancestor_of",
        "body": "cat_is_ancestor_of( ${1:\\$cat1:integer|object}, ${2:\\$cat2:integer|object} )",
        "description": "Check if a category is an ancestor of another category."
    },
    "Function: category_description": {
        "prefix": "category_description",
        "body": "category_description( ${1:\\$category:integer} )",
        "description": "Retrieve category description."
    },
    "Function: category_exists": {
        "prefix": "category_exists",
        "body": "category_exists( ${1:\\$cat_name:integer|string}, ${2:\\$parent:integer|null} )",
        "description": "Check whether a category exists."
    },
    "Function: check_admin_referer": {
        "prefix": "check_admin_referer",
        "body": "check_admin_referer( ${1:\\$action:integer|string}, ${2:\\$query_arg:string} )",
        "description": "Makes sure that a user was referred from another admin page."
    },
    "Function: check_ajax_referer": {
        "prefix": "check_ajax_referer",
        "body": "check_ajax_referer( ${1:\\$action:integer|string}, ${2:\\$query_arg:false|string}, ${3:\\$die:boolean} )",
        "description": "Verifies the Ajax request to prevent processing requests external of the blog."
    },
    "Function: check_and_publish_future_post": {
        "prefix": "check_and_publish_future_post",
        "body": "check_and_publish_future_post( ${1:\\$post_id:integer|WP_Post} )",
        "description": "Publish future post and make sure post ID has future post status."
    },
    "Function: check_column": {
        "prefix": "check_column",
        "body": "check_column( ${1:\\$table_name:string}, ${2:\\$col_name:string}, ${3:\\$col_type:string}, ${4:\\$is_null:boolean|null}, ${5:\\$key:mixed|null}, ${6:\\$default:mixed|null}, ${7:\\$extra:mixed|null} )",
        "description": "Check column matches criteria."
    },
    "Function: check_comment": {
        "prefix": "check_comment",
        "body": "check_comment( ${1:\\$author:string}, ${2:\\$email:string}, ${3:\\$url:string}, ${4:\\$comment:string}, ${5:\\$user_ip:string}, ${6:\\$user_agent:string}, ${7:\\$comment_type:string} )",
        "description": "Check whether a comment passes internal checks to be allowed to add."
    },
    "Function: check_comment_flood_db": {
        "prefix": "check_comment_flood_db",
        "body": "check_comment_flood_db(  )",
        "description": "Hooks WP&#039;s native database-based comment-flood check."
    },
    "Function: check_import_new_users": {
        "prefix": "check_import_new_users",
        "body": "check_import_new_users( ${1:\\$permission:string} )",
        "description": "Checks if the current user has permissions to import new users."
    },
    "Function: check_password_reset_key": {
        "prefix": "check_password_reset_key",
        "body": "check_password_reset_key( ${1:\\$key:string}, ${2:\\$login:string} )",
        "description": "Retrieves a user row based on password reset key and login"
    },
    "Function: check_theme_switched": {
        "prefix": "check_theme_switched",
        "body": "check_theme_switched(  )",
        "description": "Checks if a theme has been changed and runs &#039;after_switch_theme&#039; hook on the next WP load."
    },
    "Function: check_upload_mimes": {
        "prefix": "check_upload_mimes",
        "body": "check_upload_mimes( ${1:\\$mimes:array} )",
        "description": "Check an array of MIME types against a whitelist."
    },
    "Function: check_upload_size": {
        "prefix": "check_upload_size",
        "body": "check_upload_size( ${1:\\$file:array} )",
        "description": "Determine if uploaded file exceeds space quota."
    },
    "Function: checked": {
        "prefix": "checked",
        "body": "checked( ${1:\\$checked:mixed}, ${2:\\$current:mixed}, ${3:\\$echo:boolean} )",
        "description": "Outputs the html checked attribute."
    },
    "Function: choose_primary_blog": {
        "prefix": "choose_primary_blog",
        "body": "choose_primary_blog(  )",
        "description": "Handles the display of choosing a user&#039;s primary site."
    },
    "Function: clean_attachment_cache": {
        "prefix": "clean_attachment_cache",
        "body": "clean_attachment_cache( ${1:\\$id:integer}, ${2:\\$clean_terms:boolean} )",
        "description": "Will clean the attachment in the cache."
    },
    "Function: clean_blog_cache": {
        "prefix": "clean_blog_cache",
        "body": "clean_blog_cache( ${1:\\$blog:WP_Site|integer} )",
        "description": "Clean the blog cache"
    },
    "Function: clean_bookmark_cache": {
        "prefix": "clean_bookmark_cache",
        "body": "clean_bookmark_cache( ${1:\\$bookmark_id:integer} )",
        "description": "Deletes the bookmark cache."
    },
    "Function: clean_category_cache": {
        "prefix": "clean_category_cache",
        "body": "clean_category_cache( ${1:\\$id:integer} )",
        "description": "Remove the category cache data based on ID."
    },
    "Function: clean_comment_cache": {
        "prefix": "clean_comment_cache",
        "body": "clean_comment_cache( ${1:\\$ids:integer|array} )",
        "description": "Removes a comment from the object cache."
    },
    "Function: clean_network_cache": {
        "prefix": "clean_network_cache",
        "body": "clean_network_cache( ${1:\\$ids:integer|array} )",
        "description": "Removes a network from the object cache."
    },
    "Function: clean_object_term_cache": {
        "prefix": "clean_object_term_cache",
        "body": "clean_object_term_cache( ${1:\\$object_ids:integer|array}, ${2:\\$object_type:array|string} )",
        "description": "Removes the taxonomy relationship to terms from the cache."
    },
    "Function: clean_page_cache": {
        "prefix": "clean_page_cache",
        "body": "clean_page_cache( ${1:\\$id:integer} )",
        "description": "Will clean the page in the cache."
    },
    "Function: clean_post_cache": {
        "prefix": "clean_post_cache",
        "body": "clean_post_cache( ${1:\\$post:integer|WP_Post} )",
        "description": "Will clean the post in the cache."
    },
    "Function: clean_pre": {
        "prefix": "clean_pre",
        "body": "clean_pre( ${1:\\$matches:array|string} )",
        "description": "Accepts matches array from preg_replace_callback in wpautop() or a string."
    },
    "Function: clean_site_details_cache": {
        "prefix": "clean_site_details_cache",
        "body": "clean_site_details_cache( ${1:\\$site_id:integer} )",
        "description": "Cleans the site details cache for a site."
    },
    "Function: clean_taxonomy_cache": {
        "prefix": "clean_taxonomy_cache",
        "body": "clean_taxonomy_cache( ${1:\\$taxonomy:string} )",
        "description": "Clean the caches for a taxonomy."
    },
    "Function: clean_term_cache": {
        "prefix": "clean_term_cache",
        "body": "clean_term_cache( ${1:\\$ids:integer|array}, ${2:\\$taxonomy:string}, ${3:\\$clean_taxonomy:boolean} )",
        "description": "Will remove all of the term ids from the cache."
    },
    "Function: clean_url": {
        "prefix": "clean_url",
        "body": "clean_url( ${1:\\$url:string}, ${2:\\$protocols:array|null}, ${3:\\$context:string} )",
        "description": "Checks and cleans a URL."
    },
    "Function: clean_user_cache": {
        "prefix": "clean_user_cache",
        "body": "clean_user_cache( ${1:\\$user:WP_User|integer} )",
        "description": "Clean all user caches"
    },
    "Function: clear_global_post_cache": {
        "prefix": "clear_global_post_cache",
        "body": "clear_global_post_cache( ${1:\\$post_id:integer} )",
        "description": "Deprecated functionality to clear the global post cache."
    },
    "Function: codepress_footer_js": {
        "prefix": "codepress_footer_js",
        "body": "codepress_footer_js(  )",
        "description": "Adds JavaScript required to make CodePress work on the theme/plugin editors."
    },
    "Function: codepress_get_lang": {
        "prefix": "codepress_get_lang",
        "body": "codepress_get_lang( ${1:\\$filename:string} )",
        "description": "Determines the language to use for CodePress syntax highlighting."
    },
    "Function: comment_author": {
        "prefix": "comment_author",
        "body": "comment_author( ${1:\\$comment_ID:integer|WP_Comment} )",
        "description": "Displays the author of the current comment."
    },
    "Function: comment_author_email": {
        "prefix": "comment_author_email",
        "body": "comment_author_email( ${1:\\$comment_ID:integer|WP_Comment} )",
        "description": "Display the email of the author of the current global $comment."
    },
    "Function: comment_author_email_link": {
        "prefix": "comment_author_email_link",
        "body": "comment_author_email_link( ${1:\\$linktext:string}, ${2:\\$before:string}, ${3:\\$after:string}, ${4:\\$comment:integer|WP_Comment|null} )",
        "description": "Display the html email link to the author of the current comment."
    },
    "Function: comment_author_IP": {
        "prefix": "comment_author_IP",
        "body": "comment_author_IP( ${1:\\$comment_ID:integer|WP_Comment} )",
        "description": "Display the IP address of the author of the current comment."
    },
    "Function: comment_author_link": {
        "prefix": "comment_author_link",
        "body": "comment_author_link( ${1:\\$comment_ID:integer|WP_Comment} )",
        "description": "Display the html link to the url of the author of the current comment."
    },
    "Function: comment_author_rss": {
        "prefix": "comment_author_rss",
        "body": "comment_author_rss(  )",
        "description": "Display the current comment author in the feed."
    },
    "Function: comment_author_url": {
        "prefix": "comment_author_url",
        "body": "comment_author_url( ${1:\\$comment_ID:integer|WP_Comment} )",
        "description": "Display the url of the author of the current comment."
    },
    "Function: comment_author_url_link": {
        "prefix": "comment_author_url_link",
        "body": "comment_author_url_link( ${1:\\$linktext:string}, ${2:\\$before:string}, ${3:\\$after:string}, ${4:\\$comment:integer|WP_Comment} )",
        "description": "Displays the HTML link of the url of the author of the current comment."
    },
    "Function: comment_class": {
        "prefix": "comment_class",
        "body": "comment_class( ${1:\\$class:string|array}, ${2:\\$comment:integer|WP_Comment|null}, ${3:\\$post_id:integer|WP_Post|null}, ${4:\\$echo:boolean} )",
        "description": "Generates semantic classes for each comment element."
    },
    "Function: comment_date": {
        "prefix": "comment_date",
        "body": "comment_date( ${1:\\$d:string}, ${2:\\$comment_ID:integer|WP_Comment} )",
        "description": "Display the comment date of the current comment."
    },
    "Function: comment_excerpt": {
        "prefix": "comment_excerpt",
        "body": "comment_excerpt( ${1:\\$comment_ID:integer|WP_Comment} )",
        "description": "Display the excerpt of the current comment."
    },
    "Function: comment_exists": {
        "prefix": "comment_exists",
        "body": "comment_exists( ${1:\\$comment_author:string}, ${2:\\$comment_date:string}, ${3:\\$timezone:string} )",
        "description": "Determine if a comment exists based on author and date."
    },
    "Function: comment_footer_die": {
        "prefix": "comment_footer_die",
        "body": "comment_footer_die( ${1:\\$msg:string} )",
        "description": "Display error message at bottom of comments."
    },
    "Function: comment_form": {
        "prefix": "comment_form",
        "body": "comment_form( ${1:\\$args:array}, ${2:\\$post_id:integer|WP_Post|null} )",
        "description": "Outputs a complete commenting form for use within a template."
    },
    "Function: comment_guid": {
        "prefix": "comment_guid",
        "body": "comment_guid( ${1:\\$comment_id:integer|WP_Comment|null} )",
        "description": "Display the feed GUID for the current comment."
    },
    "Function: comment_ID": {
        "prefix": "comment_ID",
        "body": "comment_ID(  )",
        "description": "Display the comment id of the current comment."
    },
    "Function: comment_id_fields": {
        "prefix": "comment_id_fields",
        "body": "comment_id_fields( ${1:\\$id:integer} )",
        "description": "Output hidden input HTML for replying to comments."
    },
    "Function: comment_link": {
        "prefix": "comment_link",
        "body": "comment_link( ${1:\\$comment:integer|WP_Comment|null} )",
        "description": "Display the link to the comments."
    },
    "Function: comment_reply_link": {
        "prefix": "comment_reply_link",
        "body": "comment_reply_link( ${1:\\$args:array}, ${2:\\$comment:integer|null}, ${3:\\$post:integer|WP_Post|null} )",
        "description": "Displays the HTML content for reply to comment link."
    },
    "Function: comment_text": {
        "prefix": "comment_text",
        "body": "comment_text( ${1:\\$comment_ID:integer|WP_Comment}, ${2:\\$args:array} )",
        "description": "Display the text of the current comment."
    },
    "Function: comment_text_rss": {
        "prefix": "comment_text_rss",
        "body": "comment_text_rss(  )",
        "description": "Display the current comment content for use in the feeds."
    },
    "Function: comment_time": {
        "prefix": "comment_time",
        "body": "comment_time( ${1:\\$d:string} )",
        "description": "Display the comment time of the current comment."
    },
    "Function: comment_type": {
        "prefix": "comment_type",
        "body": "comment_type( ${1:\\$commenttxt:string}, ${2:\\$trackbacktxt:string}, ${3:\\$pingbacktxt:string} )",
        "description": "Display the comment type of the current comment."
    },
    "Function: comments_link": {
        "prefix": "comments_link",
        "body": "comments_link( ${1:\\$deprecated:string}, ${2:\\$deprecated_2:string} )",
        "description": "Display the link to the current post comments."
    },
    "Function: comments_link_feed": {
        "prefix": "comments_link_feed",
        "body": "comments_link_feed(  )",
        "description": "Outputs the link to the comments for the current post in an xml safe way"
    },
    "Function: comments_number": {
        "prefix": "comments_number",
        "body": "comments_number( ${1:\\$zero:string}, ${2:\\$one:string}, ${3:\\$more:string}, ${4:\\$deprecated:string} )",
        "description": "Display the language string for the number of comments the current post has."
    },
    "Function: comments_open": {
        "prefix": "comments_open",
        "body": "comments_open( ${1:\\$post_id:integer|WP_Post|null} )",
        "description": "Whether the current post is open for comments."
    },
    "Function: comments_popup_link": {
        "prefix": "comments_popup_link",
        "body": "comments_popup_link( ${1:\\$zero:string}, ${2:\\$one:string}, ${3:\\$more:string}, ${4:\\$css_class:string}, ${5:\\$none:string} )",
        "description": "Displays the link to the comments for the current post ID."
    },
    "Function: comments_popup_script": {
        "prefix": "comments_popup_script",
        "body": "comments_popup_script(  )",
        "description": "Display the JS popup script to show a comment."
    },
    "Function: comments_rss": {
        "prefix": "comments_rss",
        "body": "comments_rss(  )",
        "description": "Return link to the post RSS feed."
    },
    "Function: comments_rss_link": {
        "prefix": "comments_rss_link",
        "body": "comments_rss_link( ${1:\\$link_text:string} )",
        "description": "Print RSS comment feed link."
    },
    "Function: comments_template": {
        "prefix": "comments_template",
        "body": "comments_template( ${1:\\$file:string}, ${2:\\$separate_comments:boolean} )",
        "description": "Load the comment template specified in $file."
    },
    "Function: compression_test": {
        "prefix": "compression_test",
        "body": "compression_test(  )",
        "description": "Test support for compressing JavaScript from PHP"
    },
    "Function: confirm_another_blog_signup": {
        "prefix": "confirm_another_blog_signup",
        "body": "confirm_another_blog_signup( ${1:\\$domain:string}, ${2:\\$path:string}, ${3:\\$blog_title:string}, ${4:\\$user_name:string}, ${5:\\$user_email:string}, ${6:\\$meta:array}, ${7:\\$blog_id:integer} )",
        "description": "Confirm a new site signup."
    },
    "Function: confirm_blog_signup": {
        "prefix": "confirm_blog_signup",
        "body": "confirm_blog_signup( ${1:\\$domain:string}, ${2:\\$path:string}, ${3:\\$blog_title:string}, ${4:\\$user_name:string}, ${5:\\$user_email:string}, ${6:\\$meta:array} )",
        "description": "New site signup confirmation"
    },
    "Function: confirm_delete_users": {
        "prefix": "confirm_delete_users",
        "body": "confirm_delete_users( ${1:\\$users:array} )",
        "description": ""
    },
    "Function: confirm_user_signup": {
        "prefix": "confirm_user_signup",
        "body": "confirm_user_signup( ${1:\\$user_name:string}, ${2:\\$user_email:string} )",
        "description": "New user signup confirmation"
    },
    "Function: content_url": {
        "prefix": "content_url",
        "body": "content_url( ${1:\\$path:string} )",
        "description": "Retrieves the URL to the content directory."
    },
    "Function: convert_chars": {
        "prefix": "convert_chars",
        "body": "convert_chars( ${1:\\$content:string}, ${2:\\$deprecated:string} )",
        "description": "Converts lone &amp; characters into `&amp;#038;` (a.k.a. `&amp;amp;`)"
    },
    "Function: convert_invalid_entities": {
        "prefix": "convert_invalid_entities",
        "body": "convert_invalid_entities( ${1:\\$content:string} )",
        "description": "Converts invalid Unicode references range to valid range."
    },
    "Function: convert_smilies": {
        "prefix": "convert_smilies",
        "body": "convert_smilies( ${1:\\$text:string} )",
        "description": "Convert text equivalent of smilies to images."
    },
    "Function: convert_to_screen": {
        "prefix": "convert_to_screen",
        "body": "convert_to_screen( ${1:\\$hook_name:string} )",
        "description": "Convert a screen string to a screen object"
    },
    "Function: copy_dir": {
        "prefix": "copy_dir",
        "body": "copy_dir( ${1:\\$from:string}, ${2:\\$to:string}, ${3:\\$skip_list:array} )",
        "description": "Copies a directory from one location to another via the WordPress Filesystem Abstraction."
    },
    "Function: core_update_footer": {
        "prefix": "core_update_footer",
        "body": "core_update_footer( ${1:\\$msg:string} )",
        "description": ""
    },
    "Function: core_upgrade_preamble": {
        "prefix": "core_upgrade_preamble",
        "body": "core_upgrade_preamble(  )",
        "description": "Display upgrade WordPress for downloading latest or upgrading automatically form."
    },
    "Function: count_many_users_posts": {
        "prefix": "count_many_users_posts",
        "body": "count_many_users_posts( ${1:\\$users:array}, ${2:\\$post_type:string|array}, ${3:\\$public_only:boolean} )",
        "description": "Number of posts written by a list of users."
    },
    "Function: count_user_posts": {
        "prefix": "count_user_posts",
        "body": "count_user_posts( ${1:\\$userid:integer}, ${2:\\$post_type:array|string}, ${3:\\$public_only:boolean} )",
        "description": "Number of posts user has written."
    },
    "Function: count_users": {
        "prefix": "count_users",
        "body": "count_users( ${1:\\$strategy:string}, ${2:\\$site_id:integer|null} )",
        "description": "Count number of users who have each of the user roles."
    },
    "Function: create_empty_blog": {
        "prefix": "create_empty_blog",
        "body": "create_empty_blog( ${1:\\$domain:string}, ${2:\\$path:string}, ${3:\\$weblog_title:string}, ${4:\\$site_id:integer} )",
        "description": "Create an empty blog."
    },
    "Function: create_initial_post_types": {
        "prefix": "create_initial_post_types",
        "body": "create_initial_post_types(  )",
        "description": "Creates the initial post types when &#039;init&#039; action is fired."
    },
    "Function: create_initial_rest_routes": {
        "prefix": "create_initial_rest_routes",
        "body": "create_initial_rest_routes(  )",
        "description": "Registers default REST API routes."
    },
    "Function: create_initial_taxonomies": {
        "prefix": "create_initial_taxonomies",
        "body": "create_initial_taxonomies(  )",
        "description": "Creates the initial taxonomies."
    },
    "Function: create_user": {
        "prefix": "create_user",
        "body": "create_user( ${1:\\$username:string}, ${2:\\$password:string}, ${3:\\$email:string} )",
        "description": "An alias of wp_create_user()."
    },
    "Function: current_action": {
        "prefix": "current_action",
        "body": "current_action(  )",
        "description": "Retrieve the name of the current action."
    },
    "Function: current_filter": {
        "prefix": "current_filter",
        "body": "current_filter(  )",
        "description": "Retrieve the name of the current filter or action."
    },
    "Function: current_theme_info": {
        "prefix": "current_theme_info",
        "body": "current_theme_info(  )",
        "description": "Retrieves information on the current active theme."
    },
    "Function: current_theme_supports": {
        "prefix": "current_theme_supports",
        "body": "current_theme_supports( ${1:\\$feature:string} )",
        "description": "Checks a theme&#039;s support for a given feature"
    },
    "Function: current_time": {
        "prefix": "current_time",
        "body": "current_time( ${1:\\$type:string}, ${2:\\$gmt:integer|boolean} )",
        "description": "Retrieve the current time based on specified type."
    },
    "Function: current_user_can": {
        "prefix": "current_user_can",
        "body": "current_user_can( ${1:\\$capability:string} )",
        "description": "Whether the current user has a specific capability."
    },
    "Function: current_user_can_for_blog": {
        "prefix": "current_user_can_for_blog",
        "body": "current_user_can_for_blog( ${1:\\$blog_id:integer}, ${2:\\$capability:string} )",
        "description": "Whether the current user has a specific capability for a given site."
    },
    "Function: customize_themes_print_templates": {
        "prefix": "customize_themes_print_templates",
        "body": "customize_themes_print_templates(  )",
        "description": "Print JS templates for the theme-browsing UI in the Customizer."
    },
    "Function: dashboard_browser_nag_class": {
        "prefix": "dashboard_browser_nag_class",
        "body": "dashboard_browser_nag_class( ${1:\\$classes:array} )",
        "description": ""
    },
    "Function: date_i18n": {
        "prefix": "date_i18n",
        "body": "date_i18n( ${1:\\$dateformatstring:string}, ${2:\\$unixtimestamp:boolean|integer}, ${3:\\$gmt:boolean} )",
        "description": "Retrieve the date in localized format, based on timestamp."
    },
    "Function: dbDelta": {
        "prefix": "dbDelta",
        "body": "dbDelta( ${1:\\$queries:string|array}, ${2:\\$execute:boolean} )",
        "description": "Modifies the database based on specified SQL statements."
    },
    "Function: deactivate_plugins": {
        "prefix": "deactivate_plugins",
        "body": "deactivate_plugins( ${1:\\$plugins:string|array}, ${2:\\$silent:boolean}, ${3:\\$network_wide:mixed|null} )",
        "description": "Deactivate a single plugin or multiple plugins."
    },
    "Function: deactivate_sitewide_plugin": {
        "prefix": "deactivate_sitewide_plugin",
        "body": "deactivate_sitewide_plugin( ${1:\\$plugin:} )",
        "description": "Deprecated functionality for deactivating a network-only plugin."
    },
    "Function: dead_db": {
        "prefix": "dead_db",
        "body": "dead_db(  )",
        "description": "Load custom DB error or display WordPress DB error."
    },
    "Function: debug_fclose": {
        "prefix": "debug_fclose",
        "body": "debug_fclose( ${1:\\$fp:mixed} )",
        "description": "Close the debugging file handle."
    },
    "Function: debug_fopen": {
        "prefix": "debug_fopen",
        "body": "debug_fopen( ${1:\\$filename:string}, ${2:\\$mode:string} )",
        "description": "Open the file handle for debugging."
    },
    "Function: debug_fwrite": {
        "prefix": "debug_fwrite",
        "body": "debug_fwrite( ${1:\\$fp:mixed}, ${2:\\$string:string} )",
        "description": "Write contents to the file used for debugging."
    },
    "Function: default_password_nag": {
        "prefix": "default_password_nag",
        "body": "default_password_nag(  )",
        "description": ""
    },
    "Function: default_password_nag_edit_user": {
        "prefix": "default_password_nag_edit_user",
        "body": "default_password_nag_edit_user( ${1:\\$user_ID:integer}, ${2:\\$old_data:object} )",
        "description": ""
    },
    "Function: default_password_nag_handler": {
        "prefix": "default_password_nag_handler",
        "body": "default_password_nag_handler( ${1:\\$errors:false} )",
        "description": ""
    },
    "Function: default_topic_count_scale": {
        "prefix": "default_topic_count_scale",
        "body": "default_topic_count_scale( ${1:\\$count:integer} )",
        "description": "Default topic count scaling for tag links."
    },
    "Function: default_topic_count_text": {
        "prefix": "default_topic_count_text",
        "body": "default_topic_count_text( ${1:\\$count:integer} )",
        "description": "Old callback for tag link tooltips."
    },
    "Function: delete_all_user_settings": {
        "prefix": "delete_all_user_settings",
        "body": "delete_all_user_settings(  )",
        "description": "Delete the user settings of the current user."
    },
    "Function: delete_blog_option": {
        "prefix": "delete_blog_option",
        "body": "delete_blog_option( ${1:\\$id:integer}, ${2:\\$option:string} )",
        "description": "Removes option by name for a given blog id. Prevents removal of protected WordPress options."
    },
    "Function: delete_comment_meta": {
        "prefix": "delete_comment_meta",
        "body": "delete_comment_meta( ${1:\\$comment_id:integer}, ${2:\\$meta_key:string}, ${3:\\$meta_value:mixed} )",
        "description": "Remove metadata matching criteria from a comment."
    },
    "Function: delete_expired_transients": {
        "prefix": "delete_expired_transients",
        "body": "delete_expired_transients( ${1:\\$force_db:boolean} )",
        "description": "Deletes all expired transients."
    },
    "Function: delete_get_calendar_cache": {
        "prefix": "delete_get_calendar_cache",
        "body": "delete_get_calendar_cache(  )",
        "description": "Purge the cached results of get_calendar."
    },
    "Function: delete_meta": {
        "prefix": "delete_meta",
        "body": "delete_meta( ${1:\\$mid:integer} )",
        "description": "Delete post meta data by meta ID."
    },
    "Function: delete_metadata": {
        "prefix": "delete_metadata",
        "body": "delete_metadata( ${1:\\$meta_type:string}, ${2:\\$object_id:integer}, ${3:\\$meta_key:string}, ${4:\\$meta_value:mixed}, ${5:\\$delete_all:boolean} )",
        "description": "Delete metadata for the specified object."
    },
    "Function: delete_metadata_by_mid": {
        "prefix": "delete_metadata_by_mid",
        "body": "delete_metadata_by_mid( ${1:\\$meta_type:string}, ${2:\\$meta_id:integer} )",
        "description": "Delete meta data by meta ID"
    },
    "Function: delete_network_option": {
        "prefix": "delete_network_option",
        "body": "delete_network_option( ${1:\\$network_id:integer}, ${2:\\$option:string} )",
        "description": "Removes a network option by name."
    },
    "Function: delete_option": {
        "prefix": "delete_option",
        "body": "delete_option( ${1:\\$option:string} )",
        "description": "Removes option by name. Prevents removal of protected WordPress options."
    },
    "Function: delete_plugins": {
        "prefix": "delete_plugins",
        "body": "delete_plugins( ${1:\\$plugins:array}, ${2:\\$deprecated:string} )",
        "description": "Remove directory and files of a plugin for a list of plugins."
    },
    "Function: delete_post_meta": {
        "prefix": "delete_post_meta",
        "body": "delete_post_meta( ${1:\\$post_id:integer}, ${2:\\$meta_key:string}, ${3:\\$meta_value:mixed} )",
        "description": "Remove metadata matching criteria from a post."
    },
    "Function: delete_post_meta_by_key": {
        "prefix": "delete_post_meta_by_key",
        "body": "delete_post_meta_by_key( ${1:\\$post_meta_key:string} )",
        "description": "Delete everything from post meta matching meta key."
    },
    "Function: delete_post_thumbnail": {
        "prefix": "delete_post_thumbnail",
        "body": "delete_post_thumbnail( ${1:\\$post:integer|WP_Post} )",
        "description": "Remove a post thumbnail."
    },
    "Function: delete_site_option": {
        "prefix": "delete_site_option",
        "body": "delete_site_option( ${1:\\$option:string} )",
        "description": "Removes a option by name for the current network."
    },
    "Function: delete_site_transient": {
        "prefix": "delete_site_transient",
        "body": "delete_site_transient( ${1:\\$transient:string} )",
        "description": "Delete a site transient."
    },
    "Function: delete_term_meta": {
        "prefix": "delete_term_meta",
        "body": "delete_term_meta( ${1:\\$term_id:integer}, ${2:\\$meta_key:string}, ${3:\\$meta_value:mixed} )",
        "description": "Removes metadata matching criteria from a term."
    },
    "Function: delete_theme": {
        "prefix": "delete_theme",
        "body": "delete_theme( ${1:\\$stylesheet:string}, ${2:\\$redirect:string} )",
        "description": "Remove a theme"
    },
    "Function: delete_transient": {
        "prefix": "delete_transient",
        "body": "delete_transient( ${1:\\$transient:string} )",
        "description": "Delete a transient."
    },
    "Function: delete_user_meta": {
        "prefix": "delete_user_meta",
        "body": "delete_user_meta( ${1:\\$user_id:integer}, ${2:\\$meta_key:string}, ${3:\\$meta_value:mixed} )",
        "description": "Remove metadata matching criteria from a user."
    },
    "Function: delete_user_option": {
        "prefix": "delete_user_option",
        "body": "delete_user_option( ${1:\\$user_id:integer}, ${2:\\$option_name:string}, ${3:\\$global:boolean} )",
        "description": "Delete user option with global blog capability."
    },
    "Function: delete_user_setting": {
        "prefix": "delete_user_setting",
        "body": "delete_user_setting( ${1:\\$names:string} )",
        "description": "Delete user interface settings."
    },
    "Function: delete_usermeta": {
        "prefix": "delete_usermeta",
        "body": "delete_usermeta( ${1:\\$user_id:integer}, ${2:\\$meta_key:string}, ${3:\\$meta_value:mixed} )",
        "description": "Remove user meta data."
    },
    "Function: delete_users_add_js": {
        "prefix": "delete_users_add_js",
        "body": "delete_users_add_js(  )",
        "description": ""
    },
    "Function: deslash": {
        "prefix": "deslash",
        "body": "deslash( ${1:\\$content:string} )",
        "description": "Filters for content to remove unnecessary slashes."
    },
    "Function: did_action": {
        "prefix": "did_action",
        "body": "did_action( ${1:\\$tag:string} )",
        "description": "Retrieve the number of times an action is fired."
    },
    "Function: disabled": {
        "prefix": "disabled",
        "body": "disabled( ${1:\\$disabled:mixed}, ${2:\\$current:mixed}, ${3:\\$echo:boolean} )",
        "description": "Outputs the html disabled attribute."
    },
    "Function: discover_pingback_server_uri": {
        "prefix": "discover_pingback_server_uri",
        "body": "discover_pingback_server_uri( ${1:\\$url:string}, ${2:\\$deprecated:integer} )",
        "description": "Finds a pingback server URI based on the given URL."
    },
    "Function: dismiss_core_update": {
        "prefix": "dismiss_core_update",
        "body": "dismiss_core_update( ${1:\\$update:object} )",
        "description": ""
    },
    "Function: dismissed_updates": {
        "prefix": "dismissed_updates",
        "body": "dismissed_updates(  )",
        "description": ""
    },
    "Function: display_header": {
        "prefix": "display_header",
        "body": "display_header( ${1:\\$body_classes:string} )",
        "description": "Display installation header."
    },
    "Function: display_header_text": {
        "prefix": "display_header_text",
        "body": "display_header_text(  )",
        "description": "Whether to display the header text."
    },
    "Function: display_plugins_table": {
        "prefix": "display_plugins_table",
        "body": "display_plugins_table(  )",
        "description": "Display plugin content based on plugin list."
    },
    "Function: display_setup_form": {
        "prefix": "display_setup_form",
        "body": "display_setup_form( ${1:\\$error:string|null} )",
        "description": "Display installer setup form."
    },
    "Function: display_space_usage": {
        "prefix": "display_space_usage",
        "body": "display_space_usage(  )",
        "description": "Displays the amount of disk space used by the current site. Not used in core."
    },
    "Function: display_theme": {
        "prefix": "display_theme",
        "body": "display_theme( ${1:\\$theme:object} )",
        "description": "Prints a theme on the Install Themes pages."
    },
    "Function: display_themes": {
        "prefix": "display_themes",
        "body": "display_themes(  )",
        "description": "Display theme content based on theme list."
    },
    "Function: do_accordion_sections": {
        "prefix": "do_accordion_sections",
        "body": "do_accordion_sections( ${1:\\$screen:string|object}, ${2:\\$context:string}, ${3:\\$object:mixed} )",
        "description": "Meta Box Accordion Template Function"
    },
    "Function: do_action": {
        "prefix": "do_action",
        "body": "do_action( ${1:\\$tag:string}, ${2:\\$arg:} )",
        "description": "Execute functions hooked on a specific action hook."
    },
    "Function: do_action_deprecated": {
        "prefix": "do_action_deprecated",
        "body": "do_action_deprecated( ${1:\\$tag:string}, ${2:\\$args:array}, ${3:\\$version:string}, ${4:\\$replacement:string}, ${5:\\$message:string|null} )",
        "description": "Fires functions attached to a deprecated action hook."
    },
    "Function: do_action_ref_array": {
        "prefix": "do_action_ref_array",
        "body": "do_action_ref_array( ${1:\\$tag:string}, ${2:\\$args:array} )",
        "description": "Execute functions hooked on a specific action hook, specifying arguments in an array."
    },
    "Function: do_activate_header": {
        "prefix": "do_activate_header",
        "body": "do_activate_header(  )",
        "description": "Adds an action hook specific to this page."
    },
    "Function: do_all_pings": {
        "prefix": "do_all_pings",
        "body": "do_all_pings(  )",
        "description": "Perform all pingbacks, enclosures, trackbacks, and send to pingback services."
    },
    "Function: do_core_upgrade": {
        "prefix": "do_core_upgrade",
        "body": "do_core_upgrade( ${1:\\$reinstall:boolean} )",
        "description": "Upgrade WordPress core display."
    },
    "Function: do_dismiss_core_update": {
        "prefix": "do_dismiss_core_update",
        "body": "do_dismiss_core_update(  )",
        "description": ""
    },
    "Function: do_enclose": {
        "prefix": "do_enclose",
        "body": "do_enclose( ${1:\\$content:string}, ${2:\\$post_ID:integer} )",
        "description": "Check content for video and audio links to add as enclosures."
    },
    "Function: do_feed": {
        "prefix": "do_feed",
        "body": "do_feed(  )",
        "description": "Load the feed template from the use of an action hook."
    },
    "Function: do_feed_atom": {
        "prefix": "do_feed_atom",
        "body": "do_feed_atom( ${1:\\$for_comments:boolean} )",
        "description": "Load either Atom comment feed or Atom posts feed."
    },
    "Function: do_feed_rdf": {
        "prefix": "do_feed_rdf",
        "body": "do_feed_rdf(  )",
        "description": "Load the RDF RSS 0.91 Feed template."
    },
    "Function: do_feed_rss": {
        "prefix": "do_feed_rss",
        "body": "do_feed_rss(  )",
        "description": "Load the RSS 1.0 Feed Template."
    },
    "Function: do_feed_rss2": {
        "prefix": "do_feed_rss2",
        "body": "do_feed_rss2( ${1:\\$for_comments:boolean} )",
        "description": "Load either the RSS2 comment feed or the RSS2 posts feed."
    },
    "Function: do_meta_boxes": {
        "prefix": "do_meta_boxes",
        "body": "do_meta_boxes( ${1:\\$screen:string|WP_Screen}, ${2:\\$context:string}, ${3:\\$object:mixed} )",
        "description": "Meta-Box template function"
    },
    "Function: do_robots": {
        "prefix": "do_robots",
        "body": "do_robots(  )",
        "description": "Display the robots.txt file content."
    },
    "Function: do_settings_fields": {
        "prefix": "do_settings_fields",
        "body": "do_settings_fields( ${1:\\$page:string}, ${2:\\$section:string} )",
        "description": "Print out the settings fields for a particular settings section"
    },
    "Function: do_settings_sections": {
        "prefix": "do_settings_sections",
        "body": "do_settings_sections( ${1:\\$page:string} )",
        "description": "Prints out all settings sections added to a particular settings page"
    },
    "Function: do_shortcode": {
        "prefix": "do_shortcode",
        "body": "do_shortcode( ${1:\\$content:string}, ${2:\\$ignore_html:boolean} )",
        "description": "Search content for shortcodes and filter shortcodes through their hooks."
    },
    "Function: do_shortcode_tag": {
        "prefix": "do_shortcode_tag",
        "body": "do_shortcode_tag( ${1:\\$m:array} )",
        "description": "Regular Expression callable for do_shortcode() for calling shortcode hook."
    },
    "Function: do_shortcodes_in_html_tags": {
        "prefix": "do_shortcodes_in_html_tags",
        "body": "do_shortcodes_in_html_tags( ${1:\\$content:string}, ${2:\\$ignore_html:boolean}, ${3:\\$tagnames:array} )",
        "description": "Search only inside HTML elements for shortcodes and process them."
    },
    "Function: do_signup_header": {
        "prefix": "do_signup_header",
        "body": "do_signup_header(  )",
        "description": "Prints signup_header via wp_head"
    },
    "Function: do_trackbacks": {
        "prefix": "do_trackbacks",
        "body": "do_trackbacks( ${1:\\$post_id:integer|WP_Post} )",
        "description": "Perform trackbacks."
    },
    "Function: do_undismiss_core_update": {
        "prefix": "do_undismiss_core_update",
        "body": "do_undismiss_core_update(  )",
        "description": ""
    },
    "Function: documentation_link": {
        "prefix": "documentation_link",
        "body": "documentation_link(  )",
        "description": "Unused Admin function."
    },
    "Function: doing_action": {
        "prefix": "doing_action",
        "body": "doing_action( ${1:\\$action:string|null} )",
        "description": "Retrieve the name of an action currently being processed."
    },
    "Function: doing_filter": {
        "prefix": "doing_filter",
        "body": "doing_filter( ${1:\\$filter:null|string} )",
        "description": "Retrieve the name of a filter currently being processed."
    },
    "Function: dolly_css": {
        "prefix": "dolly_css",
        "body": "dolly_css(  )",
        "description": ""
    },
    "Function: domain_exists": {
        "prefix": "domain_exists",
        "body": "domain_exists( ${1:\\$domain:string}, ${2:\\$path:string}, ${3:\\$network_id:integer} )",
        "description": "Checks whether a site name is already taken."
    },
    "Function: download_url": {
        "prefix": "download_url",
        "body": "download_url( ${1:\\$url:string}, ${2:\\$timeout:integer} )",
        "description": "Downloads a URL to a local temporary file using the WordPress HTTP Class."
    },
    "Function: drop_index": {
        "prefix": "drop_index",
        "body": "drop_index( ${1:\\$table:string}, ${2:\\$index:string} )",
        "description": "Drops a specified index from a table."
    },
    "Function: dropdown_categories": {
        "prefix": "dropdown_categories",
        "body": "dropdown_categories( ${1:\\$default:integer}, ${2:\\$parent:integer}, ${3:\\$popular_ids:array} )",
        "description": "Legacy function used to generate the categories checklist control."
    },
    "Function: dropdown_cats": {
        "prefix": "dropdown_cats",
        "body": "dropdown_cats( ${1:\\$optionall:integer}, ${2:\\$all:string}, ${3:\\$orderby:string}, ${4:\\$order:string}, ${5:\\$show_last_update:integer}, ${6:\\$show_count:integer}, ${7:\\$hide_empty:integer}, ${8:\\$optionnone:boolean}, ${9:\\$selected:integer}, ${10:\\$exclude:integer} )",
        "description": "Deprecated method for generating a drop-down of categories."
    },
    "Function: dropdown_link_categories": {
        "prefix": "dropdown_link_categories",
        "body": "dropdown_link_categories( ${1:\\$default:integer} )",
        "description": "Legacy function used to generate a link categories checklist control."
    },
    "Function: dynamic_sidebar": {
        "prefix": "dynamic_sidebar",
        "body": "dynamic_sidebar( ${1:\\$index:integer|string} )",
        "description": "Display dynamic sidebar."
    },
    "Function: edit_bookmark_link": {
        "prefix": "edit_bookmark_link",
        "body": "edit_bookmark_link( ${1:\\$link:string}, ${2:\\$before:string}, ${3:\\$after:string}, ${4:\\$bookmark:integer|null} )",
        "description": "Displays the edit bookmark link anchor content."
    },
    "Function: edit_comment": {
        "prefix": "edit_comment",
        "body": "edit_comment(  )",
        "description": "Update a comment with values provided in $_POST."
    },
    "Function: edit_comment_link": {
        "prefix": "edit_comment_link",
        "body": "edit_comment_link( ${1:\\$text:string|null}, ${2:\\$before:string}, ${3:\\$after:string} )",
        "description": "Displays the edit comment link with formatting."
    },
    "Function: edit_form_image_editor": {
        "prefix": "edit_form_image_editor",
        "body": "edit_form_image_editor( ${1:\\$post:WP_Post} )",
        "description": "Displays the image and editor in the post editor"
    },
    "Function: edit_link": {
        "prefix": "edit_link",
        "body": "edit_link( ${1:\\$link_id:integer} )",
        "description": "Updates or inserts a link using values provided in $_POST."
    },
    "Function: edit_post": {
        "prefix": "edit_post",
        "body": "edit_post( ${1:\\$post_data:array|null} )",
        "description": "Update an existing post with values provided in $_POST."
    },
    "Function: edit_post_link": {
        "prefix": "edit_post_link",
        "body": "edit_post_link( ${1:\\$text:string|null}, ${2:\\$before:string}, ${3:\\$after:string}, ${4:\\$id:integer|WP_Post}, ${5:\\$class:string} )",
        "description": "Displays the edit post link for post."
    },
    "Function: edit_tag_link": {
        "prefix": "edit_tag_link",
        "body": "edit_tag_link( ${1:\\$link:string}, ${2:\\$before:string}, ${3:\\$after:string}, ${4:\\$tag:WP_Term|null} )",
        "description": "Displays or retrieves the edit link for a tag with formatting."
    },
    "Function: edit_term_link": {
        "prefix": "edit_term_link",
        "body": "edit_term_link( ${1:\\$link:string}, ${2:\\$before:string}, ${3:\\$after:string}, ${4:\\$term:object|null}, ${5:\\$echo:boolean} )",
        "description": "Displays or retrieves the edit term link with formatting."
    },
    "Function: edit_user": {
        "prefix": "edit_user",
        "body": "edit_user( ${1:\\$user_id:integer} )",
        "description": "Edit user settings based on contents of $_POST"
    },
    "Function: email_exists": {
        "prefix": "email_exists",
        "body": "email_exists( ${1:\\$email:string} )",
        "description": "Checks whether the given email exists."
    },
    "Function: endElement": {
        "prefix": "endElement",
        "body": "endElement( ${1:\\$parser:mixed}, ${2:\\$tagName:string} )",
        "description": "XML callback function that is called at the end of a XML tag."
    },
    "Function: enqueue_comment_hotkeys_js": {
        "prefix": "enqueue_comment_hotkeys_js",
        "body": "enqueue_comment_hotkeys_js(  )",
        "description": ""
    },
    "Function: enqueue_embed_scripts": {
        "prefix": "enqueue_embed_scripts",
        "body": "enqueue_embed_scripts(  )",
        "description": "Enqueue embed iframe default CSS and JS &amp; fire do_action(&#039;enqueue_embed_scripts&#039;)"
    },
    "Function: ent2ncr": {
        "prefix": "ent2ncr",
        "body": "ent2ncr( ${1:\\$text:string} )",
        "description": "Converts named entities into numbered entities."
    },
    "Function: esc_attr": {
        "prefix": "esc_attr",
        "body": "esc_attr( ${1:\\$text:string} )",
        "description": "Escaping for HTML attributes."
    },
    "Function: esc_attr__": {
        "prefix": "esc_attr__",
        "body": "esc_attr__( ${1:\\$text:string}, ${2:\\$domain:string} )",
        "description": "Retrieve the translation of $text and escapes it for safe use in an attribute."
    },
    "Function: esc_attr_e": {
        "prefix": "esc_attr_e",
        "body": "esc_attr_e( ${1:\\$text:string}, ${2:\\$domain:string} )",
        "description": "Display translated text that has been escaped for safe use in an attribute."
    },
    "Function: esc_attr_x": {
        "prefix": "esc_attr_x",
        "body": "esc_attr_x( ${1:\\$text:string}, ${2:\\$context:string}, ${3:\\$domain:string} )",
        "description": "Translate string with gettext context, and escapes it for safe use in an attribute."
    },
    "Function: esc_html": {
        "prefix": "esc_html",
        "body": "esc_html( ${1:\\$text:string} )",
        "description": "Escaping for HTML blocks."
    },
    "Function: esc_html__": {
        "prefix": "esc_html__",
        "body": "esc_html__( ${1:\\$text:string}, ${2:\\$domain:string} )",
        "description": "Retrieve the translation of $text and escapes it for safe use in HTML output."
    },
    "Function: esc_html_e": {
        "prefix": "esc_html_e",
        "body": "esc_html_e( ${1:\\$text:string}, ${2:\\$domain:string} )",
        "description": "Display translated text that has been escaped for safe use in HTML output."
    },
    "Function: esc_html_x": {
        "prefix": "esc_html_x",
        "body": "esc_html_x( ${1:\\$text:string}, ${2:\\$context:string}, ${3:\\$domain:string} )",
        "description": "Translate string with gettext context, and escapes it for safe use in HTML output."
    },
    "Function: esc_js": {
        "prefix": "esc_js",
        "body": "esc_js( ${1:\\$text:string} )",
        "description": "Escape single quotes, htmlspecialchar &quot; &lt; &gt; &amp;, and fix line endings."
    },
    "Function: esc_sql": {
        "prefix": "esc_sql",
        "body": "esc_sql( ${1:\\$data:string|array} )",
        "description": "Escapes data for use in a MySQL query."
    },
    "Function: esc_textarea": {
        "prefix": "esc_textarea",
        "body": "esc_textarea( ${1:\\$text:string} )",
        "description": "Escaping for textarea values."
    },
    "Function: esc_url": {
        "prefix": "esc_url",
        "body": "esc_url( ${1:\\$url:string}, ${2:\\$protocols:array|null}, ${3:\\$_context:string} )",
        "description": "Checks and cleans a URL."
    },
    "Function: esc_url_raw": {
        "prefix": "esc_url_raw",
        "body": "esc_url_raw( ${1:\\$url:string}, ${2:\\$protocols:array|null} )",
        "description": "Performs esc_url() for database usage."
    },
    "Function: export_add_js": {
        "prefix": "export_add_js",
        "body": "export_add_js(  )",
        "description": "Display JavaScript on the page."
    },
    "Function: export_date_options": {
        "prefix": "export_date_options",
        "body": "export_date_options( ${1:\\$post_type:string} )",
        "description": "Create the date options fields for exporting a given post type."
    },
    "Function: export_wp": {
        "prefix": "export_wp",
        "body": "export_wp( ${1:\\$args:array} )",
        "description": "Generates the WXR export file for download."
    },
    "Function: extract_from_markers": {
        "prefix": "extract_from_markers",
        "body": "extract_from_markers( ${1:\\$filename:string}, ${2:\\$marker:string} )",
        "description": "Extracts strings from between the BEGIN and END markers in the .htaccess file."
    },
    "Function: favorite_actions": {
        "prefix": "favorite_actions",
        "body": "favorite_actions(  )",
        "description": "Favorite actions were deprecated in version 3.2. Use the admin bar instead."
    },
    "Function: feed_content_type": {
        "prefix": "feed_content_type",
        "body": "feed_content_type( ${1:\\$type:string} )",
        "description": "Return the content type for specified feed type."
    },
    "Function: feed_links": {
        "prefix": "feed_links",
        "body": "feed_links( ${1:\\$args:array} )",
        "description": "Display the links to the general feeds."
    },
    "Function: feed_links_extra": {
        "prefix": "feed_links_extra",
        "body": "feed_links_extra( ${1:\\$args:array} )",
        "description": "Display the links to the extra feeds such as category feeds."
    },
    "Function: fetch_feed": {
        "prefix": "fetch_feed",
        "body": "fetch_feed( ${1:\\$url:mixed} )",
        "description": "Build SimplePie object based on RSS or Atom feed from URL."
    },
    "Function: fetch_rss": {
        "prefix": "fetch_rss",
        "body": "fetch_rss( ${1:\\$url:string} )",
        "description": "Build Magpie object based on RSS from URL."
    },
    "Function: file_is_displayable_image": {
        "prefix": "file_is_displayable_image",
        "body": "file_is_displayable_image( ${1:\\$path:string} )",
        "description": "Validate that file is suitable for displaying within a web page."
    },
    "Function: file_is_valid_image": {
        "prefix": "file_is_valid_image",
        "body": "file_is_valid_image( ${1:\\$path:string} )",
        "description": "Validate that file is an image."
    },
    "Function: filter_default_option": {
        "prefix": "filter_default_option",
        "body": "filter_default_option( ${1:\\$default:mixed}, ${2:\\$option:string}, ${3:\\$passed_default:boolean} )",
        "description": "Filter the default value for the option."
    },
    "Function: filter_SSL": {
        "prefix": "filter_SSL",
        "body": "filter_SSL( ${1:\\$url:string} )",
        "description": "Formats a URL to use https."
    },
    "Function: find_core_auto_update": {
        "prefix": "find_core_auto_update",
        "body": "find_core_auto_update(  )",
        "description": "Gets the best available (and enabled) Auto-Update for WordPress Core."
    },
    "Function: find_core_update": {
        "prefix": "find_core_update",
        "body": "find_core_update( ${1:\\$version:string}, ${2:\\$locale:string} )",
        "description": ""
    },
    "Function: find_posts_div": {
        "prefix": "find_posts_div",
        "body": "find_posts_div( ${1:\\$found_action:string} )",
        "description": "Outputs the modal window used for attaching media to posts or pages in the media-listing screen."
    },
    "Function: fix_import_form_size": {
        "prefix": "fix_import_form_size",
        "body": "fix_import_form_size( ${1:\\$size:integer} )",
        "description": "Get the remaining upload space for this site."
    },
    "Function: fix_phpmailer_messageid": {
        "prefix": "fix_phpmailer_messageid",
        "body": "fix_phpmailer_messageid( ${1:\\$phpmailer:PHPMailer} )",
        "description": "Correct From host on outgoing mail to match the site domain"
    },
    "Function: floated_admin_avatar": {
        "prefix": "floated_admin_avatar",
        "body": "floated_admin_avatar( ${1:\\$name:string} )",
        "description": "Add avatars to relevant places in admin, or try to."
    },
    "Function: flush_rewrite_rules": {
        "prefix": "flush_rewrite_rules",
        "body": "flush_rewrite_rules( ${1:\\$hard:boolean} )",
        "description": "Remove rewrite rules and then recreate rewrite rules."
    },
    "Function: force_ssl_admin": {
        "prefix": "force_ssl_admin",
        "body": "force_ssl_admin( ${1:\\$force:string|boolean|null} )",
        "description": "Whether to force SSL used for the Administration Screens."
    },
    "Function: force_ssl_content": {
        "prefix": "force_ssl_content",
        "body": "force_ssl_content( ${1:\\$force:boolean} )",
        "description": "Whether to force SSL on content."
    },
    "Function: force_ssl_login": {
        "prefix": "force_ssl_login",
        "body": "force_ssl_login( ${1:\\$force:string|boolean|null} )",
        "description": "Whether SSL login should be forced."
    },
    "Function: form_option": {
        "prefix": "form_option",
        "body": "form_option( ${1:\\$option:string} )",
        "description": "Print option value after sanitizing for forms."
    },
    "Function: format_code_lang": {
        "prefix": "format_code_lang",
        "body": "format_code_lang( ${1:\\$code:string} )",
        "description": "Returns the language for a language code."
    },
    "Function: format_for_editor": {
        "prefix": "format_for_editor",
        "body": "format_for_editor( ${1:\\$text:string}, ${2:\\$default_editor:string|null} )",
        "description": "Formats text for the editor."
    },
    "Function: format_to_edit": {
        "prefix": "format_to_edit",
        "body": "format_to_edit( ${1:\\$content:string}, ${2:\\$rich_text:boolean} )",
        "description": "Acts on text which is about to be edited."
    },
    "Function: format_to_post": {
        "prefix": "format_to_post",
        "body": "format_to_post( ${1:\\$content:string} )",
        "description": "Formerly used to escape strings before inserting into the DB."
    },
    "Function: funky_javascript_callback": {
        "prefix": "funky_javascript_callback",
        "body": "funky_javascript_callback( ${1:\\$matches:array} )",
        "description": "Callback used to change %uXXXX to &amp;#YYY; syntax"
    },
    "Function: funky_javascript_fix": {
        "prefix": "funky_javascript_fix",
        "body": "funky_javascript_fix( ${1:\\$text:string} )",
        "description": "Fixes JavaScript bugs in browsers."
    },
    "Function: gallery_shortcode": {
        "prefix": "gallery_shortcode",
        "body": "gallery_shortcode( ${1:\\$attr:array} )",
        "description": "Builds the Gallery shortcode output."
    },
    "Function: gd_edit_image_support": {
        "prefix": "gd_edit_image_support",
        "body": "gd_edit_image_support( ${1:\\$mime_type:string} )",
        "description": "Check if the installed version of GD supports particular image type"
    },
    "Function: generate_random_password": {
        "prefix": "generate_random_password",
        "body": "generate_random_password( ${1:\\$len:integer} )",
        "description": "Generates a random password."
    },
    "Function: generic_ping": {
        "prefix": "generic_ping",
        "body": "generic_ping( ${1:\\$post_id:integer} )",
        "description": "Sends pings to all of the ping site services."
    },
    "Function: get_404_template": {
        "prefix": "get_404_template",
        "body": "get_404_template(  )",
        "description": "Retrieve path of 404 template in current or parent template."
    },
    "Function: get_active_blog_for_user": {
        "prefix": "get_active_blog_for_user",
        "body": "get_active_blog_for_user( ${1:\\$user_id:integer} )",
        "description": "Get one of a user&#039;s active blogs"
    },
    "Function: get_adjacent_post": {
        "prefix": "get_adjacent_post",
        "body": "get_adjacent_post( ${1:\\$in_same_term:boolean}, ${2:\\$excluded_terms:array|string}, ${3:\\$previous:boolean}, ${4:\\$taxonomy:string} )",
        "description": "Retrieves the adjacent post."
    },
    "Function: get_adjacent_post_link": {
        "prefix": "get_adjacent_post_link",
        "body": "get_adjacent_post_link( ${1:\\$format:string}, ${2:\\$link:string}, ${3:\\$in_same_term:boolean}, ${4:\\$excluded_terms:array|string}, ${5:\\$previous:boolean}, ${6:\\$taxonomy:string} )",
        "description": "Retrieves the adjacent post link."
    },
    "Function: get_adjacent_post_rel_link": {
        "prefix": "get_adjacent_post_rel_link",
        "body": "get_adjacent_post_rel_link( ${1:\\$title:string}, ${2:\\$in_same_term:boolean}, ${3:\\$excluded_terms:array|string}, ${4:\\$previous:boolean}, ${5:\\$taxonomy:string} )",
        "description": "Retrieves the adjacent post relational link."
    },
    "Function: get_admin_page_parent": {
        "prefix": "get_admin_page_parent",
        "body": "get_admin_page_parent( ${1:\\$parent:} )",
        "description": ""
    },
    "Function: get_admin_page_title": {
        "prefix": "get_admin_page_title",
        "body": "get_admin_page_title(  )",
        "description": ""
    },
    "Function: get_admin_url": {
        "prefix": "get_admin_url",
        "body": "get_admin_url( ${1:\\$blog_id:integer|null}, ${2:\\$path:string}, ${3:\\$scheme:string} )",
        "description": "Retrieves the URL to the admin area for a given site."
    },
    "Function: get_admin_users_for_domain": {
        "prefix": "get_admin_users_for_domain",
        "body": "get_admin_users_for_domain( ${1:\\$domain:string}, ${2:\\$path:string} )",
        "description": "Get the admin for a domain/path combination."
    },
    "Function: get_all_category_ids": {
        "prefix": "get_all_category_ids",
        "body": "get_all_category_ids(  )",
        "description": "Retrieves all category IDs."
    },
    "Function: get_all_page_ids": {
        "prefix": "get_all_page_ids",
        "body": "get_all_page_ids(  )",
        "description": "Get a list of page IDs."
    },
    "Function: get_all_post_type_supports": {
        "prefix": "get_all_post_type_supports",
        "body": "get_all_post_type_supports( ${1:\\$post_type:string} )",
        "description": "Get all the post type features"
    },
    "Function: get_all_user_settings": {
        "prefix": "get_all_user_settings",
        "body": "get_all_user_settings(  )",
        "description": "Retrieve all user interface settings."
    },
    "Function: get_alloptions": {
        "prefix": "get_alloptions",
        "body": "get_alloptions(  )",
        "description": "Retrieve all autoload options, or all options if no autoloaded ones exist."
    },
    "Function: get_alloptions_110": {
        "prefix": "get_alloptions_110",
        "body": "get_alloptions_110(  )",
        "description": "Retrieve all options as it was for 1.2."
    },
    "Function: get_allowed_http_origins": {
        "prefix": "get_allowed_http_origins",
        "body": "get_allowed_http_origins(  )",
        "description": "Retrieve list of allowed HTTP origins."
    },
    "Function: get_allowed_mime_types": {
        "prefix": "get_allowed_mime_types",
        "body": "get_allowed_mime_types( ${1:\\$user:integer|WP_User|null} )",
        "description": "Retrieve list of allowed mime types and file extensions."
    },
    "Function: get_allowed_themes": {
        "prefix": "get_allowed_themes",
        "body": "get_allowed_themes(  )",
        "description": "Get the allowed themes for the current site."
    },
    "Function: get_ancestors": {
        "prefix": "get_ancestors",
        "body": "get_ancestors( ${1:\\$object_id:integer}, ${2:\\$object_type:string}, ${3:\\$resource_type:string} )",
        "description": "Get an array of ancestor IDs for a given object."
    },
    "Function: get_approved_comments": {
        "prefix": "get_approved_comments",
        "body": "get_approved_comments( ${1:\\$post_id:integer}, ${2:\\$args:array} )",
        "description": "Retrieve the approved comments for post $post_id."
    },
    "Function: get_archive_template": {
        "prefix": "get_archive_template",
        "body": "get_archive_template(  )",
        "description": "Retrieve path of archive template in current or parent template."
    },
    "Function: get_archives": {
        "prefix": "get_archives",
        "body": "get_archives( ${1:\\$type:string}, ${2:\\$limit:string}, ${3:\\$format:string}, ${4:\\$before:string}, ${5:\\$after:string}, ${6:\\$show_post_count:boolean} )",
        "description": "Retrieves a list of archives."
    },
    "Function: get_archives_link": {
        "prefix": "get_archives_link",
        "body": "get_archives_link( ${1:\\$url:string}, ${2:\\$text:string}, ${3:\\$format:string}, ${4:\\$before:string}, ${5:\\$after:string} )",
        "description": "Retrieve archive link content based on predefined or custom code."
    },
    "Function: get_attached_file": {
        "prefix": "get_attached_file",
        "body": "get_attached_file( ${1:\\$attachment_id:integer}, ${2:\\$unfiltered:boolean} )",
        "description": "Retrieve attached file path based on attachment ID."
    },
    "Function: get_attached_media": {
        "prefix": "get_attached_media",
        "body": "get_attached_media( ${1:\\$type:string}, ${2:\\$post:integer|WP_Post} )",
        "description": "Retrieves media attached to the passed post."
    },
    "Function: get_attachment_fields_to_edit": {
        "prefix": "get_attachment_fields_to_edit",
        "body": "get_attachment_fields_to_edit( ${1:\\$post:WP_Post}, ${2:\\$errors:array|null} )",
        "description": "Retrieves the attachment fields to edit form fields."
    },
    "Function: get_attachment_icon": {
        "prefix": "get_attachment_icon",
        "body": "get_attachment_icon( ${1:\\$id:integer}, ${2:\\$fullsize:boolean}, ${3:\\$max_dims:array} )",
        "description": "Retrieve HTML content of icon attachment image element."
    },
    "Function: get_attachment_icon_src": {
        "prefix": "get_attachment_icon_src",
        "body": "get_attachment_icon_src( ${1:\\$id:integer}, ${2:\\$fullsize:boolean} )",
        "description": "Retrieve icon URL and Path."
    },
    "Function: get_attachment_innerHTML": {
        "prefix": "get_attachment_innerHTML",
        "body": "get_attachment_innerHTML( ${1:\\$id:integer}, ${2:\\$fullsize:boolean}, ${3:\\$max_dims:array} )",
        "description": "Retrieve HTML content of image element."
    },
    "Function: get_attachment_link": {
        "prefix": "get_attachment_link",
        "body": "get_attachment_link( ${1:\\$post:integer|object|null}, ${2:\\$leavename:boolean} )",
        "description": "Retrieves the permalink for an attachment."
    },
    "Function: get_attachment_taxonomies": {
        "prefix": "get_attachment_taxonomies",
        "body": "get_attachment_taxonomies( ${1:\\$attachment:integer|array|object}, ${2:\\$output:string} )",
        "description": "Retrieves taxonomies attached to given the attachment."
    },
    "Function: get_attachment_template": {
        "prefix": "get_attachment_template",
        "body": "get_attachment_template(  )",
        "description": "Retrieve path of attachment template in current or parent template."
    },
    "Function: get_author_feed_link": {
        "prefix": "get_author_feed_link",
        "body": "get_author_feed_link( ${1:\\$author_id:integer}, ${2:\\$feed:string} )",
        "description": "Retrieves the feed link for a given author."
    },
    "Function: get_author_link": {
        "prefix": "get_author_link",
        "body": "get_author_link( ${1:\\$echo:boolean}, ${2:\\$author_id:integer}, ${3:\\$author_nicename:string} )",
        "description": "Returns or Prints link to the author&#039;s posts."
    },
    "Function: get_author_name": {
        "prefix": "get_author_name",
        "body": "get_author_name( ${1:\\$auth_id:integer} )",
        "description": "Retrieve the specified author&#039;s preferred display name."
    },
    "Function: get_author_posts_url": {
        "prefix": "get_author_posts_url",
        "body": "get_author_posts_url( ${1:\\$author_id:integer}, ${2:\\$author_nicename:string} )",
        "description": "Retrieve the URL to the author page for the user with the ID provided."
    },
    "Function: get_author_rss_link": {
        "prefix": "get_author_rss_link",
        "body": "get_author_rss_link( ${1:\\$echo:boolean}, ${2:\\$author_id:integer} )",
        "description": "Print/Return link to author RSS feed."
    },
    "Function: get_author_template": {
        "prefix": "get_author_template",
        "body": "get_author_template(  )",
        "description": "Retrieve path of author template in current or parent template."
    },
    "Function: get_author_user_ids": {
        "prefix": "get_author_user_ids",
        "body": "get_author_user_ids(  )",
        "description": "Get all user IDs."
    },
    "Function: get_autotoggle": {
        "prefix": "get_autotoggle",
        "body": "get_autotoggle( ${1:\\$id:integer} )",
        "description": "Gets the auto_toggle setting."
    },
    "Function: get_available_languages": {
        "prefix": "get_available_languages",
        "body": "get_available_languages( ${1:\\$dir:string|null} )",
        "description": "Get all available languages based on the presence of *.mo files in a given directory."
    },
    "Function: get_available_post_mime_types": {
        "prefix": "get_available_post_mime_types",
        "body": "get_available_post_mime_types( ${1:\\$type:string} )",
        "description": "Get all available post MIME types for a given post type."
    },
    "Function: get_available_post_statuses": {
        "prefix": "get_available_post_statuses",
        "body": "get_available_post_statuses( ${1:\\$type:string} )",
        "description": "Get all the possible statuses for a post_type"
    },
    "Function: get_avatar": {
        "prefix": "get_avatar",
        "body": "get_avatar( ${1:\\$id_or_email:mixed}, ${2:\\$size:integer}, ${3:\\$default:string}, ${4:\\$alt:string}, ${5:\\$args:array|null} )",
        "description": "Retrieve the avatar `&lt;img&gt;` tag for a user, email address, MD5 hash, comment, or post."
    },
    "Function: get_avatar_data": {
        "prefix": "get_avatar_data",
        "body": "get_avatar_data( ${1:\\$id_or_email:mixed}, ${2:\\$args:array|null} )",
        "description": "Retrieves default data about the avatar."
    },
    "Function: get_avatar_url": {
        "prefix": "get_avatar_url",
        "body": "get_avatar_url( ${1:\\$id_or_email:mixed}, ${2:\\$args:array|null} )",
        "description": "Retrieves the avatar URL."
    },
    "Function: get_background_color": {
        "prefix": "get_background_color",
        "body": "get_background_color(  )",
        "description": "Retrieve value for custom background color."
    },
    "Function: get_background_image": {
        "prefix": "get_background_image",
        "body": "get_background_image(  )",
        "description": "Retrieve background image for custom background."
    },
    "Function: get_blog_count": {
        "prefix": "get_blog_count",
        "body": "get_blog_count( ${1:\\$network_id:integer|null} )",
        "description": "The number of active sites on your installation."
    },
    "Function: get_blog_details": {
        "prefix": "get_blog_details",
        "body": "get_blog_details( ${1:\\$fields:integer|string|array|null}, ${2:\\$get_all:boolean} )",
        "description": "Retrieve the details for a blog from the blogs table and blog options."
    },
    "Function: get_blog_id_from_url": {
        "prefix": "get_blog_id_from_url",
        "body": "get_blog_id_from_url( ${1:\\$domain:string}, ${2:\\$path:string} )",
        "description": "Get a blog&#039;s numeric ID from its URL."
    },
    "Function: get_blog_list": {
        "prefix": "get_blog_list",
        "body": "get_blog_list( ${1:\\$start:integer}, ${2:\\$num:integer}, ${3:\\$deprecated:string} )",
        "description": "Deprecated functionality to retrieve a list of all sites."
    },
    "Function: get_blog_option": {
        "prefix": "get_blog_option",
        "body": "get_blog_option( ${1:\\$id:integer}, ${2:\\$option:string}, ${3:\\$default:mixed} )",
        "description": "Retrieve option value for a given blog id based on name of option."
    },
    "Function: get_blog_permalink": {
        "prefix": "get_blog_permalink",
        "body": "get_blog_permalink( ${1:\\$blog_id:integer}, ${2:\\$post_id:integer} )",
        "description": "Get the permalink for a post on another blog."
    },
    "Function: get_blog_post": {
        "prefix": "get_blog_post",
        "body": "get_blog_post( ${1:\\$blog_id:integer}, ${2:\\$post_id:integer} )",
        "description": "Get a blog post from any site on the network."
    },
    "Function: get_blog_status": {
        "prefix": "get_blog_status",
        "body": "get_blog_status( ${1:\\$id:integer}, ${2:\\$pref:string} )",
        "description": "Get a blog details field."
    },
    "Function: get_blogaddress_by_domain": {
        "prefix": "get_blogaddress_by_domain",
        "body": "get_blogaddress_by_domain( ${1:\\$domain:string}, ${2:\\$path:string} )",
        "description": "Get a full blog URL, given a domain and a path."
    },
    "Function: get_blogaddress_by_id": {
        "prefix": "get_blogaddress_by_id",
        "body": "get_blogaddress_by_id( ${1:\\$blog_id:integer} )",
        "description": "Get a full blog URL, given a blog id."
    },
    "Function: get_blogaddress_by_name": {
        "prefix": "get_blogaddress_by_name",
        "body": "get_blogaddress_by_name( ${1:\\$blogname:string} )",
        "description": "Get a full blog URL, given a blog name."
    },
    "Function: get_bloginfo": {
        "prefix": "get_bloginfo",
        "body": "get_bloginfo( ${1:\\$show:string}, ${2:\\$filter:string} )",
        "description": "Retrieves information about the current site."
    },
    "Function: get_bloginfo_rss": {
        "prefix": "get_bloginfo_rss",
        "body": "get_bloginfo_rss( ${1:\\$show:string} )",
        "description": "RSS container for the bloginfo function."
    },
    "Function: get_blogs_of_user": {
        "prefix": "get_blogs_of_user",
        "body": "get_blogs_of_user( ${1:\\$user_id:integer}, ${2:\\$all:boolean} )",
        "description": "Get the sites a user belongs to."
    },
    "Function: get_body_class": {
        "prefix": "get_body_class",
        "body": "get_body_class( ${1:\\$class:string|array} )",
        "description": "Retrieve the classes for the body element as an array."
    },
    "Function: get_bookmark": {
        "prefix": "get_bookmark",
        "body": "get_bookmark( ${1:\\$bookmark:integer|stdClass}, ${2:\\$output:string}, ${3:\\$filter:string} )",
        "description": "Retrieve Bookmark data"
    },
    "Function: get_bookmark_field": {
        "prefix": "get_bookmark_field",
        "body": "get_bookmark_field( ${1:\\$field:string}, ${2:\\$bookmark:integer}, ${3:\\$context:string} )",
        "description": "Retrieve single bookmark data item or field."
    },
    "Function: get_bookmarks": {
        "prefix": "get_bookmarks",
        "body": "get_bookmarks( ${1:\\$args:string|array} )",
        "description": "Retrieves the list of bookmarks"
    },
    "Function: get_boundary_post": {
        "prefix": "get_boundary_post",
        "body": "get_boundary_post( ${1:\\$in_same_term:boolean}, ${2:\\$excluded_terms:array|string}, ${3:\\$start:boolean}, ${4:\\$taxonomy:string} )",
        "description": "Retrieves the boundary post."
    },
    "Function: get_boundary_post_rel_link": {
        "prefix": "get_boundary_post_rel_link",
        "body": "get_boundary_post_rel_link( ${1:\\$title:string}, ${2:\\$in_same_cat:boolean}, ${3:\\$excluded_categories:string}, ${4:\\$start:boolean} )",
        "description": "Get boundary post relational link."
    },
    "Function: get_broken_themes": {
        "prefix": "get_broken_themes",
        "body": "get_broken_themes(  )",
        "description": "Retrieves a list of broken themes."
    },
    "Function: get_calendar": {
        "prefix": "get_calendar",
        "body": "get_calendar( ${1:\\$initial:boolean}, ${2:\\$echo:boolean} )",
        "description": "Display calendar with days that have posts as links."
    },
    "Function: get_cancel_comment_reply_link": {
        "prefix": "get_cancel_comment_reply_link",
        "body": "get_cancel_comment_reply_link( ${1:\\$text:string} )",
        "description": "Retrieve HTML content for cancel comment reply link."
    },
    "Function: get_cat_ID": {
        "prefix": "get_cat_ID",
        "body": "get_cat_ID( ${1:\\$cat_name:string} )",
        "description": "Retrieve the ID of a category from its name."
    },
    "Function: get_cat_name": {
        "prefix": "get_cat_name",
        "body": "get_cat_name( ${1:\\$cat_id:integer} )",
        "description": "Retrieve the name of a category from its ID."
    },
    "Function: get_categories": {
        "prefix": "get_categories",
        "body": "get_categories( ${1:\\$args:string|array} )",
        "description": "Retrieve list of category objects."
    },
    "Function: get_category": {
        "prefix": "get_category",
        "body": "get_category( ${1:\\$category:integer|object}, ${2:\\$output:string}, ${3:\\$filter:string} )",
        "description": "Retrieves category data given a category ID or category object."
    },
    "Function: get_category_by_path": {
        "prefix": "get_category_by_path",
        "body": "get_category_by_path( ${1:\\$category_path:string}, ${2:\\$full_match:boolean}, ${3:\\$output:string} )",
        "description": "Retrieve category based on URL containing the category slug."
    },
    "Function: get_category_by_slug": {
        "prefix": "get_category_by_slug",
        "body": "get_category_by_slug( ${1:\\$slug:string} )",
        "description": "Retrieve category object by category slug."
    },
    "Function: get_category_children": {
        "prefix": "get_category_children",
        "body": "get_category_children( ${1:\\$id:integer}, ${2:\\$before:string}, ${3:\\$after:string}, ${4:\\$visited:array} )",
        "description": "Retrieve category children list separated before and after the term IDs."
    },
    "Function: get_category_feed_link": {
        "prefix": "get_category_feed_link",
        "body": "get_category_feed_link( ${1:\\$cat_id:integer}, ${2:\\$feed:string} )",
        "description": "Retrieves the feed link for a category."
    },
    "Function: get_category_link": {
        "prefix": "get_category_link",
        "body": "get_category_link( ${1:\\$category:integer|object} )",
        "description": "Retrieve category link URL."
    },
    "Function: get_category_parents": {
        "prefix": "get_category_parents",
        "body": "get_category_parents( ${1:\\$id:integer}, ${2:\\$link:boolean}, ${3:\\$separator:string}, ${4:\\$nicename:boolean}, ${5:\\$deprecated:array} )",
        "description": "Retrieve category parents with separator."
    },
    "Function: get_category_rss_link": {
        "prefix": "get_category_rss_link",
        "body": "get_category_rss_link( ${1:\\$echo:boolean}, ${2:\\$cat_ID:integer} )",
        "description": "Print/Return link to category RSS2 feed."
    },
    "Function: get_category_template": {
        "prefix": "get_category_template",
        "body": "get_category_template(  )",
        "description": "Retrieve path of category template in current or parent template."
    },
    "Function: get_category_to_edit": {
        "prefix": "get_category_to_edit",
        "body": "get_category_to_edit( ${1:\\$id:integer} )",
        "description": "Get category object for given ID and &#039;edit&#039; filter context."
    },
    "Function: get_catname": {
        "prefix": "get_catname",
        "body": "get_catname( ${1:\\$cat_ID:integer} )",
        "description": "Retrieve the category name by the category ID."
    },
    "Function: get_children": {
        "prefix": "get_children",
        "body": "get_children( ${1:\\$args:mixed}, ${2:\\$output:string} )",
        "description": "Retrieve all children of the post parent ID."
    },
    "Function: get_clean_basedomain": {
        "prefix": "get_clean_basedomain",
        "body": "get_clean_basedomain(  )",
        "description": "Get base domain of network."
    },
    "Function: get_cli_args": {
        "prefix": "get_cli_args",
        "body": "get_cli_args( ${1:\\$param:string}, ${2:\\$required:boolean} )",
        "description": "Returns value of command line params."
    },
    "Function: get_column_headers": {
        "prefix": "get_column_headers",
        "body": "get_column_headers( ${1:\\$screen:string|WP_Screen} )",
        "description": "Get the column headers for a screen"
    },
    "Function: get_comment": {
        "prefix": "get_comment",
        "body": "get_comment( ${1:\\$comment:WP_Comment|string|integer|null}, ${2:\\$output:string} )",
        "description": "Retrieves comment data given a comment ID or comment object."
    },
    "Function: get_comment_author": {
        "prefix": "get_comment_author",
        "body": "get_comment_author( ${1:\\$comment_ID:integer|WP_Comment} )",
        "description": "Retrieve the author of the current comment."
    },
    "Function: get_comment_author_email": {
        "prefix": "get_comment_author_email",
        "body": "get_comment_author_email( ${1:\\$comment_ID:integer|WP_Comment} )",
        "description": "Retrieve the email of the author of the current comment."
    },
    "Function: get_comment_author_email_link": {
        "prefix": "get_comment_author_email_link",
        "body": "get_comment_author_email_link( ${1:\\$linktext:string}, ${2:\\$before:string}, ${3:\\$after:string}, ${4:\\$comment:integer|WP_Comment|null} )",
        "description": "Return the html email link to the author of the current comment."
    },
    "Function: get_comment_author_IP": {
        "prefix": "get_comment_author_IP",
        "body": "get_comment_author_IP( ${1:\\$comment_ID:integer|WP_Comment} )",
        "description": "Retrieve the IP address of the author of the current comment."
    },
    "Function: get_comment_author_link": {
        "prefix": "get_comment_author_link",
        "body": "get_comment_author_link( ${1:\\$comment_ID:integer|WP_Comment} )",
        "description": "Retrieve the HTML link to the URL of the author of the current comment."
    },
    "Function: get_comment_author_rss": {
        "prefix": "get_comment_author_rss",
        "body": "get_comment_author_rss(  )",
        "description": "Retrieve the current comment author for use in the feeds."
    },
    "Function: get_comment_author_url": {
        "prefix": "get_comment_author_url",
        "body": "get_comment_author_url( ${1:\\$comment_ID:integer|WP_Comment} )",
        "description": "Retrieve the url of the author of the current comment."
    },
    "Function: get_comment_author_url_link": {
        "prefix": "get_comment_author_url_link",
        "body": "get_comment_author_url_link( ${1:\\$linktext:string}, ${2:\\$before:string}, ${3:\\$after:string}, ${4:\\$comment:integer|WP_Comment} )",
        "description": "Retrieves the HTML link of the url of the author of the current comment."
    },
    "Function: get_comment_class": {
        "prefix": "get_comment_class",
        "body": "get_comment_class( ${1:\\$class:string|array}, ${2:\\$comment_id:integer|WP_Comment|null}, ${3:\\$post_id:integer|WP_Post|null} )",
        "description": "Returns the classes for the comment div as an array."
    },
    "Function: get_comment_count": {
        "prefix": "get_comment_count",
        "body": "get_comment_count( ${1:\\$post_id:integer} )",
        "description": "The amount of comments in a post or total comments."
    },
    "Function: get_comment_date": {
        "prefix": "get_comment_date",
        "body": "get_comment_date( ${1:\\$d:string}, ${2:\\$comment_ID:integer|WP_Comment} )",
        "description": "Retrieve the comment date of the current comment."
    },
    "Function: get_comment_excerpt": {
        "prefix": "get_comment_excerpt",
        "body": "get_comment_excerpt( ${1:\\$comment_ID:integer|WP_Comment} )",
        "description": "Retrieve the excerpt of the current comment."
    },
    "Function: get_comment_guid": {
        "prefix": "get_comment_guid",
        "body": "get_comment_guid( ${1:\\$comment_id:integer|WP_Comment|null} )",
        "description": "Retrieve the feed GUID for the current comment."
    },
    "Function: get_comment_ID": {
        "prefix": "get_comment_ID",
        "body": "get_comment_ID(  )",
        "description": "Retrieve the comment id of the current comment."
    },
    "Function: get_comment_id_fields": {
        "prefix": "get_comment_id_fields",
        "body": "get_comment_id_fields( ${1:\\$id:integer} )",
        "description": "Retrieve hidden input HTML for replying to comments."
    },
    "Function: get_comment_link": {
        "prefix": "get_comment_link",
        "body": "get_comment_link( ${1:\\$comment:WP_Comment|integer|null}, ${2:\\$args:array} )",
        "description": "Retrieve the link to a given comment."
    },
    "Function: get_comment_meta": {
        "prefix": "get_comment_meta",
        "body": "get_comment_meta( ${1:\\$comment_id:integer}, ${2:\\$key:string}, ${3:\\$single:boolean} )",
        "description": "Retrieve comment meta field for a comment."
    },
    "Function: get_comment_pages_count": {
        "prefix": "get_comment_pages_count",
        "body": "get_comment_pages_count( ${1:\\$comments:array|null}, ${2:\\$per_page:integer|null}, ${3:\\$threaded:boolean|null} )",
        "description": "Calculate the total number of comment pages."
    },
    "Function: get_comment_reply_link": {
        "prefix": "get_comment_reply_link",
        "body": "get_comment_reply_link( ${1:\\$args:array}, ${2:\\$comment:integer|WP_Comment|null}, ${3:\\$post:integer|WP_Post|null} )",
        "description": "Retrieve HTML content for reply to comment link."
    },
    "Function: get_comment_statuses": {
        "prefix": "get_comment_statuses",
        "body": "get_comment_statuses(  )",
        "description": "Retrieve all of the WordPress supported comment statuses."
    },
    "Function: get_comment_text": {
        "prefix": "get_comment_text",
        "body": "get_comment_text( ${1:\\$comment_ID:integer|WP_Comment}, ${2:\\$args:array} )",
        "description": "Retrieve the text of the current comment."
    },
    "Function: get_comment_time": {
        "prefix": "get_comment_time",
        "body": "get_comment_time( ${1:\\$d:string}, ${2:\\$gmt:boolean}, ${3:\\$translate:boolean} )",
        "description": "Retrieve the comment time of the current comment."
    },
    "Function: get_comment_to_edit": {
        "prefix": "get_comment_to_edit",
        "body": "get_comment_to_edit( ${1:\\$id:integer} )",
        "description": "Returns a WP_Comment object based on comment ID."
    },
    "Function: get_comment_type": {
        "prefix": "get_comment_type",
        "body": "get_comment_type( ${1:\\$comment_ID:integer|WP_Comment} )",
        "description": "Retrieve the comment type of the current comment."
    },
    "Function: get_commentdata": {
        "prefix": "get_commentdata",
        "body": "get_commentdata( ${1:\\$comment_ID:integer}, ${2:\\$no_cache:integer}, ${3:\\$include_unapproved:boolean} )",
        "description": "Retrieve an array of comment data about comment $comment_ID."
    },
    "Function: get_comments": {
        "prefix": "get_comments",
        "body": "get_comments( ${1:\\$args:string|array} )",
        "description": "Retrieve a list of comments."
    },
    "Function: get_comments_link": {
        "prefix": "get_comments_link",
        "body": "get_comments_link( ${1:\\$post_id:integer|WP_Post} )",
        "description": "Retrieves the link to the current post comments."
    },
    "Function: get_comments_number": {
        "prefix": "get_comments_number",
        "body": "get_comments_number( ${1:\\$post_id:integer|WP_Post} )",
        "description": "Retrieves the amount of comments a post has."
    },
    "Function: get_comments_number_text": {
        "prefix": "get_comments_number_text",
        "body": "get_comments_number_text( ${1:\\$zero:string}, ${2:\\$one:string}, ${3:\\$more:string} )",
        "description": "Display the language string for the number of comments the current post has."
    },
    "Function: get_comments_pagenum_link": {
        "prefix": "get_comments_pagenum_link",
        "body": "get_comments_pagenum_link( ${1:\\$pagenum:integer}, ${2:\\$max_page:integer} )",
        "description": "Retrieves the comments page number link."
    },
    "Function: get_comments_popup_template": {
        "prefix": "get_comments_popup_template",
        "body": "get_comments_popup_template(  )",
        "description": "Retrieve path of comment popup template in current or parent template."
    },
    "Function: get_compat_media_markup": {
        "prefix": "get_compat_media_markup",
        "body": "get_compat_media_markup( ${1:\\$attachment_id:integer}, ${2:\\$args:array|null} )",
        "description": ""
    },
    "Function: get_core_checksums": {
        "prefix": "get_core_checksums",
        "body": "get_core_checksums( ${1:\\$version:string}, ${2:\\$locale:string} )",
        "description": "Gets and caches the checksums for the given version of WordPress."
    },
    "Function: get_core_updates": {
        "prefix": "get_core_updates",
        "body": "get_core_updates( ${1:\\$options:array} )",
        "description": "Get available core updates."
    },
    "Function: get_current_blog_id": {
        "prefix": "get_current_blog_id",
        "body": "get_current_blog_id(  )",
        "description": "Retrieve the current site ID."
    },
    "Function: get_current_network_id": {
        "prefix": "get_current_network_id",
        "body": "get_current_network_id(  )",
        "description": "Retrieves the current network ID."
    },
    "Function: get_current_screen": {
        "prefix": "get_current_screen",
        "body": "get_current_screen(  )",
        "description": "Get the current screen object"
    },
    "Function: get_current_site": {
        "prefix": "get_current_site",
        "body": "get_current_site(  )",
        "description": "Get the current network."
    },
    "Function: get_current_site_name": {
        "prefix": "get_current_site_name",
        "body": "get_current_site_name( ${1:\\$current_site:object} )",
        "description": "This deprecated function formerly set the site_name property of the $current_site object."
    },
    "Function: get_current_theme": {
        "prefix": "get_current_theme",
        "body": "get_current_theme(  )",
        "description": "Retrieve current theme name."
    },
    "Function: get_current_user_id": {
        "prefix": "get_current_user_id",
        "body": "get_current_user_id(  )",
        "description": "Get the current user&#039;s ID"
    },
    "Function: get_currentuserinfo": {
        "prefix": "get_currentuserinfo",
        "body": "get_currentuserinfo(  )",
        "description": "Populate global variables with information about the currently logged in user."
    },
    "Function: get_custom_header": {
        "prefix": "get_custom_header",
        "body": "get_custom_header(  )",
        "description": "Get the header image data."
    },
    "Function: get_custom_header_markup": {
        "prefix": "get_custom_header_markup",
        "body": "get_custom_header_markup(  )",
        "description": "Retrieve the markup for a custom header."
    },
    "Function: get_custom_logo": {
        "prefix": "get_custom_logo",
        "body": "get_custom_logo( ${1:\\$blog_id:integer} )",
        "description": "Returns a custom logo, linked to home."
    },
    "Function: get_dashboard_blog": {
        "prefix": "get_dashboard_blog",
        "body": "get_dashboard_blog(  )",
        "description": "Get the &quot;dashboard blog&quot;, the blog where users without a blog edit their profile data."
    },
    "Function: get_dashboard_url": {
        "prefix": "get_dashboard_url",
        "body": "get_dashboard_url( ${1:\\$user_id:integer}, ${2:\\$path:string}, ${3:\\$scheme:string} )",
        "description": "Retrieves the URL to the user&#039;s dashboard."
    },
    "Function: get_date_from_gmt": {
        "prefix": "get_date_from_gmt",
        "body": "get_date_from_gmt( ${1:\\$string:string}, ${2:\\$format:string} )",
        "description": "Converts a GMT date into the correct format for the blog."
    },
    "Function: get_date_template": {
        "prefix": "get_date_template",
        "body": "get_date_template(  )",
        "description": "Retrieve path of date template in current or parent template."
    },
    "Function: get_day_link": {
        "prefix": "get_day_link",
        "body": "get_day_link( ${1:\\$year:boolean|integer}, ${2:\\$month:boolean|integer}, ${3:\\$day:boolean|integer} )",
        "description": "Retrieves the permalink for the day archives with year and month."
    },
    "Function: get_default_comment_status": {
        "prefix": "get_default_comment_status",
        "body": "get_default_comment_status( ${1:\\$post_type:string}, ${2:\\$comment_type:string} )",
        "description": "Gets the default comment status for a post type."
    },
    "Function: get_default_feed": {
        "prefix": "get_default_feed",
        "body": "get_default_feed(  )",
        "description": "Retrieve the default feed."
    },
    "Function: get_default_link_to_edit": {
        "prefix": "get_default_link_to_edit",
        "body": "get_default_link_to_edit(  )",
        "description": "Retrieves the default link for editing."
    },
    "Function: get_default_page_to_edit": {
        "prefix": "get_default_page_to_edit",
        "body": "get_default_page_to_edit(  )",
        "description": "Gets the default page information to use."
    },
    "Function: get_default_post_to_edit": {
        "prefix": "get_default_post_to_edit",
        "body": "get_default_post_to_edit( ${1:\\$post_type:string}, ${2:\\$create_in_db:boolean} )",
        "description": "Default post information to use when populating the &quot;Write Post&quot; form."
    },
    "Function: get_delete_post_link": {
        "prefix": "get_delete_post_link",
        "body": "get_delete_post_link( ${1:\\$id:integer|WP_Post}, ${2:\\$deprecated:string}, ${3:\\$force_delete:boolean} )",
        "description": "Retrieves the delete posts link for post."
    },
    "Function: get_dirsize": {
        "prefix": "get_dirsize",
        "body": "get_dirsize( ${1:\\$directory:string} )",
        "description": "Get the size of a directory."
    },
    "Function: get_dropins": {
        "prefix": "get_dropins",
        "body": "get_dropins(  )",
        "description": "Check the wp-content directory and retrieve all drop-ins with any plugin data."
    },
    "Function: get_edit_bookmark_link": {
        "prefix": "get_edit_bookmark_link",
        "body": "get_edit_bookmark_link( ${1:\\$link:integer|stdClass} )",
        "description": "Displays the edit bookmark link."
    },
    "Function: get_edit_comment_link": {
        "prefix": "get_edit_comment_link",
        "body": "get_edit_comment_link( ${1:\\$comment_id:integer|WP_Comment} )",
        "description": "Retrieves the edit comment link."
    },
    "Function: get_edit_post_link": {
        "prefix": "get_edit_post_link",
        "body": "get_edit_post_link( ${1:\\$id:integer|WP_Post}, ${2:\\$context:string} )",
        "description": "Retrieves the edit post link for post."
    },
    "Function: get_edit_profile_url": {
        "prefix": "get_edit_profile_url",
        "body": "get_edit_profile_url( ${1:\\$user_id:integer}, ${2:\\$scheme:string} )",
        "description": "Retrieves the URL to the user&#039;s profile editor."
    },
    "Function: get_edit_tag_link": {
        "prefix": "get_edit_tag_link",
        "body": "get_edit_tag_link( ${1:\\$tag_id:integer}, ${2:\\$taxonomy:string} )",
        "description": "Retrieves the edit link for a tag."
    },
    "Function: get_edit_term_link": {
        "prefix": "get_edit_term_link",
        "body": "get_edit_term_link( ${1:\\$term_id:integer}, ${2:\\$taxonomy:string}, ${3:\\$object_type:string} )",
        "description": "Retrieves the URL for editing a given term."
    },
    "Function: get_edit_user_link": {
        "prefix": "get_edit_user_link",
        "body": "get_edit_user_link( ${1:\\$user_id:integer|null} )",
        "description": "Retrieves the edit user link."
    },
    "Function: get_editable_authors": {
        "prefix": "get_editable_authors",
        "body": "get_editable_authors( ${1:\\$user_id:integer} )",
        "description": "Gets author users who can edit posts."
    },
    "Function: get_editable_roles": {
        "prefix": "get_editable_roles",
        "body": "get_editable_roles(  )",
        "description": "Fetch a filtered list of user roles that the current user is allowed to edit."
    },
    "Function: get_editable_user_ids": {
        "prefix": "get_editable_user_ids",
        "body": "get_editable_user_ids( ${1:\\$user_id:integer}, ${2:\\$exclude_zeros:boolean}, ${3:\\$post_type:} )",
        "description": "Gets the IDs of any users who can edit posts."
    },
    "Function: get_editor_stylesheets": {
        "prefix": "get_editor_stylesheets",
        "body": "get_editor_stylesheets(  )",
        "description": "Retrieve any registered editor stylesheets"
    },
    "Function: get_embed_template": {
        "prefix": "get_embed_template",
        "body": "get_embed_template(  )",
        "description": "Retrieves an embed template path in the current or parent template."
    },
    "Function: get_enclosed": {
        "prefix": "get_enclosed",
        "body": "get_enclosed( ${1:\\$post_id:integer} )",
        "description": "Retrieve enclosures already enclosed for a post."
    },
    "Function: get_extended": {
        "prefix": "get_extended",
        "body": "get_extended( ${1:\\$post:string} )",
        "description": "Get extended entry info (&lt;!--more--&gt;)."
    },
    "Function: get_feed_link": {
        "prefix": "get_feed_link",
        "body": "get_feed_link( ${1:\\$feed:string} )",
        "description": "Retrieves the permalink for the feed type."
    },
    "Function: get_file": {
        "prefix": "get_file",
        "body": "get_file( ${1:\\$path:} )",
        "description": ""
    },
    "Function: get_file_data": {
        "prefix": "get_file_data",
        "body": "get_file_data( ${1:\\$file:string}, ${2:\\$default_headers:array}, ${3:\\$context:string} )",
        "description": "Retrieve metadata from a file."
    },
    "Function: get_file_description": {
        "prefix": "get_file_description",
        "body": "get_file_description( ${1:\\$file:string} )",
        "description": "Get the description for standard WordPress theme files and other various standard WordPress files"
    },
    "Function: get_filesystem_method": {
        "prefix": "get_filesystem_method",
        "body": "get_filesystem_method( ${1:\\$args:array}, ${2:\\$context:string}, ${3:\\$allow_relaxed_file_ownership:boolean} )",
        "description": "Determines which method to use for reading, writing, modifying, or deleting files on the filesystem."
    },
    "Function: get_footer": {
        "prefix": "get_footer",
        "body": "get_footer( ${1:\\$name:string|null} )",
        "description": "Load footer template."
    },
    "Function: get_front_page_template": {
        "prefix": "get_front_page_template",
        "body": "get_front_page_template(  )",
        "description": "Retrieve path of front page template in current or parent template."
    },
    "Function: get_gmt_from_date": {
        "prefix": "get_gmt_from_date",
        "body": "get_gmt_from_date( ${1:\\$string:string}, ${2:\\$format:string} )",
        "description": "Returns a date in the GMT equivalent."
    },
    "Function: get_header": {
        "prefix": "get_header",
        "body": "get_header( ${1:\\$name:string|null} )",
        "description": "Load header template."
    },
    "Function: get_header_image": {
        "prefix": "get_header_image",
        "body": "get_header_image(  )",
        "description": "Retrieve header image for custom header."
    },
    "Function: get_header_image_tag": {
        "prefix": "get_header_image_tag",
        "body": "get_header_image_tag( ${1:\\$attr:array} )",
        "description": "Create image tag markup for a custom header image."
    },
    "Function: get_header_textcolor": {
        "prefix": "get_header_textcolor",
        "body": "get_header_textcolor(  )",
        "description": "Retrieves the custom header text color in 3- or 6-digit hexadecimal form."
    },
    "Function: get_header_video_settings": {
        "prefix": "get_header_video_settings",
        "body": "get_header_video_settings(  )",
        "description": "Retrieve header video settings."
    },
    "Function: get_header_video_url": {
        "prefix": "get_header_video_url",
        "body": "get_header_video_url(  )",
        "description": "Retrieve header video URL for custom header."
    },
    "Function: get_hidden_columns": {
        "prefix": "get_hidden_columns",
        "body": "get_hidden_columns( ${1:\\$screen:string|WP_Screen} )",
        "description": "Get a list of hidden columns."
    },
    "Function: get_hidden_meta_boxes": {
        "prefix": "get_hidden_meta_boxes",
        "body": "get_hidden_meta_boxes( ${1:\\$screen:string|WP_Screen} )",
        "description": "Get Hidden Meta Boxes"
    },
    "Function: get_home_path": {
        "prefix": "get_home_path",
        "body": "get_home_path(  )",
        "description": "Get the absolute filesystem path to the root of the WordPress installation"
    },
    "Function: get_home_template": {
        "prefix": "get_home_template",
        "body": "get_home_template(  )",
        "description": "Retrieve path of home template in current or parent template."
    },
    "Function: get_home_url": {
        "prefix": "get_home_url",
        "body": "get_home_url( ${1:\\$blog_id:integer|null}, ${2:\\$path:string}, ${3:\\$scheme:string|null} )",
        "description": "Retrieves the URL for a given site where the front end is accessible."
    },
    "Function: get_html_split_regex": {
        "prefix": "get_html_split_regex",
        "body": "get_html_split_regex(  )",
        "description": "Retrieve the regular expression for an HTML element."
    },
    "Function: get_http_origin": {
        "prefix": "get_http_origin",
        "body": "get_http_origin(  )",
        "description": "Get the HTTP Origin of the current request."
    },
    "Function: get_id_from_blogname": {
        "prefix": "get_id_from_blogname",
        "body": "get_id_from_blogname( ${1:\\$slug:string} )",
        "description": "Retrieves a sites ID given its (subdomain or directory) slug."
    },
    "Function: get_image_send_to_editor": {
        "prefix": "get_image_send_to_editor",
        "body": "get_image_send_to_editor( ${1:\\$id:integer}, ${2:\\$caption:string}, ${3:\\$title:string}, ${4:\\$align:string}, ${5:\\$url:string}, ${6:\\$rel:boolean|string}, ${7:\\$size:string|array}, ${8:\\$alt:string} )",
        "description": "Retrieves the image HTML to send to the editor."
    },
    "Function: get_image_tag": {
        "prefix": "get_image_tag",
        "body": "get_image_tag( ${1:\\$id:integer}, ${2:\\$alt:string}, ${3:\\$title:string}, ${4:\\$align:string}, ${5:\\$size:string|array} )",
        "description": "Gets an img tag for an image attachment, scaling it down if requested."
    },
    "Function: get_importers": {
        "prefix": "get_importers",
        "body": "get_importers(  )",
        "description": "Retrieve list of importers."
    },
    "Function: get_index_rel_link": {
        "prefix": "get_index_rel_link",
        "body": "get_index_rel_link(  )",
        "description": "Get site index relational link."
    },
    "Function: get_index_template": {
        "prefix": "get_index_template",
        "body": "get_index_template(  )",
        "description": "Retrieve path of index template in current or parent template."
    },
    "Function: get_inline_data": {
        "prefix": "get_inline_data",
        "body": "get_inline_data( ${1:\\$post:WP_Post} )",
        "description": "Adds hidden fields with the data for use in the inline editor for posts and pages."
    },
    "Function: get_intermediate_image_sizes": {
        "prefix": "get_intermediate_image_sizes",
        "body": "get_intermediate_image_sizes(  )",
        "description": "Gets the available intermediate image sizes."
    },
    "Function: get_language_attributes": {
        "prefix": "get_language_attributes",
        "body": "get_language_attributes( ${1:\\$doctype:string} )",
        "description": "Gets the language attributes for the html tag."
    },
    "Function: get_last_updated": {
        "prefix": "get_last_updated",
        "body": "get_last_updated( ${1:\\$deprecated:mixed}, ${2:\\$start:integer}, ${3:\\$quantity:integer} )",
        "description": "Get a list of most recently updated blogs."
    },
    "Function: get_lastcommentmodified": {
        "prefix": "get_lastcommentmodified",
        "body": "get_lastcommentmodified( ${1:\\$timezone:string} )",
        "description": "The date the last comment was modified."
    },
    "Function: get_lastpostdate": {
        "prefix": "get_lastpostdate",
        "body": "get_lastpostdate( ${1:\\$timezone:string}, ${2:\\$post_type:string} )",
        "description": "Retrieve the date that the last post was published."
    },
    "Function: get_lastpostmodified": {
        "prefix": "get_lastpostmodified",
        "body": "get_lastpostmodified( ${1:\\$timezone:string}, ${2:\\$post_type:string} )",
        "description": "Get the timestamp of the last time any post was modified."
    },
    "Function: get_link": {
        "prefix": "get_link",
        "body": "get_link( ${1:\\$bookmark_id:integer}, ${2:\\$output:string}, ${3:\\$filter:string} )",
        "description": "Retrieves bookmark data based on ID."
    },
    "Function: get_link_to_edit": {
        "prefix": "get_link_to_edit",
        "body": "get_link_to_edit( ${1:\\$link:integer|stdClass} )",
        "description": "Retrieves link data based on its ID."
    },
    "Function: get_linkcatname": {
        "prefix": "get_linkcatname",
        "body": "get_linkcatname( ${1:\\$id:integer} )",
        "description": "Gets the name of category by id."
    },
    "Function: get_linkobjects": {
        "prefix": "get_linkobjects",
        "body": "get_linkobjects( ${1:\\$category:integer}, ${2:\\$orderby:string}, ${3:\\$limit:integer} )",
        "description": "Gets an array of link objects associated with category n."
    },
    "Function: get_linkobjectsbyname": {
        "prefix": "get_linkobjectsbyname",
        "body": "get_linkobjectsbyname( ${1:\\$cat_name:string}, ${2:\\$orderby:string}, ${3:\\$limit:integer} )",
        "description": "Gets an array of link objects associated with category $cat_name."
    },
    "Function: get_linkrating": {
        "prefix": "get_linkrating",
        "body": "get_linkrating( ${1:\\$link:object} )",
        "description": "Legacy function that retrieved the value of a link&#039;s link_rating field."
    },
    "Function: get_links": {
        "prefix": "get_links",
        "body": "get_links( ${1:\\$category:integer}, ${2:\\$before:string}, ${3:\\$after:string}, ${4:\\$between:string}, ${5:\\$show_images:boolean}, ${6:\\$orderby:string}, ${7:\\$show_description:boolean}, ${8:\\$show_rating:boolean}, ${9:\\$limit:integer}, ${10:\\$show_updated:integer}, ${11:\\$echo:boolean} )",
        "description": "Gets the links associated with category by id."
    },
    "Function: get_links_list": {
        "prefix": "get_links_list",
        "body": "get_links_list( ${1:\\$order:string} )",
        "description": "Output entire list of links by category."
    },
    "Function: get_links_withrating": {
        "prefix": "get_links_withrating",
        "body": "get_links_withrating( ${1:\\$category:integer}, ${2:\\$before:string}, ${3:\\$after:string}, ${4:\\$between:string}, ${5:\\$show_images:boolean}, ${6:\\$orderby:string}, ${7:\\$show_description:boolean}, ${8:\\$limit:integer}, ${9:\\$show_updated:integer} )",
        "description": "Gets the links associated with category n and display rating stars/chars."
    },
    "Function: get_linksbyname": {
        "prefix": "get_linksbyname",
        "body": "get_linksbyname( ${1:\\$cat_name:string}, ${2:\\$before:string}, ${3:\\$after:string}, ${4:\\$between:string}, ${5:\\$show_images:boolean}, ${6:\\$orderby:string}, ${7:\\$show_description:boolean}, ${8:\\$show_rating:boolean}, ${9:\\$limit:integer}, ${10:\\$show_updated:integer} )",
        "description": "Gets the links associated with category $cat_name."
    },
    "Function: get_linksbyname_withrating": {
        "prefix": "get_linksbyname_withrating",
        "body": "get_linksbyname_withrating( ${1:\\$cat_name:string}, ${2:\\$before:string}, ${3:\\$after:string}, ${4:\\$between:string}, ${5:\\$show_images:boolean}, ${6:\\$orderby:string}, ${7:\\$show_description:boolean}, ${8:\\$limit:integer}, ${9:\\$show_updated:integer} )",
        "description": "Gets the links associated with category &#039;cat_name&#039; and display rating stars/chars."
    },
    "Function: get_locale": {
        "prefix": "get_locale",
        "body": "get_locale(  )",
        "description": "Retrieves the current locale."
    },
    "Function: get_locale_stylesheet_uri": {
        "prefix": "get_locale_stylesheet_uri",
        "body": "get_locale_stylesheet_uri(  )",
        "description": "Retrieves the localized stylesheet URI."
    },
    "Function: get_main_network_id": {
        "prefix": "get_main_network_id",
        "body": "get_main_network_id(  )",
        "description": "Get the main network ID."
    },
    "Function: get_main_site_id": {
        "prefix": "get_main_site_id",
        "body": "get_main_site_id( ${1:\\$network_id:integer|null} )",
        "description": "Gets the main site ID."
    },
    "Function: get_media_embedded_in_content": {
        "prefix": "get_media_embedded_in_content",
        "body": "get_media_embedded_in_content( ${1:\\$content:string}, ${2:\\$types:array|null} )",
        "description": "Check the content blob for an audio, video, object, embed, or iframe tags."
    },
    "Function: get_media_item": {
        "prefix": "get_media_item",
        "body": "get_media_item( ${1:\\$attachment_id:integer}, ${2:\\$args:string|array|null} )",
        "description": "Retrieve HTML form for modifying the image attachment."
    },
    "Function: get_media_items": {
        "prefix": "get_media_items",
        "body": "get_media_items( ${1:\\$post_id:integer}, ${2:\\$errors:array} )",
        "description": "Retrieve HTML for media items of post gallery."
    },
    "Function: get_meta_keys": {
        "prefix": "get_meta_keys",
        "body": "get_meta_keys(  )",
        "description": "Get a list of previously defined keys."
    },
    "Function: get_meta_sql": {
        "prefix": "get_meta_sql",
        "body": "get_meta_sql( ${1:\\$meta_query:array}, ${2:\\$type:string}, ${3:\\$primary_table:string}, ${4:\\$primary_id_column:string}, ${5:\\$context:object|null} )",
        "description": "Given a meta query, generates SQL clauses to be appended to a main query."
    },
    "Function: get_metadata": {
        "prefix": "get_metadata",
        "body": "get_metadata( ${1:\\$meta_type:string}, ${2:\\$object_id:integer}, ${3:\\$meta_key:string}, ${4:\\$single:boolean} )",
        "description": "Retrieve metadata for the specified object."
    },
    "Function: get_metadata_by_mid": {
        "prefix": "get_metadata_by_mid",
        "body": "get_metadata_by_mid( ${1:\\$meta_type:string}, ${2:\\$meta_id:integer} )",
        "description": "Get meta data by meta ID"
    },
    "Function: get_month_link": {
        "prefix": "get_month_link",
        "body": "get_month_link( ${1:\\$year:boolean|integer}, ${2:\\$month:boolean|integer} )",
        "description": "Retrieves the permalink for the month archives with year."
    },
    "Function: get_most_active_blogs": {
        "prefix": "get_most_active_blogs",
        "body": "get_most_active_blogs( ${1:\\$num:integer}, ${2:\\$display:boolean} )",
        "description": "Deprecated functionality to retrieve a list of the most active sites."
    },
    "Function: get_most_recent_post_of_user": {
        "prefix": "get_most_recent_post_of_user",
        "body": "get_most_recent_post_of_user( ${1:\\$user_id:integer} )",
        "description": "Get a user&#039;s most recent post."
    },
    "Function: get_mu_plugins": {
        "prefix": "get_mu_plugins",
        "body": "get_mu_plugins(  )",
        "description": "Check the mu-plugins directory and retrieve all mu-plugin files with any plugin data."
    },
    "Function: get_nav_menu_locations": {
        "prefix": "get_nav_menu_locations",
        "body": "get_nav_menu_locations(  )",
        "description": "Retrieves all registered navigation menu locations and the menus assigned to them."
    },
    "Function: get_network": {
        "prefix": "get_network",
        "body": "get_network( ${1:\\$network:WP_Network|integer|null} )",
        "description": "Retrieves network data given a network ID or network object."
    },
    "Function: get_network_option": {
        "prefix": "get_network_option",
        "body": "get_network_option( ${1:\\$network_id:integer}, ${2:\\$option:string}, ${3:\\$default:mixed} )",
        "description": "Retrieve a network&#039;s option value based on the option name."
    },
    "Function: get_networks": {
        "prefix": "get_networks",
        "body": "get_networks( ${1:\\$args:string|array} )",
        "description": "Retrieves a list of networks."
    },
    "Function: get_next_comments_link": {
        "prefix": "get_next_comments_link",
        "body": "get_next_comments_link( ${1:\\$label:string}, ${2:\\$max_page:integer} )",
        "description": "Retrieves the link to the next comments page."
    },
    "Function: get_next_post": {
        "prefix": "get_next_post",
        "body": "get_next_post( ${1:\\$in_same_term:boolean}, ${2:\\$excluded_terms:array|string}, ${3:\\$taxonomy:string} )",
        "description": "Retrieves the next post that is adjacent to the current post."
    },
    "Function: get_next_post_link": {
        "prefix": "get_next_post_link",
        "body": "get_next_post_link( ${1:\\$format:string}, ${2:\\$link:string}, ${3:\\$in_same_term:boolean}, ${4:\\$excluded_terms:array|string}, ${5:\\$taxonomy:string} )",
        "description": "Retrieves the next post link that is adjacent to the current post."
    },
    "Function: get_next_posts_link": {
        "prefix": "get_next_posts_link",
        "body": "get_next_posts_link( ${1:\\$label:string|null}, ${2:\\$max_page:integer} )",
        "description": "Retrieves the next posts page link."
    },
    "Function: get_next_posts_page_link": {
        "prefix": "get_next_posts_page_link",
        "body": "get_next_posts_page_link( ${1:\\$max_page:integer} )",
        "description": "Retrieves the next posts page link."
    },
    "Function: get_nonauthor_user_ids": {
        "prefix": "get_nonauthor_user_ids",
        "body": "get_nonauthor_user_ids(  )",
        "description": "Gets all users who are not authors."
    },
    "Function: get_num_queries": {
        "prefix": "get_num_queries",
        "body": "get_num_queries(  )",
        "description": "Retrieve the number of database queries during the WordPress execution."
    },
    "Function: get_object_taxonomies": {
        "prefix": "get_object_taxonomies",
        "body": "get_object_taxonomies( ${1:\\$object:array|string|WP_Post}, ${2:\\$output:string} )",
        "description": "Return the names or objects of the taxonomies which are registered for the requested object or object type, such as a post object or post type name."
    },
    "Function: get_object_term_cache": {
        "prefix": "get_object_term_cache",
        "body": "get_object_term_cache( ${1:\\$id:integer}, ${2:\\$taxonomy:string} )",
        "description": "Retrieves the taxonomy relationship to the term object id."
    },
    "Function: get_objects_in_term": {
        "prefix": "get_objects_in_term",
        "body": "get_objects_in_term( ${1:\\$term_ids:integer|array}, ${2:\\$taxonomies:string|array}, ${3:\\$args:array|string} )",
        "description": "Retrieve object_ids of valid taxonomy and term."
    },
    "Function: get_oembed_endpoint_url": {
        "prefix": "get_oembed_endpoint_url",
        "body": "get_oembed_endpoint_url( ${1:\\$permalink:string}, ${2:\\$format:string} )",
        "description": "Retrieves the oEmbed endpoint URL for a given permalink."
    },
    "Function: get_oembed_response_data": {
        "prefix": "get_oembed_response_data",
        "body": "get_oembed_response_data( ${1:\\$post:WP_Post|integer}, ${2:\\$width:integer} )",
        "description": "Retrieves the oEmbed response data for a given post."
    },
    "Function: get_oembed_response_data_rich": {
        "prefix": "get_oembed_response_data_rich",
        "body": "get_oembed_response_data_rich( ${1:\\$data:array}, ${2:\\$post:WP_Post}, ${3:\\$width:integer}, ${4:\\$height:integer} )",
        "description": "Filters the oEmbed response data to return an iframe embed code."
    },
    "Function: get_option": {
        "prefix": "get_option",
        "body": "get_option( ${1:\\$option:string}, ${2:\\$default:mixed} )",
        "description": "Retrieves an option value based on an option name."
    },
    "Function: get_others_drafts": {
        "prefix": "get_others_drafts",
        "body": "get_others_drafts( ${1:\\$user_id:integer} )",
        "description": "Retrieve drafts from other users."
    },
    "Function: get_others_pending": {
        "prefix": "get_others_pending",
        "body": "get_others_pending( ${1:\\$user_id:integer} )",
        "description": "Retrieve pending review posts from other users."
    },
    "Function: get_others_unpublished_posts": {
        "prefix": "get_others_unpublished_posts",
        "body": "get_others_unpublished_posts( ${1:\\$user_id:integer}, ${2:\\$type:string} )",
        "description": "Retrieves editable posts from other users."
    },
    "Function: get_page": {
        "prefix": "get_page",
        "body": "get_page( ${1:\\$page:mixed}, ${2:\\$output:string}, ${3:\\$filter:string} )",
        "description": "Retrieves page data given a page ID or page object."
    },
    "Function: get_page_by_path": {
        "prefix": "get_page_by_path",
        "body": "get_page_by_path( ${1:\\$page_path:string}, ${2:\\$output:string}, ${3:\\$post_type:string|array} )",
        "description": "Retrieves a page given its path."
    },
    "Function: get_page_by_title": {
        "prefix": "get_page_by_title",
        "body": "get_page_by_title( ${1:\\$page_title:string}, ${2:\\$output:string}, ${3:\\$post_type:string|array} )",
        "description": "Retrieve a page given its title."
    },
    "Function: get_page_children": {
        "prefix": "get_page_children",
        "body": "get_page_children( ${1:\\$page_id:integer}, ${2:\\$pages:array} )",
        "description": "Identify descendants of a given page ID in a list of page objects."
    },
    "Function: get_page_hierarchy": {
        "prefix": "get_page_hierarchy",
        "body": "get_page_hierarchy( ${1:\\$pages:array}, ${2:\\$page_id:integer} )",
        "description": "Order the pages with children under parents in a flat list."
    },
    "Function: get_page_link": {
        "prefix": "get_page_link",
        "body": "get_page_link( ${1:\\$post:integer|WP_Post}, ${2:\\$leavename:boolean}, ${3:\\$sample:boolean} )",
        "description": "Retrieves the permalink for the current page or page ID."
    },
    "Function: get_page_of_comment": {
        "prefix": "get_page_of_comment",
        "body": "get_page_of_comment( ${1:\\$comment_ID:integer}, ${2:\\$args:array} )",
        "description": "Calculate what page number a comment will appear on for comment paging."
    },
    "Function: get_page_statuses": {
        "prefix": "get_page_statuses",
        "body": "get_page_statuses(  )",
        "description": "Retrieve all of the WordPress support page statuses."
    },
    "Function: get_page_template": {
        "prefix": "get_page_template",
        "body": "get_page_template(  )",
        "description": "Retrieve path of page template in current or parent template."
    },
    "Function: get_page_template_slug": {
        "prefix": "get_page_template_slug",
        "body": "get_page_template_slug( ${1:\\$post:integer|WP_Post|null} )",
        "description": "Get the specific template name for a given post."
    },
    "Function: get_page_templates": {
        "prefix": "get_page_templates",
        "body": "get_page_templates( ${1:\\$post:WP_Post|null}, ${2:\\$post_type:string} )",
        "description": "Get the Page Templates available in this theme"
    },
    "Function: get_page_uri": {
        "prefix": "get_page_uri",
        "body": "get_page_uri( ${1:\\$page:WP_Post|object|integer} )",
        "description": "Build the URI path for a page."
    },
    "Function: get_paged_template": {
        "prefix": "get_paged_template",
        "body": "get_paged_template(  )",
        "description": "Retrieve path of paged template in current or parent template."
    },
    "Function: get_pagenum_link": {
        "prefix": "get_pagenum_link",
        "body": "get_pagenum_link( ${1:\\$pagenum:integer}, ${2:\\$escape:boolean} )",
        "description": "Retrieves the link for a page number."
    },
    "Function: get_pages": {
        "prefix": "get_pages",
        "body": "get_pages( ${1:\\$args:array|string} )",
        "description": "Retrieve a list of pages (or hierarchical post type items)."
    },
    "Function: get_parent_post_rel_link": {
        "prefix": "get_parent_post_rel_link",
        "body": "get_parent_post_rel_link( ${1:\\$title:string} )",
        "description": "Get parent post relational link."
    },
    "Function: get_parent_theme_file_path": {
        "prefix": "get_parent_theme_file_path",
        "body": "get_parent_theme_file_path( ${1:\\$file:string} )",
        "description": "Retrieves the path of a file in the parent theme."
    },
    "Function: get_parent_theme_file_uri": {
        "prefix": "get_parent_theme_file_uri",
        "body": "get_parent_theme_file_uri( ${1:\\$file:string} )",
        "description": "Retrieves the URL of a file in the parent theme."
    },
    "Function: get_password_reset_key": {
        "prefix": "get_password_reset_key",
        "body": "get_password_reset_key( ${1:\\$user:WP_User} )",
        "description": "Creates, stores, then returns a password reset key for user."
    },
    "Function: get_pending_comments_num": {
        "prefix": "get_pending_comments_num",
        "body": "get_pending_comments_num( ${1:\\$post_id:integer|array} )",
        "description": "Get the number of pending comments on a post or posts"
    },
    "Function: get_permalink": {
        "prefix": "get_permalink",
        "body": "get_permalink( ${1:\\$post:integer|WP_Post}, ${2:\\$leavename:boolean} )",
        "description": "Retrieves the full permalink for the current post or post ID."
    },
    "Function: get_plugin_data": {
        "prefix": "get_plugin_data",
        "body": "get_plugin_data( ${1:\\$plugin_file:string}, ${2:\\$markup:boolean}, ${3:\\$translate:boolean} )",
        "description": "Parses the plugin contents to retrieve plugin&#039;s metadata."
    },
    "Function: get_plugin_files": {
        "prefix": "get_plugin_files",
        "body": "get_plugin_files( ${1:\\$plugin:string} )",
        "description": "Get a list of a plugin&#039;s files."
    },
    "Function: get_plugin_page_hook": {
        "prefix": "get_plugin_page_hook",
        "body": "get_plugin_page_hook( ${1:\\$plugin_page:string}, ${2:\\$parent_page:string} )",
        "description": ""
    },
    "Function: get_plugin_page_hookname": {
        "prefix": "get_plugin_page_hookname",
        "body": "get_plugin_page_hookname( ${1:\\$plugin_page:string}, ${2:\\$parent_page:string} )",
        "description": ""
    },
    "Function: get_plugin_updates": {
        "prefix": "get_plugin_updates",
        "body": "get_plugin_updates(  )",
        "description": ""
    },
    "Function: get_plugins": {
        "prefix": "get_plugins",
        "body": "get_plugins( ${1:\\$plugin_folder:string} )",
        "description": "Check the plugins directory and retrieve all plugin files with plugin data."
    },
    "Function: get_post": {
        "prefix": "get_post",
        "body": "get_post( ${1:\\$post:integer|WP_Post|null}, ${2:\\$output:string}, ${3:\\$filter:string} )",
        "description": "Retrieves post data given a post ID or post object."
    },
    "Function: get_post_ancestors": {
        "prefix": "get_post_ancestors",
        "body": "get_post_ancestors( ${1:\\$post:integer|WP_Post} )",
        "description": "Retrieve ancestors of a post."
    },
    "Function: get_post_class": {
        "prefix": "get_post_class",
        "body": "get_post_class( ${1:\\$class:string|array}, ${2:\\$post_id:integer|WP_Post|null} )",
        "description": "Retrieves the classes for the post div as an array."
    },
    "Function: get_post_comments_feed_link": {
        "prefix": "get_post_comments_feed_link",
        "body": "get_post_comments_feed_link( ${1:\\$post_id:integer}, ${2:\\$feed:string} )",
        "description": "Retrieves the permalink for the post comments feed."
    },
    "Function: get_post_custom": {
        "prefix": "get_post_custom",
        "body": "get_post_custom( ${1:\\$post_id:integer} )",
        "description": "Retrieve post meta fields, based on post ID."
    },
    "Function: get_post_custom_keys": {
        "prefix": "get_post_custom_keys",
        "body": "get_post_custom_keys( ${1:\\$post_id:integer} )",
        "description": "Retrieve meta field names for a post."
    },
    "Function: get_post_custom_values": {
        "prefix": "get_post_custom_values",
        "body": "get_post_custom_values( ${1:\\$key:string}, ${2:\\$post_id:integer} )",
        "description": "Retrieve values for a custom post field."
    },
    "Function: get_post_embed_html": {
        "prefix": "get_post_embed_html",
        "body": "get_post_embed_html( ${1:\\$width:integer}, ${2:\\$height:integer}, ${3:\\$post:integer|WP_Post|null} )",
        "description": "Retrieves the embed code for a specific post."
    },
    "Function: get_post_embed_url": {
        "prefix": "get_post_embed_url",
        "body": "get_post_embed_url( ${1:\\$post:integer|WP_Post|null} )",
        "description": "Retrieves the URL to embed a specific post in an iframe."
    },
    "Function: get_post_field": {
        "prefix": "get_post_field",
        "body": "get_post_field( ${1:\\$field:string}, ${2:\\$post:integer|WP_Post|null}, ${3:\\$context:string} )",
        "description": "Retrieve data from a post field based on Post ID."
    },
    "Function: get_post_format": {
        "prefix": "get_post_format",
        "body": "get_post_format( ${1:\\$post:integer|object|null} )",
        "description": "Retrieve the format slug for a post"
    },
    "Function: get_post_format_link": {
        "prefix": "get_post_format_link",
        "body": "get_post_format_link( ${1:\\$format:string} )",
        "description": "Returns a link to a post format index."
    },
    "Function: get_post_format_slugs": {
        "prefix": "get_post_format_slugs",
        "body": "get_post_format_slugs(  )",
        "description": "Retrieves the array of post format slugs."
    },
    "Function: get_post_format_string": {
        "prefix": "get_post_format_string",
        "body": "get_post_format_string( ${1:\\$slug:string} )",
        "description": "Returns a pretty, translated version of a post format slug"
    },
    "Function: get_post_format_strings": {
        "prefix": "get_post_format_strings",
        "body": "get_post_format_strings(  )",
        "description": "Returns an array of post format slugs to their translated and pretty display versions"
    },
    "Function: get_post_galleries": {
        "prefix": "get_post_galleries",
        "body": "get_post_galleries( ${1:\\$post:integer|WP_Post}, ${2:\\$html:boolean} )",
        "description": "Retrieves galleries from the passed post&#039;s content."
    },
    "Function: get_post_galleries_images": {
        "prefix": "get_post_galleries_images",
        "body": "get_post_galleries_images( ${1:\\$post:integer|WP_Post} )",
        "description": "Retrieve the image srcs from galleries from a post&#039;s content, if present"
    },
    "Function: get_post_gallery": {
        "prefix": "get_post_gallery",
        "body": "get_post_gallery( ${1:\\$post:integer|WP_Post}, ${2:\\$html:boolean} )",
        "description": "Check a specified post&#039;s content for gallery and, if present, return the first"
    },
    "Function: get_post_gallery_images": {
        "prefix": "get_post_gallery_images",
        "body": "get_post_gallery_images( ${1:\\$post:integer|WP_Post} )",
        "description": "Checks a post&#039;s content for galleries and return the image srcs for the first found gallery"
    },
    "Function: get_post_meta": {
        "prefix": "get_post_meta",
        "body": "get_post_meta( ${1:\\$post_id:integer}, ${2:\\$key:string}, ${3:\\$single:boolean} )",
        "description": "Retrieve post meta field for a post."
    },
    "Function: get_post_meta_by_id": {
        "prefix": "get_post_meta_by_id",
        "body": "get_post_meta_by_id( ${1:\\$mid:integer} )",
        "description": "Get post meta data by meta ID."
    },
    "Function: get_post_mime_type": {
        "prefix": "get_post_mime_type",
        "body": "get_post_mime_type( ${1:\\$ID:integer|WP_Post} )",
        "description": "Retrieve the mime type of an attachment based on the ID."
    },
    "Function: get_post_mime_types": {
        "prefix": "get_post_mime_types",
        "body": "get_post_mime_types(  )",
        "description": "Get default post mime types."
    },
    "Function: get_post_modified_time": {
        "prefix": "get_post_modified_time",
        "body": "get_post_modified_time( ${1:\\$d:string}, ${2:\\$gmt:boolean}, ${3:\\$post:integer|WP_Post|null}, ${4:\\$translate:boolean} )",
        "description": "Retrieve the time at which the post was last modified."
    },
    "Function: get_post_permalink": {
        "prefix": "get_post_permalink",
        "body": "get_post_permalink( ${1:\\$id:integer|WP_Post}, ${2:\\$leavename:boolean}, ${3:\\$sample:boolean} )",
        "description": "Retrieves the permalink for a post of a custom post type."
    },
    "Function: get_post_reply_link": {
        "prefix": "get_post_reply_link",
        "body": "get_post_reply_link( ${1:\\$args:array}, ${2:\\$post:integer|WP_Post|null} )",
        "description": "Retrieve HTML content for reply to post link."
    },
    "Function: get_post_stati": {
        "prefix": "get_post_stati",
        "body": "get_post_stati( ${1:\\$args:array|string}, ${2:\\$output:string}, ${3:\\$operator:string} )",
        "description": "Get a list of post statuses."
    },
    "Function: get_post_status": {
        "prefix": "get_post_status",
        "body": "get_post_status( ${1:\\$ID:integer|WP_Post} )",
        "description": "Retrieve the post status based on the Post ID."
    },
    "Function: get_post_status_object": {
        "prefix": "get_post_status_object",
        "body": "get_post_status_object( ${1:\\$post_status:string} )",
        "description": "Retrieve a post status object by name."
    },
    "Function: get_post_statuses": {
        "prefix": "get_post_statuses",
        "body": "get_post_statuses(  )",
        "description": "Retrieve all of the WordPress supported post statuses."
    },
    "Function: get_post_taxonomies": {
        "prefix": "get_post_taxonomies",
        "body": "get_post_taxonomies( ${1:\\$post:integer|WP_Post} )",
        "description": "Retrieve all taxonomies of a post with just the names."
    },
    "Function: get_post_thumbnail_id": {
        "prefix": "get_post_thumbnail_id",
        "body": "get_post_thumbnail_id( ${1:\\$post:integer|WP_Post|null} )",
        "description": "Retrieve post thumbnail ID."
    },
    "Function: get_post_time": {
        "prefix": "get_post_time",
        "body": "get_post_time( ${1:\\$d:string}, ${2:\\$gmt:boolean}, ${3:\\$post:integer|WP_Post|null}, ${4:\\$translate:boolean} )",
        "description": "Retrieve the time at which the post was written."
    },
    "Function: get_post_to_edit": {
        "prefix": "get_post_to_edit",
        "body": "get_post_to_edit( ${1:\\$id:integer} )",
        "description": "Gets an existing post and format it for editing."
    },
    "Function: get_post_type": {
        "prefix": "get_post_type",
        "body": "get_post_type( ${1:\\$post:integer|WP_Post|null} )",
        "description": "Retrieves the post type of the current post or of a given post."
    },
    "Function: get_post_type_archive_feed_link": {
        "prefix": "get_post_type_archive_feed_link",
        "body": "get_post_type_archive_feed_link( ${1:\\$post_type:string}, ${2:\\$feed:string} )",
        "description": "Retrieves the permalink for a post type archive feed."
    },
    "Function: get_post_type_archive_link": {
        "prefix": "get_post_type_archive_link",
        "body": "get_post_type_archive_link( ${1:\\$post_type:string} )",
        "description": "Retrieves the permalink for a post type archive."
    },
    "Function: get_post_type_archive_template": {
        "prefix": "get_post_type_archive_template",
        "body": "get_post_type_archive_template(  )",
        "description": "Retrieve path of post type archive template in current or parent template."
    },
    "Function: get_post_type_capabilities": {
        "prefix": "get_post_type_capabilities",
        "body": "get_post_type_capabilities( ${1:\\$args:object} )",
        "description": "Build an object with all post type capabilities out of a post type object"
    },
    "Function: get_post_type_labels": {
        "prefix": "get_post_type_labels",
        "body": "get_post_type_labels( ${1:\\$post_type_object:object|WP_Post_Type} )",
        "description": "Builds an object with all post type labels out of a post type object."
    },
    "Function: get_post_type_object": {
        "prefix": "get_post_type_object",
        "body": "get_post_type_object( ${1:\\$post_type:string} )",
        "description": "Retrieves a post type object by name."
    },
    "Function: get_post_types": {
        "prefix": "get_post_types",
        "body": "get_post_types( ${1:\\$args:array|string}, ${2:\\$output:string}, ${3:\\$operator:string} )",
        "description": "Get a list of all registered post type objects."
    },
    "Function: get_post_types_by_support": {
        "prefix": "get_post_types_by_support",
        "body": "get_post_types_by_support( ${1:\\$feature:array|string}, ${2:\\$operator:string} )",
        "description": "Retrieves a list of post type names that support a specific feature."
    },
    "Function: get_postdata": {
        "prefix": "get_postdata",
        "body": "get_postdata( ${1:\\$postid:integer} )",
        "description": "Retrieves all post data for a given post."
    },
    "Function: get_posts": {
        "prefix": "get_posts",
        "body": "get_posts( ${1:\\$args:array|null} )",
        "description": "Retrieve list of latest posts or posts matching criteria."
    },
    "Function: get_posts_by_author_sql": {
        "prefix": "get_posts_by_author_sql",
        "body": "get_posts_by_author_sql( ${1:\\$post_type:array|string}, ${2:\\$full:boolean}, ${3:\\$post_author:integer|null}, ${4:\\$public_only:boolean} )",
        "description": "Retrieve the post SQL based on capability, author, and type."
    },
    "Function: get_posts_nav_link": {
        "prefix": "get_posts_nav_link",
        "body": "get_posts_nav_link( ${1:\\$args:string|array} )",
        "description": "Retrieves the post pages link navigation for previous and next pages."
    },
    "Function: get_preferred_from_update_core": {
        "prefix": "get_preferred_from_update_core",
        "body": "get_preferred_from_update_core(  )",
        "description": "Selects the first update version from the update_core option."
    },
    "Function: get_preview_post_link": {
        "prefix": "get_preview_post_link",
        "body": "get_preview_post_link( ${1:\\$post:integer|WP_Post|null}, ${2:\\$query_args:array}, ${3:\\$preview_link:string} )",
        "description": "Retrieves the URL used for the post preview."
    },
    "Function: get_previous_comments_link": {
        "prefix": "get_previous_comments_link",
        "body": "get_previous_comments_link( ${1:\\$label:string} )",
        "description": "Retrieves the link to the previous comments page."
    },
    "Function: get_previous_post": {
        "prefix": "get_previous_post",
        "body": "get_previous_post( ${1:\\$in_same_term:boolean}, ${2:\\$excluded_terms:array|string}, ${3:\\$taxonomy:string} )",
        "description": "Retrieves the previous post that is adjacent to the current post."
    },
    "Function: get_previous_post_link": {
        "prefix": "get_previous_post_link",
        "body": "get_previous_post_link( ${1:\\$format:string}, ${2:\\$link:string}, ${3:\\$in_same_term:boolean}, ${4:\\$excluded_terms:array|string}, ${5:\\$taxonomy:string} )",
        "description": "Retrieves the previous post link that is adjacent to the current post."
    },
    "Function: get_previous_posts_link": {
        "prefix": "get_previous_posts_link",
        "body": "get_previous_posts_link( ${1:\\$label:string|null} )",
        "description": "Retrieves the previous posts page link."
    },
    "Function: get_previous_posts_page_link": {
        "prefix": "get_previous_posts_page_link",
        "body": "get_previous_posts_page_link(  )",
        "description": "Retrieves the previous posts page link."
    },
    "Function: get_privacy_policy_url": {
        "prefix": "get_privacy_policy_url",
        "body": "get_privacy_policy_url(  )",
        "description": "Retrieves the URL to the privacy policy page."
    },
    "Function: get_private_posts_cap_sql": {
        "prefix": "get_private_posts_cap_sql",
        "body": "get_private_posts_cap_sql( ${1:\\$post_type:string|array} )",
        "description": "Retrieve the private post SQL based on capability."
    },
    "Function: get_profile": {
        "prefix": "get_profile",
        "body": "get_profile( ${1:\\$field:string}, ${2:\\$user:false|integer} )",
        "description": "Retrieve user data based on field."
    },
    "Function: get_pung": {
        "prefix": "get_pung",
        "body": "get_pung( ${1:\\$post_id:integer|WP_Post} )",
        "description": "Retrieve URLs already pinged for a post."
    },
    "Function: get_queried_object": {
        "prefix": "get_queried_object",
        "body": "get_queried_object(  )",
        "description": "Retrieve the currently-queried object."
    },
    "Function: get_queried_object_id": {
        "prefix": "get_queried_object_id",
        "body": "get_queried_object_id(  )",
        "description": "Retrieve ID of the current queried object."
    },
    "Function: get_query_template": {
        "prefix": "get_query_template",
        "body": "get_query_template( ${1:\\$type:string}, ${2:\\$templates:array} )",
        "description": "Retrieve path to a template"
    },
    "Function: get_query_var": {
        "prefix": "get_query_var",
        "body": "get_query_var( ${1:\\$var:string}, ${2:\\$default:mixed} )",
        "description": "Retrieve variable in the WP_Query class."
    },
    "Function: get_random_header_image": {
        "prefix": "get_random_header_image",
        "body": "get_random_header_image(  )",
        "description": "Get random header image url from registered images in theme."
    },
    "Function: get_raw_theme_root": {
        "prefix": "get_raw_theme_root",
        "body": "get_raw_theme_root( ${1:\\$stylesheet_or_template:string}, ${2:\\$skip_cache:boolean} )",
        "description": "Get the raw theme root relative to the content directory with no filters applied."
    },
    "Function: get_real_file_to_edit": {
        "prefix": "get_real_file_to_edit",
        "body": "get_real_file_to_edit( ${1:\\$file:string} )",
        "description": "Get the real filesystem path to a file to edit within the admin."
    },
    "Function: get_registered_meta_keys": {
        "prefix": "get_registered_meta_keys",
        "body": "get_registered_meta_keys( ${1:\\$object_type:string} )",
        "description": "Retrieves a list of registered meta keys for an object type."
    },
    "Function: get_registered_metadata": {
        "prefix": "get_registered_metadata",
        "body": "get_registered_metadata( ${1:\\$object_type:string}, ${2:\\$object_id:integer}, ${3:\\$meta_key:string} )",
        "description": "Retrieves registered metadata for a specified object."
    },
    "Function: get_registered_nav_menus": {
        "prefix": "get_registered_nav_menus",
        "body": "get_registered_nav_menus(  )",
        "description": "Retrieves all registered navigation menu locations in a theme."
    },
    "Function: get_registered_settings": {
        "prefix": "get_registered_settings",
        "body": "get_registered_settings(  )",
        "description": "Retrieves an array of registered settings."
    },
    "Function: get_rest_url": {
        "prefix": "get_rest_url",
        "body": "get_rest_url( ${1:\\$blog_id:integer|null}, ${2:\\$path:string}, ${3:\\$scheme:string} )",
        "description": "Retrieves the URL to a REST endpoint on a site."
    },
    "Function: get_role": {
        "prefix": "get_role",
        "body": "get_role( ${1:\\$role:string} )",
        "description": "Retrieve role object."
    },
    "Function: get_rss": {
        "prefix": "get_rss",
        "body": "get_rss( ${1:\\$url:string}, ${2:\\$num_items:integer} )",
        "description": "Display RSS items in HTML list items."
    },
    "Function: get_sample_permalink": {
        "prefix": "get_sample_permalink",
        "body": "get_sample_permalink( ${1:\\$id:integer}, ${2:\\$title:string|null}, ${3:\\$name:string|null} )",
        "description": "Get a sample permalink based off of the post name."
    },
    "Function: get_sample_permalink_html": {
        "prefix": "get_sample_permalink_html",
        "body": "get_sample_permalink_html( ${1:\\$id:integer}, ${2:\\$new_title:string|null}, ${3:\\$new_slug:string|null} )",
        "description": "Returns the HTML of the sample permalink slug editor."
    },
    "Function: get_screen_icon": {
        "prefix": "get_screen_icon",
        "body": "get_screen_icon(  )",
        "description": "Retrieves the screen icon (no longer used in 3.8+)."
    },
    "Function: get_search_comments_feed_link": {
        "prefix": "get_search_comments_feed_link",
        "body": "get_search_comments_feed_link( ${1:\\$search_query:string}, ${2:\\$feed:string} )",
        "description": "Retrieves the permalink for the search results comments feed."
    },
    "Function: get_search_feed_link": {
        "prefix": "get_search_feed_link",
        "body": "get_search_feed_link( ${1:\\$search_query:string}, ${2:\\$feed:string} )",
        "description": "Retrieves the permalink for the search results feed."
    },
    "Function: get_search_form": {
        "prefix": "get_search_form",
        "body": "get_search_form( ${1:\\$echo:boolean} )",
        "description": "Display search form."
    },
    "Function: get_search_link": {
        "prefix": "get_search_link",
        "body": "get_search_link( ${1:\\$query:string} )",
        "description": "Retrieves the permalink for a search."
    },
    "Function: get_search_query": {
        "prefix": "get_search_query",
        "body": "get_search_query( ${1:\\$escaped:boolean} )",
        "description": "Retrieves the contents of the search WordPress query variable."
    },
    "Function: get_search_template": {
        "prefix": "get_search_template",
        "body": "get_search_template(  )",
        "description": "Retrieve path of search template in current or parent template."
    },
    "Function: get_settings": {
        "prefix": "get_settings",
        "body": "get_settings( ${1:\\$option:string} )",
        "description": "Get value based on option."
    },
    "Function: get_settings_errors": {
        "prefix": "get_settings_errors",
        "body": "get_settings_errors( ${1:\\$setting:string}, ${2:\\$sanitize:boolean} )",
        "description": "Fetch settings errors registered by add_settings_error()"
    },
    "Function: get_shortcode_atts_regex": {
        "prefix": "get_shortcode_atts_regex",
        "body": "get_shortcode_atts_regex(  )",
        "description": "Retrieve the shortcode attributes regex."
    },
    "Function: get_shortcode_regex": {
        "prefix": "get_shortcode_regex",
        "body": "get_shortcode_regex( ${1:\\$tagnames:array|null} )",
        "description": "Retrieve the shortcode regular expression for searching."
    },
    "Function: get_shortcut_link": {
        "prefix": "get_shortcut_link",
        "body": "get_shortcut_link(  )",
        "description": "Retrieves the Press This bookmarklet link."
    },
    "Function: get_sidebar": {
        "prefix": "get_sidebar",
        "body": "get_sidebar( ${1:\\$name:string|null} )",
        "description": "Load sidebar template."
    },
    "Function: get_single_template": {
        "prefix": "get_single_template",
        "body": "get_single_template(  )",
        "description": "Retrieve path of single template in current or parent template. Applies to single Posts, single Attachments, and single custom post types."
    },
    "Function: get_singular_template": {
        "prefix": "get_singular_template",
        "body": "get_singular_template(  )",
        "description": "Retrieves the path of the singular template in current or parent template."
    },
    "Function: get_site": {
        "prefix": "get_site",
        "body": "get_site( ${1:\\$site:WP_Site|integer|null} )",
        "description": "Retrieves site data given a site ID or site object."
    },
    "Function: get_site_allowed_themes": {
        "prefix": "get_site_allowed_themes",
        "body": "get_site_allowed_themes(  )",
        "description": "Deprecated functionality for getting themes network-enabled themes."
    },
    "Function: get_site_by_path": {
        "prefix": "get_site_by_path",
        "body": "get_site_by_path( ${1:\\$domain:string}, ${2:\\$path:string}, ${3:\\$segments:integer|null} )",
        "description": "Retrieves the closest matching site object by its domain and path."
    },
    "Function: get_site_icon_url": {
        "prefix": "get_site_icon_url",
        "body": "get_site_icon_url( ${1:\\$size:integer}, ${2:\\$url:string}, ${3:\\$blog_id:integer} )",
        "description": "Returns the Site Icon URL."
    },
    "Function: get_site_option": {
        "prefix": "get_site_option",
        "body": "get_site_option( ${1:\\$option:string}, ${2:\\$default:mixed}, ${3:\\$deprecated:boolean} )",
        "description": "Retrieve an option value for the current network based on name of option."
    },
    "Function: get_site_screen_help_sidebar_content": {
        "prefix": "get_site_screen_help_sidebar_content",
        "body": "get_site_screen_help_sidebar_content(  )",
        "description": "Returns the content for the help sidebar on the Edit Site screens."
    },
    "Function: get_site_screen_help_tab_args": {
        "prefix": "get_site_screen_help_tab_args",
        "body": "get_site_screen_help_tab_args(  )",
        "description": "Returns the arguments for the help tab on the Edit Site screens."
    },
    "Function: get_site_transient": {
        "prefix": "get_site_transient",
        "body": "get_site_transient( ${1:\\$transient:string} )",
        "description": "Get the value of a site transient."
    },
    "Function: get_site_url": {
        "prefix": "get_site_url",
        "body": "get_site_url( ${1:\\$blog_id:integer|null}, ${2:\\$path:string}, ${3:\\$scheme:string|null} )",
        "description": "Retrieves the URL for a given site where WordPress application files (e.g. wp-blog-header.php or the wp-admin/ folder) are accessible."
    },
    "Function: get_sites": {
        "prefix": "get_sites",
        "body": "get_sites( ${1:\\$args:string|array} )",
        "description": "Retrieves a list of sites matching requested arguments."
    },
    "Function: get_sitestats": {
        "prefix": "get_sitestats",
        "body": "get_sitestats(  )",
        "description": "Gets the network&#039;s site and user counts."
    },
    "Function: get_space_allowed": {
        "prefix": "get_space_allowed",
        "body": "get_space_allowed(  )",
        "description": "Returns the upload quota for the current blog."
    },
    "Function: get_space_used": {
        "prefix": "get_space_used",
        "body": "get_space_used(  )",
        "description": "Returns the space used by the current blog."
    },
    "Function: get_status_header_desc": {
        "prefix": "get_status_header_desc",
        "body": "get_status_header_desc( ${1:\\$code:integer} )",
        "description": "Retrieve the description for the HTTP status."
    },
    "Function: get_stylesheet": {
        "prefix": "get_stylesheet",
        "body": "get_stylesheet(  )",
        "description": "Retrieve name of the current stylesheet."
    },
    "Function: get_stylesheet_directory": {
        "prefix": "get_stylesheet_directory",
        "body": "get_stylesheet_directory(  )",
        "description": "Retrieve stylesheet directory path for current theme."
    },
    "Function: get_stylesheet_directory_uri": {
        "prefix": "get_stylesheet_directory_uri",
        "body": "get_stylesheet_directory_uri(  )",
        "description": "Retrieve stylesheet directory URI."
    },
    "Function: get_stylesheet_uri": {
        "prefix": "get_stylesheet_uri",
        "body": "get_stylesheet_uri(  )",
        "description": "Retrieves the URI of current theme stylesheet."
    },
    "Function: get_subdirectory_reserved_names": {
        "prefix": "get_subdirectory_reserved_names",
        "body": "get_subdirectory_reserved_names(  )",
        "description": "Retrieves a list of reserved site on a sub-directory Multisite installation."
    },
    "Function: get_submit_button": {
        "prefix": "get_submit_button",
        "body": "get_submit_button( ${1:\\$text:string}, ${2:\\$type:string}, ${3:\\$name:string}, ${4:\\$wrap:boolean}, ${5:\\$other_attributes:array|string} )",
        "description": "Returns a submit button, with provided text and appropriate class"
    },
    "Function: get_super_admins": {
        "prefix": "get_super_admins",
        "body": "get_super_admins(  )",
        "description": "Retrieve a list of super admins."
    },
    "Function: get_tag": {
        "prefix": "get_tag",
        "body": "get_tag( ${1:\\$tag:integer|WP_Term|object}, ${2:\\$output:string}, ${3:\\$filter:string} )",
        "description": "Retrieve post tag by tag ID or tag object."
    },
    "Function: get_tag_feed_link": {
        "prefix": "get_tag_feed_link",
        "body": "get_tag_feed_link( ${1:\\$tag_id:integer}, ${2:\\$feed:string} )",
        "description": "Retrieves the permalink for a tag feed."
    },
    "Function: get_tag_link": {
        "prefix": "get_tag_link",
        "body": "get_tag_link( ${1:\\$tag:integer|object} )",
        "description": "Retrieve the link to the tag."
    },
    "Function: get_tag_regex": {
        "prefix": "get_tag_regex",
        "body": "get_tag_regex( ${1:\\$tag:string} )",
        "description": "Return RegEx body to liberally match an opening HTML tag."
    },
    "Function: get_tag_template": {
        "prefix": "get_tag_template",
        "body": "get_tag_template(  )",
        "description": "Retrieve path of tag template in current or parent template."
    },
    "Function: get_tags": {
        "prefix": "get_tags",
        "body": "get_tags( ${1:\\$args:string|array} )",
        "description": "Retrieves all post tags."
    },
    "Function: get_tags_to_edit": {
        "prefix": "get_tags_to_edit",
        "body": "get_tags_to_edit( ${1:\\$post_id:integer}, ${2:\\$taxonomy:string} )",
        "description": "Get comma-separated list of tags available to edit."
    },
    "Function: get_tax_sql": {
        "prefix": "get_tax_sql",
        "body": "get_tax_sql( ${1:\\$tax_query:array}, ${2:\\$primary_table:string}, ${3:\\$primary_id_column:string} )",
        "description": "Given a taxonomy query, generates SQL to be appended to a main query."
    },
    "Function: get_taxonomies": {
        "prefix": "get_taxonomies",
        "body": "get_taxonomies( ${1:\\$args:array}, ${2:\\$output:string}, ${3:\\$operator:string} )",
        "description": "Retrieves a list of registered taxonomy names or objects."
    },
    "Function: get_taxonomies_for_attachments": {
        "prefix": "get_taxonomies_for_attachments",
        "body": "get_taxonomies_for_attachments( ${1:\\$output:string} )",
        "description": "Retrieves all of the taxonomy names that are registered for attachments."
    },
    "Function: get_taxonomy": {
        "prefix": "get_taxonomy",
        "body": "get_taxonomy( ${1:\\$taxonomy:string} )",
        "description": "Retrieves the taxonomy object of $taxonomy."
    },
    "Function: get_taxonomy_labels": {
        "prefix": "get_taxonomy_labels",
        "body": "get_taxonomy_labels( ${1:\\$tax:WP_Taxonomy} )",
        "description": "Builds an object with all taxonomy labels out of a taxonomy object."
    },
    "Function: get_taxonomy_template": {
        "prefix": "get_taxonomy_template",
        "body": "get_taxonomy_template(  )",
        "description": "Retrieve path of custom taxonomy term template in current or parent template."
    },
    "Function: get_temp_dir": {
        "prefix": "get_temp_dir",
        "body": "get_temp_dir(  )",
        "description": "Determine a writable directory for temporary files."
    },
    "Function: get_template": {
        "prefix": "get_template",
        "body": "get_template(  )",
        "description": "Retrieve name of the current theme."
    },
    "Function: get_template_directory": {
        "prefix": "get_template_directory",
        "body": "get_template_directory(  )",
        "description": "Retrieve current theme directory."
    },
    "Function: get_template_directory_uri": {
        "prefix": "get_template_directory_uri",
        "body": "get_template_directory_uri(  )",
        "description": "Retrieve theme directory URI."
    },
    "Function: get_template_part": {
        "prefix": "get_template_part",
        "body": "get_template_part( ${1:\\$slug:string}, ${2:\\$name:string|null} )",
        "description": "Loads a template part into a template."
    },
    "Function: get_term": {
        "prefix": "get_term",
        "body": "get_term( ${1:\\$term:integer|WP_Term|object}, ${2:\\$taxonomy:string}, ${3:\\$output:string}, ${4:\\$filter:string} )",
        "description": "Get all Term data from database by Term ID."
    },
    "Function: get_term_by": {
        "prefix": "get_term_by",
        "body": "get_term_by( ${1:\\$field:string}, ${2:\\$value:string|integer}, ${3:\\$taxonomy:string}, ${4:\\$output:string}, ${5:\\$filter:string} )",
        "description": "Get all Term data from database by Term field and data."
    },
    "Function: get_term_children": {
        "prefix": "get_term_children",
        "body": "get_term_children( ${1:\\$term_id:integer}, ${2:\\$taxonomy:string} )",
        "description": "Merge all term children into a single array of their IDs."
    },
    "Function: get_term_feed_link": {
        "prefix": "get_term_feed_link",
        "body": "get_term_feed_link( ${1:\\$term_id:integer}, ${2:\\$taxonomy:string}, ${3:\\$feed:string} )",
        "description": "Retrieves the feed link for a term."
    },
    "Function: get_term_field": {
        "prefix": "get_term_field",
        "body": "get_term_field( ${1:\\$field:string}, ${2:\\$term:integer|WP_Term}, ${3:\\$taxonomy:string}, ${4:\\$context:string} )",
        "description": "Get sanitized Term field."
    },
    "Function: get_term_link": {
        "prefix": "get_term_link",
        "body": "get_term_link( ${1:\\$term:object|integer|string}, ${2:\\$taxonomy:string} )",
        "description": "Generate a permalink for a taxonomy term archive."
    },
    "Function: get_term_meta": {
        "prefix": "get_term_meta",
        "body": "get_term_meta( ${1:\\$term_id:integer}, ${2:\\$key:string}, ${3:\\$single:boolean} )",
        "description": "Retrieves metadata for a term."
    },
    "Function: get_term_parents_list": {
        "prefix": "get_term_parents_list",
        "body": "get_term_parents_list( ${1:\\$term_id:integer}, ${2:\\$taxonomy:string}, ${3:\\$args:string|array} )",
        "description": "Retrieve term parents with separator."
    },
    "Function: get_term_to_edit": {
        "prefix": "get_term_to_edit",
        "body": "get_term_to_edit( ${1:\\$id:integer|object}, ${2:\\$taxonomy:string} )",
        "description": "Sanitizes Term for editing."
    },
    "Function: get_terms_to_edit": {
        "prefix": "get_terms_to_edit",
        "body": "get_terms_to_edit( ${1:\\$post_id:integer}, ${2:\\$taxonomy:string} )",
        "description": "Get comma-separated list of terms available to edit for the given post ID."
    },
    "Function: get_the_archive_description": {
        "prefix": "get_the_archive_description",
        "body": "get_the_archive_description(  )",
        "description": "Retrieves the description for an author, post type, or term archive."
    },
    "Function: get_the_archive_title": {
        "prefix": "get_the_archive_title",
        "body": "get_the_archive_title(  )",
        "description": "Retrieve the archive title based on the queried object."
    },
    "Function: get_the_attachment_link": {
        "prefix": "get_the_attachment_link",
        "body": "get_the_attachment_link( ${1:\\$id:integer}, ${2:\\$fullsize:boolean}, ${3:\\$max_dims:array}, ${4:\\$permalink:boolean} )",
        "description": "Retrieve HTML content of attachment image with link."
    },
    "Function: get_the_author": {
        "prefix": "get_the_author",
        "body": "get_the_author( ${1:\\$deprecated:string} )",
        "description": "Retrieve the author of the current post."
    },
    "Function: get_the_author_aim": {
        "prefix": "get_the_author_aim",
        "body": "get_the_author_aim(  )",
        "description": "Retrieve the AIM address of the author of the current post."
    },
    "Function: get_the_author_description": {
        "prefix": "get_the_author_description",
        "body": "get_the_author_description(  )",
        "description": "Retrieve the description of the author of the current post."
    },
    "Function: get_the_author_email": {
        "prefix": "get_the_author_email",
        "body": "get_the_author_email(  )",
        "description": "Retrieve the email of the author of the current post."
    },
    "Function: get_the_author_firstname": {
        "prefix": "get_the_author_firstname",
        "body": "get_the_author_firstname(  )",
        "description": "Retrieve the first name of the author of the current post."
    },
    "Function: get_the_author_icq": {
        "prefix": "get_the_author_icq",
        "body": "get_the_author_icq(  )",
        "description": "Retrieve the ICQ number of the author of the current post."
    },
    "Function: get_the_author_ID": {
        "prefix": "get_the_author_ID",
        "body": "get_the_author_ID(  )",
        "description": "Retrieve the ID of the author of the current post."
    },
    "Function: get_the_author_lastname": {
        "prefix": "get_the_author_lastname",
        "body": "get_the_author_lastname(  )",
        "description": "Retrieve the last name of the author of the current post."
    },
    "Function: get_the_author_link": {
        "prefix": "get_the_author_link",
        "body": "get_the_author_link(  )",
        "description": "Retrieve either author&#039;s link or author&#039;s name."
    },
    "Function: get_the_author_login": {
        "prefix": "get_the_author_login",
        "body": "get_the_author_login(  )",
        "description": "Retrieve the login name of the author of the current post."
    },
    "Function: get_the_author_meta": {
        "prefix": "get_the_author_meta",
        "body": "get_the_author_meta( ${1:\\$field:string}, ${2:\\$user_id:integer} )",
        "description": "Retrieves the requested data of the author of the current post."
    },
    "Function: get_the_author_msn": {
        "prefix": "get_the_author_msn",
        "body": "get_the_author_msn(  )",
        "description": "Retrieve the MSN address of the author of the current post."
    },
    "Function: get_the_author_nickname": {
        "prefix": "get_the_author_nickname",
        "body": "get_the_author_nickname(  )",
        "description": "Retrieve the nickname of the author of the current post."
    },
    "Function: get_the_author_posts": {
        "prefix": "get_the_author_posts",
        "body": "get_the_author_posts(  )",
        "description": "Retrieve the number of posts by the author of the current post."
    },
    "Function: get_the_author_posts_link": {
        "prefix": "get_the_author_posts_link",
        "body": "get_the_author_posts_link(  )",
        "description": "Retrieves an HTML link to the author page of the current post&#039;s author."
    },
    "Function: get_the_author_url": {
        "prefix": "get_the_author_url",
        "body": "get_the_author_url(  )",
        "description": "Retrieve the URL to the home page of the author of the current post."
    },
    "Function: get_the_author_yim": {
        "prefix": "get_the_author_yim",
        "body": "get_the_author_yim(  )",
        "description": "Retrieve the Yahoo! IM name of the author of the current post."
    },
    "Function: get_the_category": {
        "prefix": "get_the_category",
        "body": "get_the_category( ${1:\\$id:integer} )",
        "description": "Retrieve post categories."
    },
    "Function: get_the_category_by_ID": {
        "prefix": "get_the_category_by_ID",
        "body": "get_the_category_by_ID( ${1:\\$cat_ID:integer} )",
        "description": "Retrieve category name based on category ID."
    },
    "Function: get_the_category_list": {
        "prefix": "get_the_category_list",
        "body": "get_the_category_list( ${1:\\$separator:string}, ${2:\\$parents:string}, ${3:\\$post_id:integer} )",
        "description": "Retrieve category list for a post in either HTML list or custom format."
    },
    "Function: get_the_category_rss": {
        "prefix": "get_the_category_rss",
        "body": "get_the_category_rss( ${1:\\$type:string|null} )",
        "description": "Retrieve all of the post categories, formatted for use in feeds."
    },
    "Function: get_the_comments_navigation": {
        "prefix": "get_the_comments_navigation",
        "body": "get_the_comments_navigation( ${1:\\$args:array} )",
        "description": "Retrieves navigation to next/previous set of comments, when applicable."
    },
    "Function: get_the_comments_pagination": {
        "prefix": "get_the_comments_pagination",
        "body": "get_the_comments_pagination( ${1:\\$args:array} )",
        "description": "Retrieves a paginated navigation to next/previous set of comments, when applicable."
    },
    "Function: get_the_content": {
        "prefix": "get_the_content",
        "body": "get_the_content( ${1:\\$more_link_text:string|null}, ${2:\\$strip_teaser:boolean} )",
        "description": "Retrieve the post content."
    },
    "Function: get_the_content_feed": {
        "prefix": "get_the_content_feed",
        "body": "get_the_content_feed( ${1:\\$feed_type:string|null} )",
        "description": "Retrieve the post content for feeds."
    },
    "Function: get_the_date": {
        "prefix": "get_the_date",
        "body": "get_the_date( ${1:\\$d:string}, ${2:\\$post:integer|WP_Post|null} )",
        "description": "Retrieve the date on which the post was written."
    },
    "Function: get_the_excerpt": {
        "prefix": "get_the_excerpt",
        "body": "get_the_excerpt( ${1:\\$post:integer|WP_Post|null} )",
        "description": "Retrieves the post excerpt."
    },
    "Function: get_the_generator": {
        "prefix": "get_the_generator",
        "body": "get_the_generator( ${1:\\$type:string} )",
        "description": "Creates the generator XML or Comment for RSS, ATOM, etc."
    },
    "Function: get_the_guid": {
        "prefix": "get_the_guid",
        "body": "get_the_guid( ${1:\\$post:integer|WP_Post} )",
        "description": "Retrieve the Post Global Unique Identifier (guid)."
    },
    "Function: get_the_ID": {
        "prefix": "get_the_ID",
        "body": "get_the_ID(  )",
        "description": "Retrieve the ID of the current item in the WordPress Loop."
    },
    "Function: get_the_modified_author": {
        "prefix": "get_the_modified_author",
        "body": "get_the_modified_author(  )",
        "description": "Retrieve the author who last edited the current post."
    },
    "Function: get_the_modified_date": {
        "prefix": "get_the_modified_date",
        "body": "get_the_modified_date( ${1:\\$d:string}, ${2:\\$post:integer|WP_Post|null} )",
        "description": "Retrieve the date on which the post was last modified."
    },
    "Function: get_the_modified_time": {
        "prefix": "get_the_modified_time",
        "body": "get_the_modified_time( ${1:\\$d:string}, ${2:\\$post:integer|WP_Post|null} )",
        "description": "Retrieve the time at which the post was last modified."
    },
    "Function: get_the_password_form": {
        "prefix": "get_the_password_form",
        "body": "get_the_password_form( ${1:\\$post:integer|WP_Post} )",
        "description": "Retrieve protected post password form content."
    },
    "Function: get_the_permalink": {
        "prefix": "get_the_permalink",
        "body": "get_the_permalink( ${1:\\$post:integer|WP_Post}, ${2:\\$leavename:boolean} )",
        "description": "Retrieves the full permalink for the current post or post ID."
    },
    "Function: get_the_post_navigation": {
        "prefix": "get_the_post_navigation",
        "body": "get_the_post_navigation( ${1:\\$args:array} )",
        "description": "Retrieves the navigation to next/previous post, when applicable."
    },
    "Function: get_the_post_thumbnail": {
        "prefix": "get_the_post_thumbnail",
        "body": "get_the_post_thumbnail( ${1:\\$post:integer|WP_Post|null}, ${2:\\$size:string|array}, ${3:\\$attr:string|array} )",
        "description": "Retrieve the post thumbnail."
    },
    "Function: get_the_post_thumbnail_caption": {
        "prefix": "get_the_post_thumbnail_caption",
        "body": "get_the_post_thumbnail_caption( ${1:\\$post:integer|WP_Post|null} )",
        "description": "Returns the post thumbnail caption."
    },
    "Function: get_the_post_thumbnail_url": {
        "prefix": "get_the_post_thumbnail_url",
        "body": "get_the_post_thumbnail_url( ${1:\\$post:integer|WP_Post|null}, ${2:\\$size:string|array} )",
        "description": "Return the post thumbnail URL."
    },
    "Function: get_the_post_type_description": {
        "prefix": "get_the_post_type_description",
        "body": "get_the_post_type_description(  )",
        "description": "Retrieves the description for a post type archive."
    },
    "Function: get_the_posts_navigation": {
        "prefix": "get_the_posts_navigation",
        "body": "get_the_posts_navigation( ${1:\\$args:array} )",
        "description": "Returns the navigation to next/previous set of posts, when applicable."
    },
    "Function: get_the_posts_pagination": {
        "prefix": "get_the_posts_pagination",
        "body": "get_the_posts_pagination( ${1:\\$args:array} )",
        "description": "Retrieves a paginated navigation to next/previous set of posts, when applicable."
    },
    "Function: get_the_privacy_policy_link": {
        "prefix": "get_the_privacy_policy_link",
        "body": "get_the_privacy_policy_link( ${1:\\$before:string}, ${2:\\$after:string} )",
        "description": "Returns the privacy policy link with formatting, when applicable."
    },
    "Function: get_the_tag_list": {
        "prefix": "get_the_tag_list",
        "body": "get_the_tag_list( ${1:\\$before:string}, ${2:\\$sep:string}, ${3:\\$after:string}, ${4:\\$id:integer} )",
        "description": "Retrieve the tags for a post formatted as a string."
    },
    "Function: get_the_tags": {
        "prefix": "get_the_tags",
        "body": "get_the_tags( ${1:\\$id:integer} )",
        "description": "Retrieve the tags for a post."
    },
    "Function: get_the_taxonomies": {
        "prefix": "get_the_taxonomies",
        "body": "get_the_taxonomies( ${1:\\$post:integer|WP_Post}, ${2:\\$args:array} )",
        "description": "Retrieve all taxonomies associated with a post."
    },
    "Function: get_the_term_list": {
        "prefix": "get_the_term_list",
        "body": "get_the_term_list( ${1:\\$id:integer}, ${2:\\$taxonomy:string}, ${3:\\$before:string}, ${4:\\$sep:string}, ${5:\\$after:string} )",
        "description": "Retrieve a post&#039;s terms as a list with specified format."
    },
    "Function: get_the_terms": {
        "prefix": "get_the_terms",
        "body": "get_the_terms( ${1:\\$post:integer|object}, ${2:\\$taxonomy:string} )",
        "description": "Retrieve the terms of the taxonomy that are attached to the post."
    },
    "Function: get_the_time": {
        "prefix": "get_the_time",
        "body": "get_the_time( ${1:\\$d:string}, ${2:\\$post:integer|WP_Post|null} )",
        "description": "Retrieve the time at which the post was written."
    },
    "Function: get_the_title": {
        "prefix": "get_the_title",
        "body": "get_the_title( ${1:\\$post:integer|WP_Post} )",
        "description": "Retrieve post title."
    },
    "Function: get_the_title_rss": {
        "prefix": "get_the_title_rss",
        "body": "get_the_title_rss(  )",
        "description": "Retrieve the current post title for the feed."
    },
    "Function: get_theme": {
        "prefix": "get_theme",
        "body": "get_theme( ${1:\\$theme:string} )",
        "description": "Retrieve theme data."
    },
    "Function: get_theme_data": {
        "prefix": "get_theme_data",
        "body": "get_theme_data( ${1:\\$theme_file:string} )",
        "description": "Retrieve theme data from parsed theme file."
    },
    "Function: get_theme_feature_list": {
        "prefix": "get_theme_feature_list",
        "body": "get_theme_feature_list( ${1:\\$api:boolean} )",
        "description": "Retrieve list of WordPress theme features (aka theme tags)"
    },
    "Function: get_theme_file_path": {
        "prefix": "get_theme_file_path",
        "body": "get_theme_file_path( ${1:\\$file:string} )",
        "description": "Retrieves the path of a file in the theme."
    },
    "Function: get_theme_file_uri": {
        "prefix": "get_theme_file_uri",
        "body": "get_theme_file_uri( ${1:\\$file:string} )",
        "description": "Retrieves the URL of a file in the theme."
    },
    "Function: get_theme_mod": {
        "prefix": "get_theme_mod",
        "body": "get_theme_mod( ${1:\\$name:string}, ${2:\\$default:boolean|string} )",
        "description": "Retrieve theme modification value for the current theme."
    },
    "Function: get_theme_mods": {
        "prefix": "get_theme_mods",
        "body": "get_theme_mods(  )",
        "description": "Retrieve all theme modifications."
    },
    "Function: get_theme_root": {
        "prefix": "get_theme_root",
        "body": "get_theme_root( ${1:\\$stylesheet_or_template:string} )",
        "description": "Retrieve path to themes directory."
    },
    "Function: get_theme_root_uri": {
        "prefix": "get_theme_root_uri",
        "body": "get_theme_root_uri( ${1:\\$stylesheet_or_template:string}, ${2:\\$theme_root:string} )",
        "description": "Retrieve URI for themes directory."
    },
    "Function: get_theme_roots": {
        "prefix": "get_theme_roots",
        "body": "get_theme_roots(  )",
        "description": "Retrieve theme roots."
    },
    "Function: get_theme_starter_content": {
        "prefix": "get_theme_starter_content",
        "body": "get_theme_starter_content(  )",
        "description": "Expand a theme&#039;s starter content configuration using core-provided data."
    },
    "Function: get_theme_support": {
        "prefix": "get_theme_support",
        "body": "get_theme_support( ${1:\\$feature:string} )",
        "description": "Gets the theme support arguments passed when registering that support"
    },
    "Function: get_theme_update_available": {
        "prefix": "get_theme_update_available",
        "body": "get_theme_update_available( ${1:\\$theme:WP_Theme} )",
        "description": "Retrieve the update link if there is a theme update available."
    },
    "Function: get_theme_updates": {
        "prefix": "get_theme_updates",
        "body": "get_theme_updates(  )",
        "description": ""
    },
    "Function: get_themes": {
        "prefix": "get_themes",
        "body": "get_themes(  )",
        "description": "Retrieve list of themes with theme data in theme directory."
    },
    "Function: get_to_ping": {
        "prefix": "get_to_ping",
        "body": "get_to_ping( ${1:\\$post_id:integer|WP_Post} )",
        "description": "Retrieve URLs that need to be pinged."
    },
    "Function: get_trackback_url": {
        "prefix": "get_trackback_url",
        "body": "get_trackback_url(  )",
        "description": "Retrieve The current post&#039;s trackback URL."
    },
    "Function: get_transient": {
        "prefix": "get_transient",
        "body": "get_transient( ${1:\\$transient:string} )",
        "description": "Get the value of a transient."
    },
    "Function: get_translations_for_domain": {
        "prefix": "get_translations_for_domain",
        "body": "get_translations_for_domain( ${1:\\$domain:string} )",
        "description": "Return the Translations instance for a text domain."
    },
    "Function: get_udims": {
        "prefix": "get_udims",
        "body": "get_udims( ${1:\\$width:integer}, ${2:\\$height:integer} )",
        "description": "Calculated the new dimensions for a downsampled image."
    },
    "Function: get_upload_iframe_src": {
        "prefix": "get_upload_iframe_src",
        "body": "get_upload_iframe_src( ${1:\\$type:string|null}, ${2:\\$post_id:integer|null}, ${3:\\$tab:string|null} )",
        "description": ""
    },
    "Function: get_upload_space_available": {
        "prefix": "get_upload_space_available",
        "body": "get_upload_space_available(  )",
        "description": "Determines if there is any upload space left in the current blog&#039;s quota."
    },
    "Function: get_uploaded_header_images": {
        "prefix": "get_uploaded_header_images",
        "body": "get_uploaded_header_images(  )",
        "description": "Get the header images uploaded for the current theme."
    },
    "Function: get_url_in_content": {
        "prefix": "get_url_in_content",
        "body": "get_url_in_content( ${1:\\$content:string} )",
        "description": "Extract and return the first URL from passed content."
    },
    "Function: get_user_by": {
        "prefix": "get_user_by",
        "body": "get_user_by( ${1:\\$field:string}, ${2:\\$value:integer|string} )",
        "description": "Retrieve user info by a given field"
    },
    "Function: get_user_by_email": {
        "prefix": "get_user_by_email",
        "body": "get_user_by_email( ${1:\\$email:string} )",
        "description": "Retrieve user info by email."
    },
    "Function: get_user_count": {
        "prefix": "get_user_count",
        "body": "get_user_count( ${1:\\$network_id:integer|null} )",
        "description": "The number of active users in your installation."
    },
    "Function: get_user_details": {
        "prefix": "get_user_details",
        "body": "get_user_details( ${1:\\$username:string} )",
        "description": "Deprecated functionality to retrieve user information."
    },
    "Function: get_user_id_from_string": {
        "prefix": "get_user_id_from_string",
        "body": "get_user_id_from_string( ${1:\\$string:string} )",
        "description": "Get a numeric user ID from either an email address or a login."
    },
    "Function: get_user_locale": {
        "prefix": "get_user_locale",
        "body": "get_user_locale( ${1:\\$user_id:integer|WP_User} )",
        "description": "Retrieves the locale of a user."
    },
    "Function: get_user_meta": {
        "prefix": "get_user_meta",
        "body": "get_user_meta( ${1:\\$user_id:integer}, ${2:\\$key:string}, ${3:\\$single:boolean} )",
        "description": "Retrieve user meta field for a user."
    },
    "Function: get_user_metavalues": {
        "prefix": "get_user_metavalues",
        "body": "get_user_metavalues( ${1:\\$ids:array} )",
        "description": "Perform the query to get the $metavalues array(s) needed by _fill_user and _fill_many_users"
    },
    "Function: get_user_option": {
        "prefix": "get_user_option",
        "body": "get_user_option( ${1:\\$option:string}, ${2:\\$user:integer}, ${3:\\$deprecated:string} )",
        "description": "Retrieve user option that can be either per Site or per Network."
    },
    "Function: get_user_setting": {
        "prefix": "get_user_setting",
        "body": "get_user_setting( ${1:\\$name:string}, ${2:\\$default:string} )",
        "description": "Retrieve user interface setting value based on setting name."
    },
    "Function: get_user_to_edit": {
        "prefix": "get_user_to_edit",
        "body": "get_user_to_edit( ${1:\\$user_id:integer} )",
        "description": "Retrieve user data and filter it."
    },
    "Function: get_userdata": {
        "prefix": "get_userdata",
        "body": "get_userdata( ${1:\\$user_id:integer} )",
        "description": "Retrieve user info by user ID."
    },
    "Function: get_userdatabylogin": {
        "prefix": "get_userdatabylogin",
        "body": "get_userdatabylogin( ${1:\\$user_login:string} )",
        "description": "Retrieve user info by login name."
    },
    "Function: get_usermeta": {
        "prefix": "get_usermeta",
        "body": "get_usermeta( ${1:\\$user_id:integer}, ${2:\\$meta_key:string} )",
        "description": "Retrieve user metadata."
    },
    "Function: get_usernumposts": {
        "prefix": "get_usernumposts",
        "body": "get_usernumposts( ${1:\\$userid:integer} )",
        "description": "Retrieves the number of posts a user has written."
    },
    "Function: get_users": {
        "prefix": "get_users",
        "body": "get_users( ${1:\\$args:array} )",
        "description": "Retrieve list of users matching criteria."
    },
    "Function: get_users_drafts": {
        "prefix": "get_users_drafts",
        "body": "get_users_drafts( ${1:\\$user_id:integer} )",
        "description": "Retrieve the user&#039;s drafts."
    },
    "Function: get_users_of_blog": {
        "prefix": "get_users_of_blog",
        "body": "get_users_of_blog( ${1:\\$id:integer} )",
        "description": "Get users for the site."
    },
    "Function: get_weekstartend": {
        "prefix": "get_weekstartend",
        "body": "get_weekstartend( ${1:\\$mysqlstring:string}, ${2:\\$start_of_week:integer|string} )",
        "description": "Get the week start and end from the datetime or date string from MySQL."
    },
    "Function: get_wp_title_rss": {
        "prefix": "get_wp_title_rss",
        "body": "get_wp_title_rss( ${1:\\$deprecated:string} )",
        "description": "Retrieve the blog title for the feed title."
    },
    "Function: get_year_link": {
        "prefix": "get_year_link",
        "body": "get_year_link( ${1:\\$year:integer|boolean} )",
        "description": "Retrieves the permalink for the year archives."
    },
    "Function: global_terms": {
        "prefix": "global_terms",
        "body": "global_terms( ${1:\\$term_id:integer}, ${2:\\$deprecated:string} )",
        "description": "Maintains a canonical list of terms by syncing terms created for each blog with the global terms table."
    },
    "Function: global_terms_enabled": {
        "prefix": "global_terms_enabled",
        "body": "global_terms_enabled(  )",
        "description": "Determine whether global terms are enabled."
    },
    "Function: got_mod_rewrite": {
        "prefix": "got_mod_rewrite",
        "body": "got_mod_rewrite(  )",
        "description": "Returns whether the server is running Apache with the mod_rewrite module loaded."
    },
    "Function: got_url_rewrite": {
        "prefix": "got_url_rewrite",
        "body": "got_url_rewrite(  )",
        "description": "Returns whether the server supports URL rewriting."
    },
    "Function: graceful_fail": {
        "prefix": "graceful_fail",
        "body": "graceful_fail( ${1:\\$message:} )",
        "description": "Deprecated functionality to gracefully fail."
    },
    "Function: grant_super_admin": {
        "prefix": "grant_super_admin",
        "body": "grant_super_admin( ${1:\\$user_id:integer} )",
        "description": "Grants Super Admin privileges."
    },
    "Function: gzip_compression": {
        "prefix": "gzip_compression",
        "body": "gzip_compression(  )",
        "description": "Unused function."
    },
    "Function: has_action": {
        "prefix": "has_action",
        "body": "has_action( ${1:\\$tag:string}, ${2:\\$function_to_check:callable|boolean} )",
        "description": "Check if any action has been registered for a hook."
    },
    "Function: has_category": {
        "prefix": "has_category",
        "body": "has_category( ${1:\\$category:string|integer|array}, ${2:\\$post:integer|object|null} )",
        "description": "Check if the current post has any of given category."
    },
    "Function: has_custom_header": {
        "prefix": "has_custom_header",
        "body": "has_custom_header(  )",
        "description": "Check whether a custom header is set or not."
    },
    "Function: has_custom_logo": {
        "prefix": "has_custom_logo",
        "body": "has_custom_logo( ${1:\\$blog_id:integer} )",
        "description": "Determines whether the site has a custom logo."
    },
    "Function: has_excerpt": {
        "prefix": "has_excerpt",
        "body": "has_excerpt( ${1:\\$post:integer|WP_Post} )",
        "description": "Whether the post has a custom excerpt."
    },
    "Function: has_filter": {
        "prefix": "has_filter",
        "body": "has_filter( ${1:\\$tag:string}, ${2:\\$function_to_check:callable|boolean} )",
        "description": "Check if any filter has been registered for a hook."
    },
    "Function: has_header_image": {
        "prefix": "has_header_image",
        "body": "has_header_image(  )",
        "description": "Check whether a header image is set or not."
    },
    "Function: has_header_video": {
        "prefix": "has_header_video",
        "body": "has_header_video(  )",
        "description": "Check whether a header video is set or not."
    },
    "Function: has_image_size": {
        "prefix": "has_image_size",
        "body": "has_image_size( ${1:\\$name:string} )",
        "description": "Check if an image size exists."
    },
    "Function: has_meta": {
        "prefix": "has_meta",
        "body": "has_meta( ${1:\\$postid:integer} )",
        "description": "Get meta data for the given post ID."
    },
    "Function: has_nav_menu": {
        "prefix": "has_nav_menu",
        "body": "has_nav_menu( ${1:\\$location:string} )",
        "description": "Determines whether a registered nav menu location has a menu assigned to it."
    },
    "Function: has_post_format": {
        "prefix": "has_post_format",
        "body": "has_post_format( ${1:\\$format:string|array}, ${2:\\$post:object|integer|null} )",
        "description": "Check if a post has any of the given formats, or any format."
    },
    "Function: has_post_thumbnail": {
        "prefix": "has_post_thumbnail",
        "body": "has_post_thumbnail( ${1:\\$post:integer|WP_Post|null} )",
        "description": "Check if post has an image attached."
    },
    "Function: has_shortcode": {
        "prefix": "has_shortcode",
        "body": "has_shortcode( ${1:\\$content:string}, ${2:\\$tag:string} )",
        "description": "Whether the passed content contains the specified shortcode"
    },
    "Function: has_site_icon": {
        "prefix": "has_site_icon",
        "body": "has_site_icon( ${1:\\$blog_id:integer} )",
        "description": "Whether the site has a Site Icon."
    },
    "Function: has_tag": {
        "prefix": "has_tag",
        "body": "has_tag( ${1:\\$tag:string|integer|array}, ${2:\\$post:integer|object|null} )",
        "description": "Check if the current post has any of given tags."
    },
    "Function: has_term": {
        "prefix": "has_term",
        "body": "has_term( ${1:\\$term:string|integer|array}, ${2:\\$taxonomy:string}, ${3:\\$post:integer|object|null} )",
        "description": "Check if the current post has any of given terms."
    },
    "Function: has_term_meta": {
        "prefix": "has_term_meta",
        "body": "has_term_meta( ${1:\\$term_id:integer} )",
        "description": "Get all meta data, including meta IDs, for the given term ID."
    },
    "Function: hash_equals": {
        "prefix": "hash_equals",
        "body": "hash_equals( ${1:\\$a:string}, ${2:\\$b:string} )",
        "description": "Timing attack safe string comparison"
    },
    "Function: have_comments": {
        "prefix": "have_comments",
        "body": "have_comments(  )",
        "description": "Whether there are comments to loop over."
    },
    "Function: have_posts": {
        "prefix": "have_posts",
        "body": "have_posts(  )",
        "description": "Whether current WordPress query has results to loop over."
    },
    "Function: header_image": {
        "prefix": "header_image",
        "body": "header_image(  )",
        "description": "Display header image URL."
    },
    "Function: header_textcolor": {
        "prefix": "header_textcolor",
        "body": "header_textcolor(  )",
        "description": "Displays the custom header text color in 3- or 6-digit hexadecimal form (minus the hash symbol)."
    },
    "Function: heartbeat_autosave": {
        "prefix": "heartbeat_autosave",
        "body": "heartbeat_autosave( ${1:\\$response:array}, ${2:\\$data:array} )",
        "description": "Autosave with heartbeat"
    },
    "Function: hello_dolly": {
        "prefix": "hello_dolly",
        "body": "hello_dolly(  )",
        "description": ""
    },
    "Function: hello_dolly_get_lyric": {
        "prefix": "hello_dolly_get_lyric",
        "body": "hello_dolly_get_lyric(  )",
        "description": ""
    },
    "Function: home_url": {
        "prefix": "home_url",
        "body": "home_url( ${1:\\$path:string}, ${2:\\$scheme:string|null} )",
        "description": "Retrieves the URL for the current site where the front end is accessible."
    },
    "Function: html_type_rss": {
        "prefix": "html_type_rss",
        "body": "html_type_rss(  )",
        "description": "Display the HTML type based on the blog setting."
    },
    "Function: htmlentities2": {
        "prefix": "htmlentities2",
        "body": "htmlentities2( ${1:\\$myHTML:string} )",
        "description": "Convert entities, while preserving already-encoded entities."
    },
    "Function: human_time_diff": {
        "prefix": "human_time_diff",
        "body": "human_time_diff( ${1:\\$from:integer}, ${2:\\$to:integer} )",
        "description": "Determines the difference between two timestamps."
    },
    "Function: iframe_footer": {
        "prefix": "iframe_footer",
        "body": "iframe_footer(  )",
        "description": "Generic Iframe footer for use with Thickbox"
    },
    "Function: iframe_header": {
        "prefix": "iframe_header",
        "body": "iframe_header( ${1:\\$title:string}, ${2:\\$deprecated:boolean} )",
        "description": "Generic Iframe header for use with Thickbox"
    },
    "Function: iis7_add_rewrite_rule": {
        "prefix": "iis7_add_rewrite_rule",
        "body": "iis7_add_rewrite_rule( ${1:\\$filename:string}, ${2:\\$rewrite_rule:string} )",
        "description": "Add WordPress rewrite rule to the IIS 7+ configuration file."
    },
    "Function: iis7_delete_rewrite_rule": {
        "prefix": "iis7_delete_rewrite_rule",
        "body": "iis7_delete_rewrite_rule( ${1:\\$filename:string} )",
        "description": "Delete WordPress rewrite rule from web.config file if it exists there"
    },
    "Function: iis7_rewrite_rule_exists": {
        "prefix": "iis7_rewrite_rule_exists",
        "body": "iis7_rewrite_rule_exists( ${1:\\$filename:string} )",
        "description": "Check if rewrite rule for WordPress already exists in the IIS 7+ configuration file"
    },
    "Function: iis7_save_url_rewrite_rules": {
        "prefix": "iis7_save_url_rewrite_rules",
        "body": "iis7_save_url_rewrite_rules(  )",
        "description": "Updates the IIS web.config file with the current rules if it is writable."
    },
    "Function: iis7_supports_permalinks": {
        "prefix": "iis7_supports_permalinks",
        "body": "iis7_supports_permalinks(  )",
        "description": "Check if IIS 7+ supports pretty permalinks."
    },
    "Function: image_add_caption": {
        "prefix": "image_add_caption",
        "body": "image_add_caption( ${1:\\$html:string}, ${2:\\$id:integer}, ${3:\\$caption:string}, ${4:\\$title:string}, ${5:\\$align:string}, ${6:\\$url:string}, ${7:\\$size:string}, ${8:\\$alt:string} )",
        "description": "Adds image shortcode with caption to editor"
    },
    "Function: image_align_input_fields": {
        "prefix": "image_align_input_fields",
        "body": "image_align_input_fields( ${1:\\$post:WP_Post}, ${2:\\$checked:string} )",
        "description": "Retrieve HTML for the image alignment radio buttons with the specified one checked."
    },
    "Function: image_attachment_fields_to_edit": {
        "prefix": "image_attachment_fields_to_edit",
        "body": "image_attachment_fields_to_edit( ${1:\\$form_fields:array}, ${2:\\$post:object} )",
        "description": "Retrieves the image attachment fields to edit form fields."
    },
    "Function: image_attachment_fields_to_save": {
        "prefix": "image_attachment_fields_to_save",
        "body": "image_attachment_fields_to_save( ${1:\\$post:array}, ${2:\\$attachment:array} )",
        "description": "Filters input from media_upload_form_handler() and assigns a default post_title from the file name if none supplied."
    },
    "Function: image_constrain_size_for_editor": {
        "prefix": "image_constrain_size_for_editor",
        "body": "image_constrain_size_for_editor( ${1:\\$width:integer}, ${2:\\$height:integer}, ${3:\\$size:string|array}, ${4:\\$context:string|null} )",
        "description": "Scale down the default size of an image."
    },
    "Function: image_downsize": {
        "prefix": "image_downsize",
        "body": "image_downsize( ${1:\\$id:integer}, ${2:\\$size:array|string} )",
        "description": "Scale an image to fit a particular size (such as &#039;thumb&#039; or &#039;medium&#039;)."
    },
    "Function: image_edit_apply_changes": {
        "prefix": "image_edit_apply_changes",
        "body": "image_edit_apply_changes( ${1:\\$image:WP_Image_Editor}, ${2:\\$changes:array} )",
        "description": "Performs group of changes on Editor specified."
    },
    "Function: image_get_intermediate_size": {
        "prefix": "image_get_intermediate_size",
        "body": "image_get_intermediate_size( ${1:\\$post_id:integer}, ${2:\\$size:array|string} )",
        "description": "Retrieves the image&#039;s intermediate size (resized) path, width, and height."
    },
    "Function: image_hwstring": {
        "prefix": "image_hwstring",
        "body": "image_hwstring( ${1:\\$width:integer|string}, ${2:\\$height:integer|string} )",
        "description": "Retrieve width and height attributes using given width and height values."
    },
    "Function: image_link_input_fields": {
        "prefix": "image_link_input_fields",
        "body": "image_link_input_fields( ${1:\\$post:WP_Post}, ${2:\\$url_type:string} )",
        "description": "Retrieve HTML for the Link URL buttons with the default link type as specified."
    },
    "Function: image_make_intermediate_size": {
        "prefix": "image_make_intermediate_size",
        "body": "image_make_intermediate_size( ${1:\\$file:string}, ${2:\\$width:integer}, ${3:\\$height:integer}, ${4:\\$crop:boolean} )",
        "description": "Resizes an image to make a thumbnail or intermediate size."
    },
    "Function: image_media_send_to_editor": {
        "prefix": "image_media_send_to_editor",
        "body": "image_media_send_to_editor( ${1:\\$html:string}, ${2:\\$attachment_id:integer}, ${3:\\$attachment:array} )",
        "description": "Retrieves the media element HTML to send to the editor."
    },
    "Function: image_resize": {
        "prefix": "image_resize",
        "body": "image_resize( ${1:\\$file:string}, ${2:\\$max_w:integer}, ${3:\\$max_h:integer}, ${4:\\$crop:boolean}, ${5:\\$suffix:string|null}, ${6:\\$dest_path:string|null}, ${7:\\$jpeg_quality:integer} )",
        "description": "Scale down an image to fit a particular size and save a new copy of the image."
    },
    "Function: image_resize_dimensions": {
        "prefix": "image_resize_dimensions",
        "body": "image_resize_dimensions( ${1:\\$orig_w:integer}, ${2:\\$orig_h:integer}, ${3:\\$dest_w:integer}, ${4:\\$dest_h:integer}, ${5:\\$crop:boolean|array} )",
        "description": "Retrieves calculated resize dimensions for use in WP_Image_Editor."
    },
    "Function: image_size_input_fields": {
        "prefix": "image_size_input_fields",
        "body": "image_size_input_fields( ${1:\\$post:WP_Post}, ${2:\\$check:boolean|string} )",
        "description": "Retrieve HTML for the size radio buttons with the specified one checked."
    },
    "Function: img_caption_shortcode": {
        "prefix": "img_caption_shortcode",
        "body": "img_caption_shortcode( ${1:\\$attr:array}, ${2:\\$content:string|null} )",
        "description": "Builds the Caption shortcode output."
    },
    "Function: in_category": {
        "prefix": "in_category",
        "body": "in_category( ${1:\\$category:integer|string|array}, ${2:\\$post:integer|object|null} )",
        "description": "Check if the current post is within any of the given categories."
    },
    "Function: in_the_loop": {
        "prefix": "in_the_loop",
        "body": "in_the_loop(  )",
        "description": "Whether the caller is in the Loop."
    },
    "Function: includes_url": {
        "prefix": "includes_url",
        "body": "includes_url( ${1:\\$path:string}, ${2:\\$scheme:string|null} )",
        "description": "Retrieves the URL to the includes directory."
    },
    "Function: index_rel_link": {
        "prefix": "index_rel_link",
        "body": "index_rel_link(  )",
        "description": "Display relational link for the site index."
    },
    "Function: init": {
        "prefix": "init",
        "body": "init(  )",
        "description": "Set up constants with default values, unless user overrides."
    },
    "Function: insert_blog": {
        "prefix": "insert_blog",
        "body": "insert_blog( ${1:\\$domain:string}, ${2:\\$path:string}, ${3:\\$network_id:integer} )",
        "description": "Store basic site info in the blogs table."
    },
    "Function: insert_with_markers": {
        "prefix": "insert_with_markers",
        "body": "insert_with_markers( ${1:\\$filename:string}, ${2:\\$marker:string}, ${3:\\$insertion:array|string} )",
        "description": "Inserts an array of strings into a file (.htaccess ), placing it between BEGIN and END markers."
    },
    "Function: install_blog": {
        "prefix": "install_blog",
        "body": "install_blog( ${1:\\$blog_id:integer}, ${2:\\$blog_title:string} )",
        "description": "Install an empty blog."
    },
    "Function: install_blog_defaults": {
        "prefix": "install_blog_defaults",
        "body": "install_blog_defaults( ${1:\\$blog_id:integer}, ${2:\\$user_id:integer} )",
        "description": "Set blog defaults."
    },
    "Function: install_dashboard": {
        "prefix": "install_dashboard",
        "body": "install_dashboard(  )",
        "description": ""
    },
    "Function: install_global_terms": {
        "prefix": "install_global_terms",
        "body": "install_global_terms(  )",
        "description": "Install global terms."
    },
    "Function: install_network": {
        "prefix": "install_network",
        "body": "install_network(  )",
        "description": "Install Network."
    },
    "Function: install_plugin_information": {
        "prefix": "install_plugin_information",
        "body": "install_plugin_information(  )",
        "description": "Display plugin information in dialog box form."
    },
    "Function: install_plugin_install_status": {
        "prefix": "install_plugin_install_status",
        "body": "install_plugin_install_status( ${1:\\$api:array|object}, ${2:\\$loop:boolean} )",
        "description": "Determine the status we can perform on a plugin."
    },
    "Function: install_plugins_favorites_form": {
        "prefix": "install_plugins_favorites_form",
        "body": "install_plugins_favorites_form(  )",
        "description": "Show a username form for the favorites page"
    },
    "Function: install_plugins_upload": {
        "prefix": "install_plugins_upload",
        "body": "install_plugins_upload(  )",
        "description": "Upload from zip"
    },
    "Function: install_popular_tags": {
        "prefix": "install_popular_tags",
        "body": "install_popular_tags( ${1:\\$args:array} )",
        "description": "Retrieve popular WordPress plugin tags."
    },
    "Function: install_search_form": {
        "prefix": "install_search_form",
        "body": "install_search_form( ${1:\\$deprecated:boolean} )",
        "description": "Displays a search form for searching plugins."
    },
    "Function: install_theme_information": {
        "prefix": "install_theme_information",
        "body": "install_theme_information(  )",
        "description": "Display theme information in dialog box form."
    },
    "Function: install_theme_search_form": {
        "prefix": "install_theme_search_form",
        "body": "install_theme_search_form( ${1:\\$type_selector:boolean} )",
        "description": "Display search form for searching themes."
    },
    "Function: install_themes_dashboard": {
        "prefix": "install_themes_dashboard",
        "body": "install_themes_dashboard(  )",
        "description": "Display tags filter for themes."
    },
    "Function: install_themes_feature_list": {
        "prefix": "install_themes_feature_list",
        "body": "install_themes_feature_list(  )",
        "description": "Retrieve list of WordPress theme features (aka theme tags)"
    },
    "Function: install_themes_upload": {
        "prefix": "install_themes_upload",
        "body": "install_themes_upload(  )",
        "description": ""
    },
    "Function: is_404": {
        "prefix": "is_404",
        "body": "is_404(  )",
        "description": "Is the query a 404 (returns no results)?"
    },
    "Function: is_active_sidebar": {
        "prefix": "is_active_sidebar",
        "body": "is_active_sidebar( ${1:\\$index:string|integer} )",
        "description": "Whether a sidebar is in use."
    },
    "Function: is_active_widget": {
        "prefix": "is_active_widget",
        "body": "is_active_widget( ${1:\\$callback:string|false}, ${2:\\$widget_id:integer|false}, ${3:\\$id_base:string|false}, ${4:\\$skip_inactive:boolean} )",
        "description": "Whether widget is displayed on the front end."
    },
    "Function: is_admin": {
        "prefix": "is_admin",
        "body": "is_admin(  )",
        "description": "Whether the current request is for an administrative interface page."
    },
    "Function: is_admin_bar_showing": {
        "prefix": "is_admin_bar_showing",
        "body": "is_admin_bar_showing(  )",
        "description": "Determine whether the admin bar should be showing."
    },
    "Function: is_allowed_http_origin": {
        "prefix": "is_allowed_http_origin",
        "body": "is_allowed_http_origin( ${1:\\$origin:null|string} )",
        "description": "Determines if the HTTP origin is an authorized one."
    },
    "Function: is_archive": {
        "prefix": "is_archive",
        "body": "is_archive(  )",
        "description": "Is the query for an existing archive page?"
    },
    "Function: is_archived": {
        "prefix": "is_archived",
        "body": "is_archived( ${1:\\$id:integer} )",
        "description": "Check if a particular blog is archived."
    },
    "Function: is_attachment": {
        "prefix": "is_attachment",
        "body": "is_attachment( ${1:\\$attachment:integer|string|array|object} )",
        "description": "Is the query for an existing attachment page?"
    },
    "Function: is_author": {
        "prefix": "is_author",
        "body": "is_author( ${1:\\$author:mixed} )",
        "description": "Is the query for an existing author archive page?"
    },
    "Function: is_blog_admin": {
        "prefix": "is_blog_admin",
        "body": "is_blog_admin(  )",
        "description": "Whether the current request is for a site&#039;s admininstrative interface."
    },
    "Function: is_blog_installed": {
        "prefix": "is_blog_installed",
        "body": "is_blog_installed(  )",
        "description": "Test whether WordPress is already installed."
    },
    "Function: is_blog_user": {
        "prefix": "is_blog_user",
        "body": "is_blog_user( ${1:\\$blog_id:integer} )",
        "description": "Checks if the current user belong to a given site."
    },
    "Function: is_category": {
        "prefix": "is_category",
        "body": "is_category( ${1:\\$category:mixed} )",
        "description": "Is the query for an existing category archive page?"
    },
    "Function: is_child_theme": {
        "prefix": "is_child_theme",
        "body": "is_child_theme(  )",
        "description": "Whether a child theme is in use."
    },
    "Function: is_client_error": {
        "prefix": "is_client_error",
        "body": "is_client_error( ${1:\\$sc:} )",
        "description": ""
    },
    "Function: is_comment_feed": {
        "prefix": "is_comment_feed",
        "body": "is_comment_feed(  )",
        "description": "Is the query for a comments feed?"
    },
    "Function: is_comments_popup": {
        "prefix": "is_comments_popup",
        "body": "is_comments_popup(  )",
        "description": "Whether the current URL is within the comments popup window."
    },
    "Function: is_countable": {
        "prefix": "is_countable",
        "body": "is_countable( ${1:\\$var:mixed} )",
        "description": "Polyfill for is_countable() function added in PHP 7.3."
    },
    "Function: is_customize_preview": {
        "prefix": "is_customize_preview",
        "body": "is_customize_preview(  )",
        "description": "Whether the site is being previewed in the Customizer."
    },
    "Function: is_date": {
        "prefix": "is_date",
        "body": "is_date(  )",
        "description": "Is the query for an existing date archive?"
    },
    "Function: is_day": {
        "prefix": "is_day",
        "body": "is_day(  )",
        "description": "Is the query for an existing day archive?"
    },
    "Function: is_dynamic_sidebar": {
        "prefix": "is_dynamic_sidebar",
        "body": "is_dynamic_sidebar(  )",
        "description": "Whether the dynamic sidebar is enabled and used by theme."
    },
    "Function: is_email": {
        "prefix": "is_email",
        "body": "is_email( ${1:\\$email:string}, ${2:\\$deprecated:boolean} )",
        "description": "Verifies that an email is valid."
    },
    "Function: is_email_address_unsafe": {
        "prefix": "is_email_address_unsafe",
        "body": "is_email_address_unsafe( ${1:\\$user_email:string} )",
        "description": "Checks an email address against a list of banned domains."
    },
    "Function: is_embed": {
        "prefix": "is_embed",
        "body": "is_embed(  )",
        "description": "Is the query for an embedded post?"
    },
    "Function: is_error": {
        "prefix": "is_error",
        "body": "is_error( ${1:\\$sc:} )",
        "description": ""
    },
    "Function: is_feed": {
        "prefix": "is_feed",
        "body": "is_feed( ${1:\\$feeds:string|array} )",
        "description": "Is the query for a feed?"
    },
    "Function: is_front_page": {
        "prefix": "is_front_page",
        "body": "is_front_page(  )",
        "description": "Is the query for the front page of the site?"
    },
    "Function: is_header_video_active": {
        "prefix": "is_header_video_active",
        "body": "is_header_video_active(  )",
        "description": "Checks whether the custom header video is eligible to show on the current page."
    },
    "Function: is_home": {
        "prefix": "is_home",
        "body": "is_home(  )",
        "description": "Determines if the query is for the blog homepage."
    },
    "Function: is_info": {
        "prefix": "is_info",
        "body": "is_info( ${1:\\$sc:} )",
        "description": ""
    },
    "Function: is_iterable": {
        "prefix": "is_iterable",
        "body": "is_iterable( ${1:\\$var:mixed} )",
        "description": "Polyfill for is_iterable() function added in PHP 7.1."
    },
    "Function: is_lighttpd_before_150": {
        "prefix": "is_lighttpd_before_150",
        "body": "is_lighttpd_before_150(  )",
        "description": "Is the server running earlier than 1.5.0 version of lighttpd?"
    },
    "Function: is_local_attachment": {
        "prefix": "is_local_attachment",
        "body": "is_local_attachment( ${1:\\$url:string} )",
        "description": "Check if the attachment URI is local one and is really an attachment."
    },
    "Function: is_locale_switched": {
        "prefix": "is_locale_switched",
        "body": "is_locale_switched(  )",
        "description": "Whether switch_to_locale() is in effect."
    },
    "Function: is_main_blog": {
        "prefix": "is_main_blog",
        "body": "is_main_blog(  )",
        "description": "Deprecated functionality to determin if the current site is the main site."
    },
    "Function: is_main_network": {
        "prefix": "is_main_network",
        "body": "is_main_network( ${1:\\$network_id:integer|null} )",
        "description": "Determine whether a network is the main network of the Multisite installation."
    },
    "Function: is_main_query": {
        "prefix": "is_main_query",
        "body": "is_main_query(  )",
        "description": "Is the query the main query?"
    },
    "Function: is_main_site": {
        "prefix": "is_main_site",
        "body": "is_main_site( ${1:\\$site_id:integer|null}, ${2:\\$network_id:integer|null} )",
        "description": "Determine whether a site is the main site of the current network."
    },
    "Function: is_month": {
        "prefix": "is_month",
        "body": "is_month(  )",
        "description": "Is the query for an existing month archive?"
    },
    "Function: is_multi_author": {
        "prefix": "is_multi_author",
        "body": "is_multi_author(  )",
        "description": "Does this site have more than one author"
    },
    "Function: is_multisite": {
        "prefix": "is_multisite",
        "body": "is_multisite(  )",
        "description": "If Multisite is enabled."
    },
    "Function: is_nav_menu": {
        "prefix": "is_nav_menu",
        "body": "is_nav_menu( ${1:\\$menu:integer|string|WP_Term} )",
        "description": "Check if the given ID is a navigation menu."
    },
    "Function: is_nav_menu_item": {
        "prefix": "is_nav_menu_item",
        "body": "is_nav_menu_item( ${1:\\$menu_item_id:integer} )",
        "description": "Determines whether the given ID is a nav menu item."
    },
    "Function: is_network_admin": {
        "prefix": "is_network_admin",
        "body": "is_network_admin(  )",
        "description": "Whether the current request is for the network administrative interface."
    },
    "Function: is_network_only_plugin": {
        "prefix": "is_network_only_plugin",
        "body": "is_network_only_plugin( ${1:\\$plugin:string} )",
        "description": "Checks for &quot;Network: true&quot; in the plugin header to see if this should be activated only as a network wide plugin. The plugin would also work when Multisite is not enabled."
    },
    "Function: is_new_day": {
        "prefix": "is_new_day",
        "body": "is_new_day(  )",
        "description": "Whether the publish date of the current post in the loop is different from the publish date of the previous post in the loop."
    },
    "Function: is_object_in_taxonomy": {
        "prefix": "is_object_in_taxonomy",
        "body": "is_object_in_taxonomy( ${1:\\$object_type:string}, ${2:\\$taxonomy:string} )",
        "description": "Determine if the given object type is associated with the given taxonomy."
    },
    "Function: is_object_in_term": {
        "prefix": "is_object_in_term",
        "body": "is_object_in_term( ${1:\\$object_id:integer}, ${2:\\$taxonomy:string}, ${3:\\$terms:integer|string|array|null} )",
        "description": "Determine if the given object is associated with any of the given terms."
    },
    "Function: is_page": {
        "prefix": "is_page",
        "body": "is_page( ${1:\\$page:integer|string|array} )",
        "description": "Is the query for an existing single page?"
    },
    "Function: is_page_template": {
        "prefix": "is_page_template",
        "body": "is_page_template( ${1:\\$template:string|array} )",
        "description": "Whether currently in a page template."
    },
    "Function: is_paged": {
        "prefix": "is_paged",
        "body": "is_paged(  )",
        "description": "Is the query for paged result and not for the first page?"
    },
    "Function: is_plugin_active": {
        "prefix": "is_plugin_active",
        "body": "is_plugin_active( ${1:\\$plugin:string} )",
        "description": "Check whether a plugin is active."
    },
    "Function: is_plugin_active_for_network": {
        "prefix": "is_plugin_active_for_network",
        "body": "is_plugin_active_for_network( ${1:\\$plugin:string} )",
        "description": "Check whether the plugin is active for the entire network."
    },
    "Function: is_plugin_inactive": {
        "prefix": "is_plugin_inactive",
        "body": "is_plugin_inactive( ${1:\\$plugin:string} )",
        "description": "Check whether the plugin is inactive."
    },
    "Function: is_plugin_page": {
        "prefix": "is_plugin_page",
        "body": "is_plugin_page(  )",
        "description": "Is the current admin page generated by a plugin?"
    },
    "Function: is_post_type_archive": {
        "prefix": "is_post_type_archive",
        "body": "is_post_type_archive( ${1:\\$post_types:string|array} )",
        "description": "Is the query for an existing post type archive page?"
    },
    "Function: is_post_type_hierarchical": {
        "prefix": "is_post_type_hierarchical",
        "body": "is_post_type_hierarchical( ${1:\\$post_type:string} )",
        "description": "Whether the post type is hierarchical."
    },
    "Function: is_post_type_viewable": {
        "prefix": "is_post_type_viewable",
        "body": "is_post_type_viewable( ${1:\\$post_type:string|WP_Post_Type} )",
        "description": "Determines whether a post type is considered &quot;viewable&quot;."
    },
    "Function: is_preview": {
        "prefix": "is_preview",
        "body": "is_preview(  )",
        "description": "Is the query for a post or page preview?"
    },
    "Function: is_protected_meta": {
        "prefix": "is_protected_meta",
        "body": "is_protected_meta( ${1:\\$meta_key:string}, ${2:\\$meta_type:string|null} )",
        "description": "Determine whether a meta key is protected."
    },
    "Function: is_random_header_image": {
        "prefix": "is_random_header_image",
        "body": "is_random_header_image( ${1:\\$type:string} )",
        "description": "Check if random header image is in use."
    },
    "Function: is_redirect": {
        "prefix": "is_redirect",
        "body": "is_redirect( ${1:\\$sc:} )",
        "description": ""
    },
    "Function: is_registered_sidebar": {
        "prefix": "is_registered_sidebar",
        "body": "is_registered_sidebar( ${1:\\$sidebar_id:string|integer} )",
        "description": "Checks if a sidebar is registered."
    },
    "Function: is_robots": {
        "prefix": "is_robots",
        "body": "is_robots(  )",
        "description": "Is the query for the robots file?"
    },
    "Function: is_rtl": {
        "prefix": "is_rtl",
        "body": "is_rtl(  )",
        "description": "Checks if current locale is RTL."
    },
    "Function: is_search": {
        "prefix": "is_search",
        "body": "is_search(  )",
        "description": "Is the query for a search?"
    },
    "Function: is_serialized": {
        "prefix": "is_serialized",
        "body": "is_serialized( ${1:\\$data:string}, ${2:\\$strict:boolean} )",
        "description": "Check value to find if it was serialized."
    },
    "Function: is_serialized_string": {
        "prefix": "is_serialized_string",
        "body": "is_serialized_string( ${1:\\$data:string} )",
        "description": "Check whether serialized data is of string type."
    },
    "Function: is_server_error": {
        "prefix": "is_server_error",
        "body": "is_server_error( ${1:\\$sc:} )",
        "description": ""
    },
    "Function: is_single": {
        "prefix": "is_single",
        "body": "is_single( ${1:\\$post:integer|string|array} )",
        "description": "Is the query for an existing single post?"
    },
    "Function: is_singular": {
        "prefix": "is_singular",
        "body": "is_singular( ${1:\\$post_types:string|array} )",
        "description": "Is the query for an existing single post of any post type (post, attachment, page, custom post types)?"
    },
    "Function: is_site_admin": {
        "prefix": "is_site_admin",
        "body": "is_site_admin( ${1:\\$user_login:string} )",
        "description": "Determine if user is a site admin."
    },
    "Function: is_ssl": {
        "prefix": "is_ssl",
        "body": "is_ssl(  )",
        "description": "Determines if SSL is used."
    },
    "Function: is_sticky": {
        "prefix": "is_sticky",
        "body": "is_sticky( ${1:\\$post_id:integer} )",
        "description": "Check if post is sticky."
    },
    "Function: is_subdomain_install": {
        "prefix": "is_subdomain_install",
        "body": "is_subdomain_install(  )",
        "description": "Whether a subdomain configuration is enabled."
    },
    "Function: is_success": {
        "prefix": "is_success",
        "body": "is_success( ${1:\\$sc:} )",
        "description": ""
    },
    "Function: is_super_admin": {
        "prefix": "is_super_admin",
        "body": "is_super_admin( ${1:\\$user_id:integer} )",
        "description": "Determine if user is a site admin."
    },
    "Function: is_tag": {
        "prefix": "is_tag",
        "body": "is_tag( ${1:\\$tag:mixed} )",
        "description": "Is the query for an existing tag archive page?"
    },
    "Function: is_tax": {
        "prefix": "is_tax",
        "body": "is_tax( ${1:\\$taxonomy:string|array}, ${2:\\$term:integer|string|array} )",
        "description": "Is the query for an existing custom taxonomy archive page?"
    },
    "Function: is_taxonomy": {
        "prefix": "is_taxonomy",
        "body": "is_taxonomy( ${1:\\$taxonomy:string} )",
        "description": "Checks that the taxonomy name exists."
    },
    "Function: is_taxonomy_hierarchical": {
        "prefix": "is_taxonomy_hierarchical",
        "body": "is_taxonomy_hierarchical( ${1:\\$taxonomy:string} )",
        "description": "Whether the taxonomy object is hierarchical."
    },
    "Function: is_term": {
        "prefix": "is_term",
        "body": "is_term( ${1:\\$term:integer|string}, ${2:\\$taxonomy:string}, ${3:\\$parent:integer} )",
        "description": "Check if Term exists."
    },
    "Function: is_textdomain_loaded": {
        "prefix": "is_textdomain_loaded",
        "body": "is_textdomain_loaded( ${1:\\$domain:string} )",
        "description": "Whether there are translations for the text domain."
    },
    "Function: is_time": {
        "prefix": "is_time",
        "body": "is_time(  )",
        "description": "Is the query for a specific time?"
    },
    "Function: is_trackback": {
        "prefix": "is_trackback",
        "body": "is_trackback(  )",
        "description": "Is the query for a trackback endpoint call?"
    },
    "Function: is_uninstallable_plugin": {
        "prefix": "is_uninstallable_plugin",
        "body": "is_uninstallable_plugin( ${1:\\$plugin:string} )",
        "description": "Whether the plugin can be uninstalled."
    },
    "Function: is_upload_space_available": {
        "prefix": "is_upload_space_available",
        "body": "is_upload_space_available(  )",
        "description": "Determines if there is any upload space left in the current blog&#039;s quota."
    },
    "Function: is_user_admin": {
        "prefix": "is_user_admin",
        "body": "is_user_admin(  )",
        "description": "Whether the current request is for a user admin screen."
    },
    "Function: is_user_logged_in": {
        "prefix": "is_user_logged_in",
        "body": "is_user_logged_in(  )",
        "description": "Checks if the current visitor is a logged in user."
    },
    "Function: is_user_member_of_blog": {
        "prefix": "is_user_member_of_blog",
        "body": "is_user_member_of_blog( ${1:\\$user_id:integer}, ${2:\\$blog_id:integer} )",
        "description": "Find out whether a user is a member of a given blog."
    },
    "Function: is_user_option_local": {
        "prefix": "is_user_option_local",
        "body": "is_user_option_local( ${1:\\$key:string}, ${2:\\$user_id:integer}, ${3:\\$blog_id:integer} )",
        "description": "Check whether a usermeta key has to do with the current blog."
    },
    "Function: is_user_spammy": {
        "prefix": "is_user_spammy",
        "body": "is_user_spammy( ${1:\\$user:string|WP_User|null} )",
        "description": "Check to see whether a user is marked as a spammer, based on user login."
    },
    "Function: is_wp_error": {
        "prefix": "is_wp_error",
        "body": "is_wp_error( ${1:\\$thing:mixed} )",
        "description": "Check whether variable is a WordPress Error."
    },
    "Function: is_wpmu_sitewide_plugin": {
        "prefix": "is_wpmu_sitewide_plugin",
        "body": "is_wpmu_sitewide_plugin( ${1:\\$file:} )",
        "description": "Deprecated functionality for determining if the current plugin is network-only."
    },
    "Function: is_year": {
        "prefix": "is_year",
        "body": "is_year(  )",
        "description": "Is the query for an existing year archive?"
    },
    "Function: iso8601_timezone_to_offset": {
        "prefix": "iso8601_timezone_to_offset",
        "body": "iso8601_timezone_to_offset( ${1:\\$timezone:string} )",
        "description": "Computes an offset in seconds from an iso8601 timezone."
    },
    "Function: iso8601_to_datetime": {
        "prefix": "iso8601_to_datetime",
        "body": "iso8601_to_datetime( ${1:\\$date_string:string}, ${2:\\$timezone:string} )",
        "description": "Converts an iso8601 date to MySQL DateTime format used by post_date[_gmt]."
    },
    "Function: js_escape": {
        "prefix": "js_escape",
        "body": "js_escape( ${1:\\$text:string} )",
        "description": "Escape single quotes, specialchar double quotes, and fix line endings."
    },
    "Function: json_decode": {
        "prefix": "json_decode",
        "body": "json_decode( ${1:\\$string:string}, ${2:\\$assoc_array:boolean} )",
        "description": ""
    },
    "Function: json_encode": {
        "prefix": "json_encode",
        "body": "json_encode( ${1:\\$string:} )",
        "description": ""
    },
    "Function: kses_init": {
        "prefix": "kses_init",
        "body": "kses_init(  )",
        "description": "Sets up most of the Kses filters for input form content."
    },
    "Function: kses_init_filters": {
        "prefix": "kses_init_filters",
        "body": "kses_init_filters(  )",
        "description": "Adds all Kses input form content filters."
    },
    "Function: kses_remove_filters": {
        "prefix": "kses_remove_filters",
        "body": "kses_remove_filters(  )",
        "description": "Removes all Kses input form content filters."
    },
    "Function: language_attributes": {
        "prefix": "language_attributes",
        "body": "language_attributes( ${1:\\$doctype:string} )",
        "description": "Displays the language attributes for the html tag."
    },
    "Function: like_escape": {
        "prefix": "like_escape",
        "body": "like_escape( ${1:\\$text:string} )",
        "description": "Formerly used to escape strings before searching the DB. It was poorly documented and never worked as described."
    },
    "Function: link_advanced_meta_box": {
        "prefix": "link_advanced_meta_box",
        "body": "link_advanced_meta_box( ${1:\\$link:object} )",
        "description": "Display advanced link options form fields."
    },
    "Function: link_categories_meta_box": {
        "prefix": "link_categories_meta_box",
        "body": "link_categories_meta_box( ${1:\\$link:object} )",
        "description": "Display link categories form fields."
    },
    "Function: link_pages": {
        "prefix": "link_pages",
        "body": "link_pages( ${1:\\$before:string}, ${2:\\$after:string}, ${3:\\$next_or_number:string}, ${4:\\$nextpagelink:string}, ${5:\\$previouspagelink:string}, ${6:\\$pagelink:string}, ${7:\\$more_file:string} )",
        "description": "Print list of pages based on arguments."
    },
    "Function: link_submit_meta_box": {
        "prefix": "link_submit_meta_box",
        "body": "link_submit_meta_box( ${1:\\$link:object} )",
        "description": "Display link create form fields."
    },
    "Function: link_target_meta_box": {
        "prefix": "link_target_meta_box",
        "body": "link_target_meta_box( ${1:\\$link:object} )",
        "description": "Display form fields for changing link target."
    },
    "Function: link_xfn_meta_box": {
        "prefix": "link_xfn_meta_box",
        "body": "link_xfn_meta_box( ${1:\\$link:object} )",
        "description": "Display xfn form fields."
    },
    "Function: links_add_base_url": {
        "prefix": "links_add_base_url",
        "body": "links_add_base_url( ${1:\\$content:string}, ${2:\\$base:string}, ${3:\\$attrs:array} )",
        "description": "Add a Base url to relative links in passed content."
    },
    "Function: links_add_target": {
        "prefix": "links_add_target",
        "body": "links_add_target( ${1:\\$content:string}, ${2:\\$target:string}, ${3:\\$tags:array} )",
        "description": "Adds a Target attribute to all links in passed content."
    },
    "Function: links_popup_script": {
        "prefix": "links_popup_script",
        "body": "links_popup_script( ${1:\\$text:string}, ${2:\\$width:integer}, ${3:\\$height:integer}, ${4:\\$file:string}, ${5:\\$count:boolean} )",
        "description": "Show the link to the links popup and the number of links."
    },
    "Function: list_authors": {
        "prefix": "list_authors",
        "body": "list_authors( ${1:\\$optioncount:boolean}, ${2:\\$exclude_admin:boolean}, ${3:\\$show_fullname:boolean}, ${4:\\$hide_empty:boolean}, ${5:\\$feed:string}, ${6:\\$feed_image:string} )",
        "description": "Lists authors."
    },
    "Function: list_cats": {
        "prefix": "list_cats",
        "body": "list_cats( ${1:\\$optionall:integer}, ${2:\\$all:string}, ${3:\\$sort_column:string}, ${4:\\$sort_order:string}, ${5:\\$file:string}, ${6:\\$list:boolean}, ${7:\\$optiondates:integer}, ${8:\\$optioncount:integer}, ${9:\\$hide_empty:integer}, ${10:\\$use_desc_for_title:integer}, ${11:\\$children:boolean}, ${12:\\$child_of:integer}, ${13:\\$categories:integer}, ${14:\\$recurse:integer}, ${15:\\$feed:string}, ${16:\\$feed_image:string}, ${17:\\$exclude:string}, ${18:\\$hierarchical:boolean} )",
        "description": "Lists categories."
    },
    "Function: list_core_update": {
        "prefix": "list_core_update",
        "body": "list_core_update( ${1:\\$update:object} )",
        "description": ""
    },
    "Function: list_files": {
        "prefix": "list_files",
        "body": "list_files( ${1:\\$folder:string}, ${2:\\$levels:integer}, ${3:\\$exclusions:array} )",
        "description": "Returns a listing of all files in the specified folder and all subdirectories up to 100 levels deep."
    },
    "Function: list_meta": {
        "prefix": "list_meta",
        "body": "list_meta( ${1:\\$meta:array} )",
        "description": "Outputs a post&#039;s public meta data in the Custom Fields meta box."
    },
    "Function: list_plugin_updates": {
        "prefix": "list_plugin_updates",
        "body": "list_plugin_updates(  )",
        "description": ""
    },
    "Function: list_theme_updates": {
        "prefix": "list_theme_updates",
        "body": "list_theme_updates(  )",
        "description": ""
    },
    "Function: list_translation_updates": {
        "prefix": "list_translation_updates",
        "body": "list_translation_updates(  )",
        "description": ""
    },
    "Function: load_child_theme_textdomain": {
        "prefix": "load_child_theme_textdomain",
        "body": "load_child_theme_textdomain( ${1:\\$domain:string}, ${2:\\$path:string} )",
        "description": "Load the child themes translated strings."
    },
    "Function: load_default_textdomain": {
        "prefix": "load_default_textdomain",
        "body": "load_default_textdomain( ${1:\\$locale:string|null} )",
        "description": "Load default translated strings based on locale."
    },
    "Function: load_image_to_edit": {
        "prefix": "load_image_to_edit",
        "body": "load_image_to_edit( ${1:\\$attachment_id:string}, ${2:\\$mime_type:string}, ${3:\\$size:string} )",
        "description": "Load an image resource for editing."
    },
    "Function: load_muplugin_textdomain": {
        "prefix": "load_muplugin_textdomain",
        "body": "load_muplugin_textdomain( ${1:\\$domain:string}, ${2:\\$mu_plugin_rel_path:string} )",
        "description": "Load the translated strings for a plugin residing in the mu-plugins directory."
    },
    "Function: load_plugin_textdomain": {
        "prefix": "load_plugin_textdomain",
        "body": "load_plugin_textdomain( ${1:\\$domain:string}, ${2:\\$deprecated:string}, ${3:\\$plugin_rel_path:string} )",
        "description": "Loads a plugin&#039;s translated strings."
    },
    "Function: load_template": {
        "prefix": "load_template",
        "body": "load_template( ${1:\\$_template_file:string}, ${2:\\$require_once:boolean} )",
        "description": "Require the template file with WordPress environment."
    },
    "Function: load_textdomain": {
        "prefix": "load_textdomain",
        "body": "load_textdomain( ${1:\\$domain:string}, ${2:\\$mofile:string} )",
        "description": "Load a .mo file into the text domain $domain."
    },
    "Function: load_theme_textdomain": {
        "prefix": "load_theme_textdomain",
        "body": "load_theme_textdomain( ${1:\\$domain:string}, ${2:\\$path:string} )",
        "description": "Load the theme&#039;s translated strings."
    },
    "Function: locale_stylesheet": {
        "prefix": "locale_stylesheet",
        "body": "locale_stylesheet(  )",
        "description": "Display localized stylesheet link element."
    },
    "Function: locate_template": {
        "prefix": "locate_template",
        "body": "locate_template( ${1:\\$template_names:string|array}, ${2:\\$load:boolean}, ${3:\\$require_once:boolean} )",
        "description": "Retrieve the name of the highest priority template file that exists."
    },
    "Function: login_footer": {
        "prefix": "login_footer",
        "body": "login_footer( ${1:\\$input_id:string} )",
        "description": "Outputs the footer for the login page."
    },
    "Function: login_header": {
        "prefix": "login_header",
        "body": "login_header( ${1:\\$title:string}, ${2:\\$message:string}, ${3:\\$wp_error:WP_Error} )",
        "description": "Output the login page header."
    },
    "Function: logIO": {
        "prefix": "logIO",
        "body": "logIO( ${1:\\$io:string}, ${2:\\$msg:string} )",
        "description": "logIO() - Writes logging info to a file."
    },
    "Function: maintenance_nag": {
        "prefix": "maintenance_nag",
        "body": "maintenance_nag(  )",
        "description": ""
    },
    "Function: make_clickable": {
        "prefix": "make_clickable",
        "body": "make_clickable( ${1:\\$text:string} )",
        "description": "Convert plaintext URI to HTML links."
    },
    "Function: make_db_current": {
        "prefix": "make_db_current",
        "body": "make_db_current( ${1:\\$tables:string} )",
        "description": "Updates the database tables to a new schema."
    },
    "Function: make_db_current_silent": {
        "prefix": "make_db_current_silent",
        "body": "make_db_current_silent( ${1:\\$tables:string} )",
        "description": "Updates the database tables to a new schema, but without displaying results."
    },
    "Function: make_site_theme": {
        "prefix": "make_site_theme",
        "body": "make_site_theme(  )",
        "description": "Creates a site theme."
    },
    "Function: make_site_theme_from_default": {
        "prefix": "make_site_theme_from_default",
        "body": "make_site_theme_from_default( ${1:\\$theme_name:string}, ${2:\\$template:string} )",
        "description": "Creates a site theme from the default theme."
    },
    "Function: make_site_theme_from_oldschool": {
        "prefix": "make_site_theme_from_oldschool",
        "body": "make_site_theme_from_oldschool( ${1:\\$theme_name:string}, ${2:\\$template:string} )",
        "description": "Creates a site theme from an existing theme."
    },
    "Function: make_url_footnote": {
        "prefix": "make_url_footnote",
        "body": "make_url_footnote( ${1:\\$content:string} )",
        "description": "Strip HTML and put links at the bottom of stripped content."
    },
    "Function: map_deep": {
        "prefix": "map_deep",
        "body": "map_deep( ${1:\\$value:mixed}, ${2:\\$callback:callable} )",
        "description": "Maps a function to all non-iterable elements of an array or an object."
    },
    "Function: map_meta_cap": {
        "prefix": "map_meta_cap",
        "body": "map_meta_cap( ${1:\\$cap:string}, ${2:\\$user_id:integer} )",
        "description": "Map meta capabilities to primitive capabilities."
    },
    "Function: maybe_add_column": {
        "prefix": "maybe_add_column",
        "body": "maybe_add_column( ${1:\\$table_name:string}, ${2:\\$column_name:string}, ${3:\\$create_ddl:string} )",
        "description": "Add column to database table, if column doesn&#039;t already exist in table."
    },
    "Function: maybe_add_existing_user_to_blog": {
        "prefix": "maybe_add_existing_user_to_blog",
        "body": "maybe_add_existing_user_to_blog(  )",
        "description": "Add a new user to a blog by visiting /newbloguser/{key}/."
    },
    "Function: maybe_convert_table_to_utf8mb4": {
        "prefix": "maybe_convert_table_to_utf8mb4",
        "body": "maybe_convert_table_to_utf8mb4( ${1:\\$table:string} )",
        "description": "If a table only contains utf8 or utf8mb4 columns, convert it to utf8mb4."
    },
    "Function: maybe_create_table": {
        "prefix": "maybe_create_table",
        "body": "maybe_create_table( ${1:\\$table_name:string}, ${2:\\$create_ddl:string} )",
        "description": "Creates a table in the database if it doesn&#039;t already exist."
    },
    "Function: maybe_disable_automattic_widgets": {
        "prefix": "maybe_disable_automattic_widgets",
        "body": "maybe_disable_automattic_widgets(  )",
        "description": "Disables the Automattic widgets plugin, which was merged into core."
    },
    "Function: maybe_disable_link_manager": {
        "prefix": "maybe_disable_link_manager",
        "body": "maybe_disable_link_manager(  )",
        "description": "Disables the Link Manager on upgrade if, at the time of upgrade, no links exist in the DB."
    },
    "Function: maybe_drop_column": {
        "prefix": "maybe_drop_column",
        "body": "maybe_drop_column( ${1:\\$table_name:string}, ${2:\\$column_name:string}, ${3:\\$drop_ddl:string} )",
        "description": "Drop column from database table, if it exists."
    },
    "Function: maybe_hash_hex_color": {
        "prefix": "maybe_hash_hex_color",
        "body": "maybe_hash_hex_color( ${1:\\$color:string} )",
        "description": "Ensures that any hex color is properly hashed."
    },
    "Function: maybe_redirect_404": {
        "prefix": "maybe_redirect_404",
        "body": "maybe_redirect_404(  )",
        "description": "Correct 404 redirects when NOBLOGREDIRECT is defined."
    },
    "Function: maybe_serialize": {
        "prefix": "maybe_serialize",
        "body": "maybe_serialize( ${1:\\$data:string|array|object} )",
        "description": "Serialize data, if needed."
    },
    "Function: maybe_unserialize": {
        "prefix": "maybe_unserialize",
        "body": "maybe_unserialize( ${1:\\$original:string} )",
        "description": "Unserialize value only if it was serialized."
    },
    "Function: mbstring_binary_safe_encoding": {
        "prefix": "mbstring_binary_safe_encoding",
        "body": "mbstring_binary_safe_encoding( ${1:\\$reset:boolean} )",
        "description": "Set the mbstring internal encoding to a binary safe encoding when func_overload is enabled."
    },
    "Function: media_buttons": {
        "prefix": "media_buttons",
        "body": "media_buttons( ${1:\\$editor_id:string} )",
        "description": "Adds the media button to the editor"
    },
    "Function: media_handle_sideload": {
        "prefix": "media_handle_sideload",
        "body": "media_handle_sideload( ${1:\\$file_array:array}, ${2:\\$post_id:integer}, ${3:\\$desc:string|null}, ${4:\\$post_data:array} )",
        "description": "Handles a side-loaded file in the same way as an uploaded file is handled by media_handle_upload()."
    },
    "Function: media_handle_upload": {
        "prefix": "media_handle_upload",
        "body": "media_handle_upload( ${1:\\$file_id:string}, ${2:\\$post_id:integer}, ${3:\\$post_data:array}, ${4:\\$overrides:array} )",
        "description": "Save a file submitted from a POST request and create an attachment post for it."
    },
    "Function: media_post_single_attachment_fields_to_edit": {
        "prefix": "media_post_single_attachment_fields_to_edit",
        "body": "media_post_single_attachment_fields_to_edit( ${1:\\$form_fields:array}, ${2:\\$post:WP_Post} )",
        "description": "Retrieves the post non-image attachment fields to edito form fields."
    },
    "Function: media_send_to_editor": {
        "prefix": "media_send_to_editor",
        "body": "media_send_to_editor( ${1:\\$html:string} )",
        "description": "Adds image html to editor"
    },
    "Function: media_sideload_image": {
        "prefix": "media_sideload_image",
        "body": "media_sideload_image( ${1:\\$file:string}, ${2:\\$post_id:integer}, ${3:\\$desc:string|null}, ${4:\\$return:string} )",
        "description": "Downloads an image from the specified URL and attaches it to a post."
    },
    "Function: media_single_attachment_fields_to_edit": {
        "prefix": "media_single_attachment_fields_to_edit",
        "body": "media_single_attachment_fields_to_edit( ${1:\\$form_fields:array}, ${2:\\$post:WP_Post} )",
        "description": "Retrieves the single non-image attachment fields to edit form fields."
    },
    "Function: media_upload_audio": {
        "prefix": "media_upload_audio",
        "body": "media_upload_audio(  )",
        "description": "Handles uploading an audio file."
    },
    "Function: media_upload_file": {
        "prefix": "media_upload_file",
        "body": "media_upload_file(  )",
        "description": "Handles uploading a generic file."
    },
    "Function: media_upload_flash_bypass": {
        "prefix": "media_upload_flash_bypass",
        "body": "media_upload_flash_bypass(  )",
        "description": "Displays the multi-file uploader message."
    },
    "Function: media_upload_form": {
        "prefix": "media_upload_form",
        "body": "media_upload_form( ${1:\\$errors:array|null} )",
        "description": "Outputs the legacy media upload form."
    },
    "Function: media_upload_form_handler": {
        "prefix": "media_upload_form_handler",
        "body": "media_upload_form_handler(  )",
        "description": "Handles form submissions for the legacy media uploader."
    },
    "Function: media_upload_gallery": {
        "prefix": "media_upload_gallery",
        "body": "media_upload_gallery(  )",
        "description": "Retrieves the legacy media uploader form in an iframe."
    },
    "Function: media_upload_gallery_form": {
        "prefix": "media_upload_gallery_form",
        "body": "media_upload_gallery_form( ${1:\\$errors:array} )",
        "description": "Adds gallery form to upload iframe"
    },
    "Function: media_upload_header": {
        "prefix": "media_upload_header",
        "body": "media_upload_header(  )",
        "description": "Outputs the legacy media upload header."
    },
    "Function: media_upload_html_bypass": {
        "prefix": "media_upload_html_bypass",
        "body": "media_upload_html_bypass(  )",
        "description": "Displays the browser&#039;s built-in uploader message."
    },
    "Function: media_upload_image": {
        "prefix": "media_upload_image",
        "body": "media_upload_image(  )",
        "description": "Handles uploading an image."
    },
    "Function: media_upload_library": {
        "prefix": "media_upload_library",
        "body": "media_upload_library(  )",
        "description": "Retrieves the legacy media library form in an iframe."
    },
    "Function: media_upload_library_form": {
        "prefix": "media_upload_library_form",
        "body": "media_upload_library_form( ${1:\\$errors:array} )",
        "description": "Outputs the legacy media upload form for the media library."
    },
    "Function: media_upload_max_image_resize": {
        "prefix": "media_upload_max_image_resize",
        "body": "media_upload_max_image_resize(  )",
        "description": "Displays the checkbox to scale images."
    },
    "Function: media_upload_tabs": {
        "prefix": "media_upload_tabs",
        "body": "media_upload_tabs(  )",
        "description": "Defines the default media upload tabs"
    },
    "Function: media_upload_text_after": {
        "prefix": "media_upload_text_after",
        "body": "media_upload_text_after(  )",
        "description": "Used to display a &quot;After a file has been uploaded."
    },
    "Function: media_upload_type_form": {
        "prefix": "media_upload_type_form",
        "body": "media_upload_type_form( ${1:\\$type:string}, ${2:\\$errors:object|null}, ${3:\\$id:integer|null} )",
        "description": "Outputs the legacy media upload form for a given media type."
    },
    "Function: media_upload_type_url_form": {
        "prefix": "media_upload_type_url_form",
        "body": "media_upload_type_url_form( ${1:\\$type:string|null}, ${2:\\$errors:object|null}, ${3:\\$id:integer|null} )",
        "description": "Outputs the legacy media upload form for external media."
    },
    "Function: media_upload_video": {
        "prefix": "media_upload_video",
        "body": "media_upload_video(  )",
        "description": "Handles uploading a video file."
    },
    "Function: menu_page_url": {
        "prefix": "menu_page_url",
        "body": "menu_page_url( ${1:\\$menu_slug:string}, ${2:\\$echo:boolean} )",
        "description": "Get the url to access a particular menu page based on the slug it was registered with."
    },
    "Function: meta_box_prefs": {
        "prefix": "meta_box_prefs",
        "body": "meta_box_prefs( ${1:\\$screen:WP_Screen} )",
        "description": "Prints the meta box preferences for screen meta."
    },
    "Function: meta_form": {
        "prefix": "meta_form",
        "body": "meta_form( ${1:\\$post:WP_Post|null} )",
        "description": "Prints the form in the Custom Fields meta box."
    },
    "Function: metadata_exists": {
        "prefix": "metadata_exists",
        "body": "metadata_exists( ${1:\\$meta_type:string}, ${2:\\$object_id:integer}, ${3:\\$meta_key:string} )",
        "description": "Determine if a meta key is set for a given object"
    },
    "Function: ms_allowed_http_request_hosts": {
        "prefix": "ms_allowed_http_request_hosts",
        "body": "ms_allowed_http_request_hosts( ${1:\\$is_external:boolean}, ${2:\\$host:string} )",
        "description": "Whitelists any domain in a multisite installation for safe HTTP requests."
    },
    "Function: ms_cookie_constants": {
        "prefix": "ms_cookie_constants",
        "body": "ms_cookie_constants(  )",
        "description": "Defines Multisite cookie constants."
    },
    "Function: ms_deprecated_blogs_file": {
        "prefix": "ms_deprecated_blogs_file",
        "body": "ms_deprecated_blogs_file(  )",
        "description": "Deprecated functionality for determining whether a file is deprecated."
    },
    "Function: ms_file_constants": {
        "prefix": "ms_file_constants",
        "body": "ms_file_constants(  )",
        "description": "Defines Multisite file constants."
    },
    "Function: ms_is_switched": {
        "prefix": "ms_is_switched",
        "body": "ms_is_switched(  )",
        "description": "Determines if switch_to_blog() is in effect"
    },
    "Function: ms_load_current_site_and_network": {
        "prefix": "ms_load_current_site_and_network",
        "body": "ms_load_current_site_and_network( ${1:\\$domain:string}, ${2:\\$path:string}, ${3:\\$subdomain:boolean} )",
        "description": "Identifies the network and site of a requested domain and path and populates the corresponding network and site global objects as part of the multisite bootstrap process."
    },
    "Function: ms_not_installed": {
        "prefix": "ms_not_installed",
        "body": "ms_not_installed( ${1:\\$domain:string}, ${2:\\$path:string} )",
        "description": "Displays a failure message."
    },
    "Function: ms_site_check": {
        "prefix": "ms_site_check",
        "body": "ms_site_check(  )",
        "description": "Checks status of current blog."
    },
    "Function: ms_subdomain_constants": {
        "prefix": "ms_subdomain_constants",
        "body": "ms_subdomain_constants(  )",
        "description": "Defines Multisite subdomain constants and handles warnings and notices."
    },
    "Function: ms_upload_constants": {
        "prefix": "ms_upload_constants",
        "body": "ms_upload_constants(  )",
        "description": "Defines Multisite upload constants."
    },
    "Function: mu_dropdown_languages": {
        "prefix": "mu_dropdown_languages",
        "body": "mu_dropdown_languages( ${1:\\$lang_files:array}, ${2:\\$current:string} )",
        "description": "Generates and displays a drop-down of available languages."
    },
    "Function: mu_options": {
        "prefix": "mu_options",
        "body": "mu_options( ${1:\\$options:} )",
        "description": "WPMU options."
    },
    "Function: multisite_over_quota_message": {
        "prefix": "multisite_over_quota_message",
        "body": "multisite_over_quota_message(  )",
        "description": "Displays the out of storage quota message in Multisite."
    },
    "Function: mysql2date": {
        "prefix": "mysql2date",
        "body": "mysql2date( ${1:\\$format:string}, ${2:\\$date:string}, ${3:\\$translate:boolean} )",
        "description": "Convert given date string into a different format."
    },
    "Function: mysql_to_rfc3339": {
        "prefix": "mysql_to_rfc3339",
        "body": "mysql_to_rfc3339( ${1:\\$date_string:string} )",
        "description": "Parses and formats a MySQL datetime (Y-m-d H:i:s) for ISO8601/RFC3339."
    },
    "Function: network_admin_url": {
        "prefix": "network_admin_url",
        "body": "network_admin_url( ${1:\\$path:string}, ${2:\\$scheme:string} )",
        "description": "Retrieves the URL to the admin area for the network."
    },
    "Function: network_domain_check": {
        "prefix": "network_domain_check",
        "body": "network_domain_check(  )",
        "description": "Check for an existing network."
    },
    "Function: network_edit_site_nav": {
        "prefix": "network_edit_site_nav",
        "body": "network_edit_site_nav( ${1:\\$args:} )",
        "description": "Outputs the HTML for a network&#039;s &quot;Edit Site&quot; tabular interface."
    },
    "Function: network_home_url": {
        "prefix": "network_home_url",
        "body": "network_home_url( ${1:\\$path:string}, ${2:\\$scheme:string|null} )",
        "description": "Retrieves the home URL for the current network."
    },
    "Function: network_settings_add_js": {
        "prefix": "network_settings_add_js",
        "body": "network_settings_add_js(  )",
        "description": "Print JavaScript in the header on the Network Settings screen."
    },
    "Function: network_site_url": {
        "prefix": "network_site_url",
        "body": "network_site_url( ${1:\\$path:string}, ${2:\\$scheme:string|null} )",
        "description": "Retrieves the site URL for the current network."
    },
    "Function: network_step1": {
        "prefix": "network_step1",
        "body": "network_step1( ${1:\\$errors:WP_Error} )",
        "description": "Prints step 1 for Network installation process."
    },
    "Function: network_step2": {
        "prefix": "network_step2",
        "body": "network_step2( ${1:\\$errors:WP_Error} )",
        "description": "Prints step 2 for Network installation process."
    },
    "Function: new_user_email_admin_notice": {
        "prefix": "new_user_email_admin_notice",
        "body": "new_user_email_admin_notice(  )",
        "description": "Adds an admin notice alerting the user to check for confirmation request email after email address change."
    },
    "Function: newblog_notify_siteadmin": {
        "prefix": "newblog_notify_siteadmin",
        "body": "newblog_notify_siteadmin( ${1:\\$blog_id:integer}, ${2:\\$deprecated:string} )",
        "description": "Notifies the network admin that a new site has been activated."
    },
    "Function: newuser_notify_siteadmin": {
        "prefix": "newuser_notify_siteadmin",
        "body": "newuser_notify_siteadmin( ${1:\\$user_id:integer} )",
        "description": "Notifies the network admin that a new user has been activated."
    },
    "Function: next_comments_link": {
        "prefix": "next_comments_link",
        "body": "next_comments_link( ${1:\\$label:string}, ${2:\\$max_page:integer} )",
        "description": "Displays the link to the next comments page."
    },
    "Function: next_image_link": {
        "prefix": "next_image_link",
        "body": "next_image_link( ${1:\\$size:string|array}, ${2:\\$text:string} )",
        "description": "Displays next image link that has the same post parent."
    },
    "Function: next_post": {
        "prefix": "next_post",
        "body": "next_post( ${1:\\$format:string}, ${2:\\$next:string}, ${3:\\$title:string}, ${4:\\$in_same_cat:string}, ${5:\\$limitnext:integer}, ${6:\\$excluded_categories:string} )",
        "description": "Prints link to the next post."
    },
    "Function: next_post_link": {
        "prefix": "next_post_link",
        "body": "next_post_link( ${1:\\$format:string}, ${2:\\$link:string}, ${3:\\$in_same_term:boolean}, ${4:\\$excluded_terms:array|string}, ${5:\\$taxonomy:string} )",
        "description": "Displays the next post link that is adjacent to the current post."
    },
    "Function: next_post_rel_link": {
        "prefix": "next_post_rel_link",
        "body": "next_post_rel_link( ${1:\\$title:string}, ${2:\\$in_same_term:boolean}, ${3:\\$excluded_terms:array|string}, ${4:\\$taxonomy:string} )",
        "description": "Displays the relational link for the next post adjacent to the current post."
    },
    "Function: next_posts": {
        "prefix": "next_posts",
        "body": "next_posts( ${1:\\$max_page:integer}, ${2:\\$echo:boolean} )",
        "description": "Displays or retrieves the next posts page link."
    },
    "Function: next_posts_link": {
        "prefix": "next_posts_link",
        "body": "next_posts_link( ${1:\\$label:string|null}, ${2:\\$max_page:integer} )",
        "description": "Displays the next posts page link."
    },
    "Function: next_widget_id_number": {
        "prefix": "next_widget_id_number",
        "body": "next_widget_id_number( ${1:\\$id_base:string} )",
        "description": ""
    },
    "Function: nocache_headers": {
        "prefix": "nocache_headers",
        "body": "nocache_headers(  )",
        "description": "Set the headers to prevent caching for the different browsers."
    },
    "Function: noindex": {
        "prefix": "noindex",
        "body": "noindex(  )",
        "description": "Displays a noindex meta tag if required by the blog configuration."
    },
    "Function: normalize_whitespace": {
        "prefix": "normalize_whitespace",
        "body": "normalize_whitespace( ${1:\\$str:string} )",
        "description": "Normalize EOL characters and strip duplicate whitespace."
    },
    "Function: number_format_i18n": {
        "prefix": "number_format_i18n",
        "body": "number_format_i18n( ${1:\\$number:float}, ${2:\\$decimals:integer} )",
        "description": "Convert float number to format based on the locale."
    },
    "Function: option_update_filter": {
        "prefix": "option_update_filter",
        "body": "option_update_filter( ${1:\\$options:array} )",
        "description": "Refreshes the value of the options whitelist available via the &#039;whitelist_options&#039; hook."
    },
    "Function: options_discussion_add_js": {
        "prefix": "options_discussion_add_js",
        "body": "options_discussion_add_js(  )",
        "description": "Output JavaScript to toggle display of additional settings if avatars are disabled."
    },
    "Function: options_general_add_js": {
        "prefix": "options_general_add_js",
        "body": "options_general_add_js(  )",
        "description": "Display JavaScript on the page."
    },
    "Function: options_permalink_add_js": {
        "prefix": "options_permalink_add_js",
        "body": "options_permalink_add_js(  )",
        "description": "Display JavaScript on the page."
    },
    "Function: options_reading_add_js": {
        "prefix": "options_reading_add_js",
        "body": "options_reading_add_js(  )",
        "description": "Display JavaScript on the page."
    },
    "Function: options_reading_blog_charset": {
        "prefix": "options_reading_blog_charset",
        "body": "options_reading_blog_charset(  )",
        "description": "Render the site charset setting."
    },
    "Function: page_attributes_meta_box": {
        "prefix": "page_attributes_meta_box",
        "body": "page_attributes_meta_box( ${1:\\$post:object} )",
        "description": "Display page attributes form fields."
    },
    "Function: page_template_dropdown": {
        "prefix": "page_template_dropdown",
        "body": "page_template_dropdown( ${1:\\$default:string}, ${2:\\$post_type:string} )",
        "description": "Print out option HTML elements for the page templates drop-down."
    },
    "Function: paginate_comments_links": {
        "prefix": "paginate_comments_links",
        "body": "paginate_comments_links( ${1:\\$args:string|array} )",
        "description": "Displays or retrieves pagination links for the comments on the current post."
    },
    "Function: paginate_links": {
        "prefix": "paginate_links",
        "body": "paginate_links( ${1:\\$args:string|array} )",
        "description": "Retrieve paginated link for archive post pages."
    },
    "Function: parent_dropdown": {
        "prefix": "parent_dropdown",
        "body": "parent_dropdown( ${1:\\$default:integer}, ${2:\\$parent:integer}, ${3:\\$level:integer}, ${4:\\$post:integer|WP_Post|null} )",
        "description": "Print out option HTML elements for the page parents drop-down."
    },
    "Function: parent_post_rel_link": {
        "prefix": "parent_post_rel_link",
        "body": "parent_post_rel_link( ${1:\\$title:string} )",
        "description": "Display relational link for parent item"
    },
    "Function: parse_w3cdtf": {
        "prefix": "parse_w3cdtf",
        "body": "parse_w3cdtf( ${1:\\$date_str:} )",
        "description": ""
    },
    "Function: path_is_absolute": {
        "prefix": "path_is_absolute",
        "body": "path_is_absolute( ${1:\\$path:string} )",
        "description": "Test if a given filesystem path is absolute."
    },
    "Function: path_join": {
        "prefix": "path_join",
        "body": "path_join( ${1:\\$base:string}, ${2:\\$path:string} )",
        "description": "Join two filesystem paths together."
    },
    "Function: PclZipUtilCopyBlock": {
        "prefix": "PclZipUtilCopyBlock",
        "body": "PclZipUtilCopyBlock( ${1:\\$p_src:}, ${2:\\$p_dest:}, ${3:\\$p_size:}, ${4:\\$p_mode:} )",
        "description": ""
    },
    "Function: PclZipUtilOptionText": {
        "prefix": "PclZipUtilOptionText",
        "body": "PclZipUtilOptionText( ${1:\\$p_option:} )",
        "description": ""
    },
    "Function: PclZipUtilPathInclusion": {
        "prefix": "PclZipUtilPathInclusion",
        "body": "PclZipUtilPathInclusion( ${1:\\$p_dir:}, ${2:\\$p_path:} )",
        "description": ""
    },
    "Function: PclZipUtilPathReduction": {
        "prefix": "PclZipUtilPathReduction",
        "body": "PclZipUtilPathReduction( ${1:\\$p_dir:} )",
        "description": ""
    },
    "Function: PclZipUtilRename": {
        "prefix": "PclZipUtilRename",
        "body": "PclZipUtilRename( ${1:\\$p_src:}, ${2:\\$p_dest:} )",
        "description": ""
    },
    "Function: PclZipUtilTranslateWinPath": {
        "prefix": "PclZipUtilTranslateWinPath",
        "body": "PclZipUtilTranslateWinPath( ${1:\\$p_path:}, ${2:\\$p_remove_disk_letter:} )",
        "description": ""
    },
    "Function: permalink_anchor": {
        "prefix": "permalink_anchor",
        "body": "permalink_anchor( ${1:\\$mode:string} )",
        "description": "Displays the permalink anchor for the current post."
    },
    "Function: permalink_link": {
        "prefix": "permalink_link",
        "body": "permalink_link(  )",
        "description": "Print the permalink of the current post in the loop."
    },
    "Function: permalink_single_rss": {
        "prefix": "permalink_single_rss",
        "body": "permalink_single_rss( ${1:\\$deprecated:string} )",
        "description": "Print the permalink to the RSS feed."
    },
    "Function: pingback": {
        "prefix": "pingback",
        "body": "pingback( ${1:\\$content:string}, ${2:\\$post_id:integer|WP_Post} )",
        "description": "Pings back the links found in a post."
    },
    "Function: pingback_ping_source_uri": {
        "prefix": "pingback_ping_source_uri",
        "body": "pingback_ping_source_uri( ${1:\\$source_uri:string} )",
        "description": "Default filter attached to pingback_ping_source_uri to validate the pingback&#039;s Source URI"
    },
    "Function: pings_open": {
        "prefix": "pings_open",
        "body": "pings_open( ${1:\\$post_id:integer|WP_Post|null} )",
        "description": "Whether the current post is open for pings."
    },
    "Function: plugin_basename": {
        "prefix": "plugin_basename",
        "body": "plugin_basename( ${1:\\$file:string} )",
        "description": "Gets the basename of a plugin."
    },
    "Function: plugin_dir_path": {
        "prefix": "plugin_dir_path",
        "body": "plugin_dir_path( ${1:\\$file:string} )",
        "description": "Get the filesystem directory path (with trailing slash) for the plugin __FILE__ passed in."
    },
    "Function: plugin_dir_url": {
        "prefix": "plugin_dir_url",
        "body": "plugin_dir_url( ${1:\\$file:string} )",
        "description": "Get the URL directory path (with trailing slash) for the plugin __FILE__ passed in."
    },
    "Function: plugin_sandbox_scrape": {
        "prefix": "plugin_sandbox_scrape",
        "body": "plugin_sandbox_scrape( ${1:\\$plugin:string} )",
        "description": "Load a given plugin attempt to generate errors."
    },
    "Function: plugins_api": {
        "prefix": "plugins_api",
        "body": "plugins_api( ${1:\\$action:string}, ${2:\\$args:array|object} )",
        "description": "Retrieves plugin installer pages from the WordPress.org Plugins API."
    },
    "Function: plugins_url": {
        "prefix": "plugins_url",
        "body": "plugins_url( ${1:\\$path:string}, ${2:\\$plugin:string} )",
        "description": "Retrieves a URL within the plugins or mu-plugins directory."
    },
    "Function: populate_network": {
        "prefix": "populate_network",
        "body": "populate_network( ${1:\\$network_id:integer}, ${2:\\$domain:string}, ${3:\\$email:string}, ${4:\\$site_name:string}, ${5:\\$path:string}, ${6:\\$subdomain_install:boolean} )",
        "description": "Populate network settings."
    },
    "Function: populate_options": {
        "prefix": "populate_options",
        "body": "populate_options(  )",
        "description": "Create WordPress options and set the default values."
    },
    "Function: populate_roles": {
        "prefix": "populate_roles",
        "body": "populate_roles(  )",
        "description": "Execute WordPress role creation for the various WordPress versions."
    },
    "Function: populate_roles_160": {
        "prefix": "populate_roles_160",
        "body": "populate_roles_160(  )",
        "description": "Create the roles for WordPress 2.0"
    },
    "Function: populate_roles_210": {
        "prefix": "populate_roles_210",
        "body": "populate_roles_210(  )",
        "description": "Create and modify WordPress roles for WordPress 2.1."
    },
    "Function: populate_roles_230": {
        "prefix": "populate_roles_230",
        "body": "populate_roles_230(  )",
        "description": "Create and modify WordPress roles for WordPress 2.3."
    },
    "Function: populate_roles_250": {
        "prefix": "populate_roles_250",
        "body": "populate_roles_250(  )",
        "description": "Create and modify WordPress roles for WordPress 2.5."
    },
    "Function: populate_roles_260": {
        "prefix": "populate_roles_260",
        "body": "populate_roles_260(  )",
        "description": "Create and modify WordPress roles for WordPress 2.6."
    },
    "Function: populate_roles_270": {
        "prefix": "populate_roles_270",
        "body": "populate_roles_270(  )",
        "description": "Create and modify WordPress roles for WordPress 2.7."
    },
    "Function: populate_roles_280": {
        "prefix": "populate_roles_280",
        "body": "populate_roles_280(  )",
        "description": "Create and modify WordPress roles for WordPress 2.8."
    },
    "Function: populate_roles_300": {
        "prefix": "populate_roles_300",
        "body": "populate_roles_300(  )",
        "description": "Create and modify WordPress roles for WordPress 3.0."
    },
    "Function: popuplinks": {
        "prefix": "popuplinks",
        "body": "popuplinks( ${1:\\$text:string} )",
        "description": "Adds element attributes to open links in new windows."
    },
    "Function: post_author_meta_box": {
        "prefix": "post_author_meta_box",
        "body": "post_author_meta_box( ${1:\\$post:object} )",
        "description": "Display form field with list of authors."
    },
    "Function: post_categories_meta_box": {
        "prefix": "post_categories_meta_box",
        "body": "post_categories_meta_box( ${1:\\$post:WP_Post}, ${2:\\$box:array} )",
        "description": "Display post categories form fields."
    },
    "Function: post_class": {
        "prefix": "post_class",
        "body": "post_class( ${1:\\$class:string|array}, ${2:\\$post_id:integer|WP_Post|null} )",
        "description": "Display the classes for the post div."
    },
    "Function: post_comment_meta_box": {
        "prefix": "post_comment_meta_box",
        "body": "post_comment_meta_box( ${1:\\$post:object} )",
        "description": "Display comments for post."
    },
    "Function: post_comment_meta_box_thead": {
        "prefix": "post_comment_meta_box_thead",
        "body": "post_comment_meta_box_thead( ${1:\\$result:array} )",
        "description": "Display comments for post table header"
    },
    "Function: post_comment_status_meta_box": {
        "prefix": "post_comment_status_meta_box",
        "body": "post_comment_status_meta_box( ${1:\\$post:object} )",
        "description": "Display comments status form fields."
    },
    "Function: post_comments_feed_link": {
        "prefix": "post_comments_feed_link",
        "body": "post_comments_feed_link( ${1:\\$link_text:string}, ${2:\\$post_id:integer}, ${3:\\$feed:string} )",
        "description": "Displays the comment feed link for a post."
    },
    "Function: post_custom": {
        "prefix": "post_custom",
        "body": "post_custom( ${1:\\$key:string} )",
        "description": "Retrieve post custom meta data field."
    },
    "Function: post_custom_meta_box": {
        "prefix": "post_custom_meta_box",
        "body": "post_custom_meta_box( ${1:\\$post:object} )",
        "description": "Display custom fields form fields."
    },
    "Function: post_excerpt_meta_box": {
        "prefix": "post_excerpt_meta_box",
        "body": "post_excerpt_meta_box( ${1:\\$post:object} )",
        "description": "Display post excerpt form fields."
    },
    "Function: post_exists": {
        "prefix": "post_exists",
        "body": "post_exists( ${1:\\$title:string}, ${2:\\$content:string}, ${3:\\$date:string} )",
        "description": "Determine if a post exists based on title, content, and date"
    },
    "Function: post_form_autocomplete_off": {
        "prefix": "post_form_autocomplete_off",
        "body": "post_form_autocomplete_off(  )",
        "description": "Disables autocomplete on the &#039;post&#039; form (Add/Edit Post screens) for WebKit browsers, as they disregard the autocomplete setting on the editor textarea. That can break the editor when the user navigates to it with the browser&#039;s Back button. See #28037"
    },
    "Function: post_format_meta_box": {
        "prefix": "post_format_meta_box",
        "body": "post_format_meta_box( ${1:\\$post:WP_Post}, ${2:\\$box:array} )",
        "description": "Display post format form elements."
    },
    "Function: post_password_required": {
        "prefix": "post_password_required",
        "body": "post_password_required( ${1:\\$post:integer|WP_Post|null} )",
        "description": "Whether post requires password and correct password has been provided."
    },
    "Function: post_permalink": {
        "prefix": "post_permalink",
        "body": "post_permalink( ${1:\\$post_id:integer|WP_Post} )",
        "description": "Retrieve permalink from post ID."
    },
    "Function: post_preview": {
        "prefix": "post_preview",
        "body": "post_preview(  )",
        "description": "Saves a draft or manually autosaves for the purpose of showing a post preview."
    },
    "Function: post_reply_link": {
        "prefix": "post_reply_link",
        "body": "post_reply_link( ${1:\\$args:array}, ${2:\\$post:integer|WP_Post|null} )",
        "description": "Displays the HTML content for reply to post link."
    },
    "Function: post_revisions_meta_box": {
        "prefix": "post_revisions_meta_box",
        "body": "post_revisions_meta_box( ${1:\\$post:object} )",
        "description": "Display list of revisions."
    },
    "Function: post_slug_meta_box": {
        "prefix": "post_slug_meta_box",
        "body": "post_slug_meta_box( ${1:\\$post:object} )",
        "description": "Display slug form fields."
    },
    "Function: post_submit_meta_box": {
        "prefix": "post_submit_meta_box",
        "body": "post_submit_meta_box( ${1:\\$post:WP_Post}, ${2:\\$args:array} )",
        "description": "Displays post submit form fields."
    },
    "Function: post_tags_meta_box": {
        "prefix": "post_tags_meta_box",
        "body": "post_tags_meta_box( ${1:\\$post:WP_Post}, ${2:\\$box:array} )",
        "description": "Display post tags form fields."
    },
    "Function: post_thumbnail_meta_box": {
        "prefix": "post_thumbnail_meta_box",
        "body": "post_thumbnail_meta_box( ${1:\\$post:WP_Post} )",
        "description": "Display post thumbnail meta box."
    },
    "Function: post_trackback_meta_box": {
        "prefix": "post_trackback_meta_box",
        "body": "post_trackback_meta_box( ${1:\\$post:object} )",
        "description": "Display trackback links form fields."
    },
    "Function: post_type_archive_title": {
        "prefix": "post_type_archive_title",
        "body": "post_type_archive_title( ${1:\\$prefix:string}, ${2:\\$display:boolean} )",
        "description": "Display or retrieve title for a post type archive."
    },
    "Function: post_type_exists": {
        "prefix": "post_type_exists",
        "body": "post_type_exists( ${1:\\$post_type:string} )",
        "description": "Check if a post type is registered."
    },
    "Function: post_type_supports": {
        "prefix": "post_type_supports",
        "body": "post_type_supports( ${1:\\$post_type:string}, ${2:\\$feature:string} )",
        "description": "Check a post type&#039;s support for a given feature."
    },
    "Function: postbox_classes": {
        "prefix": "postbox_classes",
        "body": "postbox_classes( ${1:\\$id:string}, ${2:\\$page:string} )",
        "description": "Returns the list of classes to be used by a meta box."
    },
    "Function: posts_nav_link": {
        "prefix": "posts_nav_link",
        "body": "posts_nav_link( ${1:\\$sep:string}, ${2:\\$prelabel:string}, ${3:\\$nxtlabel:string} )",
        "description": "Displays the post pages link navigation for previous and next pages."
    },
    "Function: pre_schema_upgrade": {
        "prefix": "pre_schema_upgrade",
        "body": "pre_schema_upgrade(  )",
        "description": "Runs before the schema is upgraded."
    },
    "Function: prep_atom_text_construct": {
        "prefix": "prep_atom_text_construct",
        "body": "prep_atom_text_construct( ${1:\\$data:string} )",
        "description": "Determine the type of a string of data with the data formatted."
    },
    "Function: prepend_attachment": {
        "prefix": "prepend_attachment",
        "body": "prepend_attachment( ${1:\\$content:string} )",
        "description": "Wrap attachment in paragraph tag before content."
    },
    "Function: prev_post_rel_link": {
        "prefix": "prev_post_rel_link",
        "body": "prev_post_rel_link( ${1:\\$title:string}, ${2:\\$in_same_term:boolean}, ${3:\\$excluded_terms:array|string}, ${4:\\$taxonomy:string} )",
        "description": "Displays the relational link for the previous post adjacent to the current post."
    },
    "Function: preview_theme": {
        "prefix": "preview_theme",
        "body": "preview_theme(  )",
        "description": "Start preview theme output buffer."
    },
    "Function: preview_theme_ob_filter": {
        "prefix": "preview_theme_ob_filter",
        "body": "preview_theme_ob_filter( ${1:\\$content:string} )",
        "description": "Callback function for ob_start() to capture all links in the theme."
    },
    "Function: preview_theme_ob_filter_callback": {
        "prefix": "preview_theme_ob_filter_callback",
        "body": "preview_theme_ob_filter_callback( ${1:\\$matches:array} )",
        "description": "Manipulates preview theme links in order to control and maintain location."
    },
    "Function: previous_comments_link": {
        "prefix": "previous_comments_link",
        "body": "previous_comments_link( ${1:\\$label:string} )",
        "description": "Displays the link to the previous comments page."
    },
    "Function: previous_image_link": {
        "prefix": "previous_image_link",
        "body": "previous_image_link( ${1:\\$size:string|array}, ${2:\\$text:string} )",
        "description": "Displays previous image link that has the same post parent."
    },
    "Function: previous_post": {
        "prefix": "previous_post",
        "body": "previous_post( ${1:\\$format:string}, ${2:\\$previous:string}, ${3:\\$title:string}, ${4:\\$in_same_cat:string}, ${5:\\$limitprev:integer}, ${6:\\$excluded_categories:string} )",
        "description": "Prints a link to the previous post."
    },
    "Function: previous_post_link": {
        "prefix": "previous_post_link",
        "body": "previous_post_link( ${1:\\$format:string}, ${2:\\$link:string}, ${3:\\$in_same_term:boolean}, ${4:\\$excluded_terms:array|string}, ${5:\\$taxonomy:string} )",
        "description": "Displays the previous post link that is adjacent to the current post."
    },
    "Function: previous_posts": {
        "prefix": "previous_posts",
        "body": "previous_posts( ${1:\\$echo:boolean} )",
        "description": "Displays or retrieves the previous posts page link."
    },
    "Function: previous_posts_link": {
        "prefix": "previous_posts_link",
        "body": "previous_posts_link( ${1:\\$label:string|null} )",
        "description": "Displays the previous posts page link."
    },
    "Function: print_admin_styles": {
        "prefix": "print_admin_styles",
        "body": "print_admin_styles(  )",
        "description": "Prints the styles queue in the HTML head on admin pages."
    },
    "Function: print_column_headers": {
        "prefix": "print_column_headers",
        "body": "print_column_headers( ${1:\\$screen:string|WP_Screen}, ${2:\\$with_id:boolean} )",
        "description": "Prints column headers for a particular screen."
    },
    "Function: print_embed_comments_button": {
        "prefix": "print_embed_comments_button",
        "body": "print_embed_comments_button(  )",
        "description": "Prints the necessary markup for the embed comments button."
    },
    "Function: print_embed_scripts": {
        "prefix": "print_embed_scripts",
        "body": "print_embed_scripts(  )",
        "description": "Prints the JavaScript in the embed iframe header."
    },
    "Function: print_embed_sharing_button": {
        "prefix": "print_embed_sharing_button",
        "body": "print_embed_sharing_button(  )",
        "description": "Prints the necessary markup for the embed sharing button."
    },
    "Function: print_embed_sharing_dialog": {
        "prefix": "print_embed_sharing_dialog",
        "body": "print_embed_sharing_dialog(  )",
        "description": "Prints the necessary markup for the embed sharing dialog."
    },
    "Function: print_embed_styles": {
        "prefix": "print_embed_styles",
        "body": "print_embed_styles(  )",
        "description": "Prints the CSS in the embed iframe header."
    },
    "Function: print_emoji_detection_script": {
        "prefix": "print_emoji_detection_script",
        "body": "print_emoji_detection_script(  )",
        "description": "Print the inline Emoji detection script if it is not already printed."
    },
    "Function: print_emoji_styles": {
        "prefix": "print_emoji_styles",
        "body": "print_emoji_styles(  )",
        "description": "Print the important emoji-related styles."
    },
    "Function: print_footer_scripts": {
        "prefix": "print_footer_scripts",
        "body": "print_footer_scripts(  )",
        "description": "Prints the scripts that were queued for the footer or too late for the HTML head."
    },
    "Function: print_head_scripts": {
        "prefix": "print_head_scripts",
        "body": "print_head_scripts(  )",
        "description": "Prints the script queue in the HTML head on admin pages."
    },
    "Function: print_late_styles": {
        "prefix": "print_late_styles",
        "body": "print_late_styles(  )",
        "description": "Prints the styles that were queued too late for the HTML head."
    },
    "Function: privacy_ping_filter": {
        "prefix": "privacy_ping_filter",
        "body": "privacy_ping_filter( ${1:\\$sites:mixed} )",
        "description": "Check whether blog is public before returning sites."
    },
    "Function: query_posts": {
        "prefix": "query_posts",
        "body": "query_posts( ${1:\\$query:array|string} )",
        "description": "Sets up The Loop with query parameters."
    },
    "Function: random_bytes": {
        "prefix": "random_bytes",
        "body": "random_bytes( ${1:\\$length:} )",
        "description": "We don&#039;t have any more options, so let&#039;s throw an exception right now and hope the developer won&#039;t let it fail silently."
    },
    "Function: random_bytes": {
        "prefix": "random_bytes",
        "body": "random_bytes( ${1:\\$bytes:integer} )",
        "description": "Unless open_basedir is enabled, use /dev/urandom for random numbers in accordance with best practices"
    },
    "Function: random_bytes": {
        "prefix": "random_bytes",
        "body": "random_bytes( ${1:\\$bytes:integer} )",
        "description": "If the libsodium PHP extension is loaded, we&#039;ll use it above any other solution."
    },
    "Function: random_bytes": {
        "prefix": "random_bytes",
        "body": "random_bytes( ${1:\\$bytes:integer} )",
        "description": "Windows with PHP &lt; 5.3.0 will not have the function openssl_random_pseudo_bytes() available, so let&#039;s use CAPICOM to work around this deficiency."
    },
    "Function: random_bytes": {
        "prefix": "random_bytes",
        "body": "random_bytes( ${1:\\$bytes:integer} )",
        "description": "Powered by ext/mcrypt (and thankfully NOT libmcrypt)"
    },
    "Function: random_bytes": {
        "prefix": "random_bytes",
        "body": "random_bytes( ${1:\\$bytes:integer} )",
        "description": "If the libsodium PHP extension is loaded, we&#039;ll use it above any other solution."
    },
    "Function: random_bytes": {
        "prefix": "random_bytes",
        "body": "random_bytes( ${1:\\$bytes:integer} )",
        "description": "Since openssl_random_pseudo_bytes() uses openssl&#039;s RAND_pseudo_bytes() API, which has been marked as deprecated by the OpenSSL team, this is our last resort before failure."
    },
    "Function: random_int": {
        "prefix": "random_int",
        "body": "random_int( ${1:\\$min:integer}, ${2:\\$max:integer} )",
        "description": "Fetch a random integer between $min and $max inclusive"
    },
    "Function: RandomCompat_intval": {
        "prefix": "RandomCompat_intval",
        "body": "RandomCompat_intval( ${1:\\$number:integer|float}, ${2:\\$fail_open:boolean} )",
        "description": "Cast to an integer if we can, safely."
    },
    "Function: RandomCompat_strlen": {
        "prefix": "RandomCompat_strlen",
        "body": "RandomCompat_strlen( ${1:\\$binary_string:string} )",
        "description": "strlen() implementation that isn&#039;t brittle to mbstring.func_overload"
    },
    "Function: RandomCompat_substr": {
        "prefix": "RandomCompat_substr",
        "body": "RandomCompat_substr( ${1:\\$binary_string:string}, ${2:\\$start:integer}, ${3:\\$length:integer|null} )",
        "description": "substr() implementation that isn&#039;t brittle to mbstring.func_overload"
    },
    "Function: rawurlencode_deep": {
        "prefix": "rawurlencode_deep",
        "body": "rawurlencode_deep( ${1:\\$value:mixed} )",
        "description": "Navigates through an array, object, or scalar, and raw-encodes the values to be used in a URL."
    },
    "Function: readonly": {
        "prefix": "readonly",
        "body": "readonly( ${1:\\$readonly:mixed}, ${2:\\$current:mixed}, ${3:\\$echo:boolean} )",
        "description": "Outputs the html readonly attribute."
    },
    "Function: recurse_dirsize": {
        "prefix": "recurse_dirsize",
        "body": "recurse_dirsize( ${1:\\$directory:string}, ${2:\\$exclude:string|null} )",
        "description": "Get the size of a directory recursively."
    },
    "Function: redirect_canonical": {
        "prefix": "redirect_canonical",
        "body": "redirect_canonical( ${1:\\$requested_url:string|null}, ${2:\\$do_redirect:boolean} )",
        "description": "Redirects incoming links to the proper URL based on the site url."
    },
    "Function: redirect_guess_404_permalink": {
        "prefix": "redirect_guess_404_permalink",
        "body": "redirect_guess_404_permalink(  )",
        "description": "Attempts to guess the correct URL based on query vars"
    },
    "Function: redirect_old_akismet_urls": {
        "prefix": "redirect_old_akismet_urls",
        "body": "redirect_old_akismet_urls(  )",
        "description": ""
    },
    "Function: redirect_post": {
        "prefix": "redirect_post",
        "body": "redirect_post( ${1:\\$post_id:integer} )",
        "description": "Redirect to previous page."
    },
    "Function: redirect_this_site": {
        "prefix": "redirect_this_site",
        "body": "redirect_this_site( ${1:\\$deprecated:array|string} )",
        "description": "Ensure that the current site&#039;s domain is listed in the allowed redirect host list."
    },
    "Function: refresh_blog_details": {
        "prefix": "refresh_blog_details",
        "body": "refresh_blog_details( ${1:\\$blog_id:integer} )",
        "description": "Clear the blog details cache."
    },
    "Function: refresh_user_details": {
        "prefix": "refresh_user_details",
        "body": "refresh_user_details( ${1:\\$id:integer} )",
        "description": "Cleans the user cache for a specific user."
    },
    "Function: register_activation_hook": {
        "prefix": "register_activation_hook",
        "body": "register_activation_hook( ${1:\\$file:string}, ${2:\\$function:callable} )",
        "description": "Set the activation hook for a plugin."
    },
    "Function: register_admin_color_schemes": {
        "prefix": "register_admin_color_schemes",
        "body": "register_admin_color_schemes(  )",
        "description": "Registers the default Admin color schemes"
    },
    "Function: register_column_headers": {
        "prefix": "register_column_headers",
        "body": "register_column_headers( ${1:\\$screen:string}, ${2:\\$columns:array} )",
        "description": "Register column headers for a particular screen."
    },
    "Function: register_deactivation_hook": {
        "prefix": "register_deactivation_hook",
        "body": "register_deactivation_hook( ${1:\\$file:string}, ${2:\\$function:callable} )",
        "description": "Set the deactivation hook for a plugin."
    },
    "Function: register_default_headers": {
        "prefix": "register_default_headers",
        "body": "register_default_headers( ${1:\\$headers:array} )",
        "description": "Register a selection of default headers to be displayed by the custom header admin UI."
    },
    "Function: register_importer": {
        "prefix": "register_importer",
        "body": "register_importer( ${1:\\$id:string}, ${2:\\$name:string}, ${3:\\$description:string}, ${4:\\$callback:callable} )",
        "description": "Register importer for WordPress."
    },
    "Function: register_initial_settings": {
        "prefix": "register_initial_settings",
        "body": "register_initial_settings(  )",
        "description": "Register default settings available in WordPress."
    },
    "Function: register_meta": {
        "prefix": "register_meta",
        "body": "register_meta( ${1:\\$object_type:string}, ${2:\\$meta_key:string}, ${3:\\$args:array}, ${4:\\$deprecated:string|array|null} )",
        "description": "Registers a meta key."
    },
    "Function: register_nav_menu": {
        "prefix": "register_nav_menu",
        "body": "register_nav_menu( ${1:\\$location:string}, ${2:\\$description:string} )",
        "description": "Registers a navigation menu location for a theme."
    },
    "Function: register_nav_menus": {
        "prefix": "register_nav_menus",
        "body": "register_nav_menus( ${1:\\$locations:array} )",
        "description": "Registers navigation menu locations for a theme."
    },
    "Function: register_new_user": {
        "prefix": "register_new_user",
        "body": "register_new_user( ${1:\\$user_login:string}, ${2:\\$user_email:string} )",
        "description": "Handles registering a new user."
    },
    "Function: register_post_status": {
        "prefix": "register_post_status",
        "body": "register_post_status( ${1:\\$post_status:string}, ${2:\\$args:array|string} )",
        "description": "Register a post status. Do not use before init."
    },
    "Function: register_post_type": {
        "prefix": "register_post_type",
        "body": "register_post_type( ${1:\\$post_type:string}, ${2:\\$args:array|string} )",
        "description": "Registers a post type."
    },
    "Function: register_rest_field": {
        "prefix": "register_rest_field",
        "body": "register_rest_field( ${1:\\$object_type:string|array}, ${2:\\$attribute:string}, ${3:\\$args:array} )",
        "description": "Registers a new field on an existing WordPress object type."
    },
    "Function: register_rest_route": {
        "prefix": "register_rest_route",
        "body": "register_rest_route( ${1:\\$namespace:string}, ${2:\\$route:string}, ${3:\\$args:array}, ${4:\\$override:boolean} )",
        "description": "Registers a REST API route."
    },
    "Function: register_setting": {
        "prefix": "register_setting",
        "body": "register_setting( ${1:\\$option_group:string}, ${2:\\$option_name:string}, ${3:\\$args:array} )",
        "description": "Register a setting and its data."
    },
    "Function: register_sidebar": {
        "prefix": "register_sidebar",
        "body": "register_sidebar( ${1:\\$args:array|string} )",
        "description": "Builds the definition for a single sidebar and returns the ID."
    },
    "Function: register_sidebar_widget": {
        "prefix": "register_sidebar_widget",
        "body": "register_sidebar_widget( ${1:\\$name:string|integer}, ${2:\\$output_callback:callable}, ${3:\\$classname:string} )",
        "description": "Register widget for sidebar with backward compatibility."
    },
    "Function: register_sidebars": {
        "prefix": "register_sidebars",
        "body": "register_sidebars( ${1:\\$number:integer}, ${2:\\$args:array|string} )",
        "description": "Creates multiple sidebars."
    },
    "Function: register_taxonomy": {
        "prefix": "register_taxonomy",
        "body": "register_taxonomy( ${1:\\$taxonomy:string}, ${2:\\$object_type:array|string}, ${3:\\$args:array|string} )",
        "description": "Creates or modifies a taxonomy object."
    },
    "Function: register_taxonomy_for_object_type": {
        "prefix": "register_taxonomy_for_object_type",
        "body": "register_taxonomy_for_object_type( ${1:\\$taxonomy:string}, ${2:\\$object_type:string} )",
        "description": "Add an already registered taxonomy to an object type."
    },
    "Function: register_theme_directory": {
        "prefix": "register_theme_directory",
        "body": "register_theme_directory( ${1:\\$directory:string} )",
        "description": "Register a directory that contains themes."
    },
    "Function: register_uninstall_hook": {
        "prefix": "register_uninstall_hook",
        "body": "register_uninstall_hook( ${1:\\$file:string}, ${2:\\$callback:callable} )",
        "description": "Set the uninstallation hook for a plugin."
    },
    "Function: register_widget": {
        "prefix": "register_widget",
        "body": "register_widget( ${1:\\$widget:string|WP_Widget} )",
        "description": "Register a widget"
    },
    "Function: register_widget_control": {
        "prefix": "register_widget_control",
        "body": "register_widget_control( ${1:\\$name:integer|string}, ${2:\\$control_callback:callable}, ${3:\\$width:integer}, ${4:\\$height:integer} )",
        "description": "Registers widget control callback for customizing options."
    },
    "Function: registered_meta_key_exists": {
        "prefix": "registered_meta_key_exists",
        "body": "registered_meta_key_exists( ${1:\\$object_type:string}, ${2:\\$meta_key:string} )",
        "description": "Checks if a meta key is registered."
    },
    "Function: rel_canonical": {
        "prefix": "rel_canonical",
        "body": "rel_canonical(  )",
        "description": "Outputs rel=canonical for singular queries."
    },
    "Function: remove_accents": {
        "prefix": "remove_accents",
        "body": "remove_accents( ${1:\\$string:string} )",
        "description": "Converts all accent characters to ASCII characters."
    },
    "Function: remove_action": {
        "prefix": "remove_action",
        "body": "remove_action( ${1:\\$tag:string}, ${2:\\$function_to_remove:callable}, ${3:\\$priority:integer} )",
        "description": "Removes a function from a specified action hook."
    },
    "Function: remove_all_actions": {
        "prefix": "remove_all_actions",
        "body": "remove_all_actions( ${1:\\$tag:string}, ${2:\\$priority:integer|boolean} )",
        "description": "Remove all of the hooks from an action."
    },
    "Function: remove_all_filters": {
        "prefix": "remove_all_filters",
        "body": "remove_all_filters( ${1:\\$tag:string}, ${2:\\$priority:integer|boolean} )",
        "description": "Remove all of the hooks from a filter."
    },
    "Function: remove_all_shortcodes": {
        "prefix": "remove_all_shortcodes",
        "body": "remove_all_shortcodes(  )",
        "description": "Clear all shortcodes."
    },
    "Function: remove_custom_background": {
        "prefix": "remove_custom_background",
        "body": "remove_custom_background(  )",
        "description": "Remove custom background support."
    },
    "Function: remove_custom_image_header": {
        "prefix": "remove_custom_image_header",
        "body": "remove_custom_image_header(  )",
        "description": "Remove image header support."
    },
    "Function: remove_editor_styles": {
        "prefix": "remove_editor_styles",
        "body": "remove_editor_styles(  )",
        "description": "Removes all visual editor stylesheets."
    },
    "Function: remove_filter": {
        "prefix": "remove_filter",
        "body": "remove_filter( ${1:\\$tag:string}, ${2:\\$function_to_remove:callable}, ${3:\\$priority:integer} )",
        "description": "Removes a function from a specified filter hook."
    },
    "Function: remove_image_size": {
        "prefix": "remove_image_size",
        "body": "remove_image_size( ${1:\\$name:string} )",
        "description": "Remove a new image size."
    },
    "Function: remove_menu_page": {
        "prefix": "remove_menu_page",
        "body": "remove_menu_page( ${1:\\$menu_slug:string} )",
        "description": "Remove a top-level admin menu."
    },
    "Function: remove_meta_box": {
        "prefix": "remove_meta_box",
        "body": "remove_meta_box( ${1:\\$id:string}, ${2:\\$screen:string|array|WP_Screen}, ${3:\\$context:string} )",
        "description": "Removes a meta box from one or more screens."
    },
    "Function: remove_option_update_handler": {
        "prefix": "remove_option_update_handler",
        "body": "remove_option_update_handler( ${1:\\$option_group:string}, ${2:\\$option_name:string}, ${3:\\$sanitize_callback:callable} )",
        "description": "Unregister a setting"
    },
    "Function: remove_option_whitelist": {
        "prefix": "remove_option_whitelist",
        "body": "remove_option_whitelist( ${1:\\$del_options:array}, ${2:\\$options:string|array} )",
        "description": "Removes a list of options from the options whitelist."
    },
    "Function: remove_permastruct": {
        "prefix": "remove_permastruct",
        "body": "remove_permastruct( ${1:\\$name:string} )",
        "description": "Removes a permalink structure."
    },
    "Function: remove_post_type_support": {
        "prefix": "remove_post_type_support",
        "body": "remove_post_type_support( ${1:\\$post_type:string}, ${2:\\$feature:string} )",
        "description": "Remove support for a feature from a post type."
    },
    "Function: remove_query_arg": {
        "prefix": "remove_query_arg",
        "body": "remove_query_arg( ${1:\\$key:string|array}, ${2:\\$query:boolean|string} )",
        "description": "Removes an item or items from a query string."
    },
    "Function: remove_rewrite_tag": {
        "prefix": "remove_rewrite_tag",
        "body": "remove_rewrite_tag( ${1:\\$tag:string} )",
        "description": "Removes an existing rewrite tag (like %postname%)."
    },
    "Function: remove_role": {
        "prefix": "remove_role",
        "body": "remove_role( ${1:\\$role:string} )",
        "description": "Remove role, if it exists."
    },
    "Function: remove_shortcode": {
        "prefix": "remove_shortcode",
        "body": "remove_shortcode( ${1:\\$tag:string} )",
        "description": "Removes hook for shortcode."
    },
    "Function: remove_submenu_page": {
        "prefix": "remove_submenu_page",
        "body": "remove_submenu_page( ${1:\\$menu_slug:string}, ${2:\\$submenu_slug:string} )",
        "description": "Remove an admin submenu."
    },
    "Function: remove_theme_mod": {
        "prefix": "remove_theme_mod",
        "body": "remove_theme_mod( ${1:\\$name:string} )",
        "description": "Remove theme modification name from current theme list."
    },
    "Function: remove_theme_mods": {
        "prefix": "remove_theme_mods",
        "body": "remove_theme_mods(  )",
        "description": "Remove theme modifications option for current theme."
    },
    "Function: remove_theme_support": {
        "prefix": "remove_theme_support",
        "body": "remove_theme_support( ${1:\\$feature:string} )",
        "description": "Allows a theme to de-register its support of a certain feature"
    },
    "Function: remove_user_from_blog": {
        "prefix": "remove_user_from_blog",
        "body": "remove_user_from_blog( ${1:\\$user_id:integer}, ${2:\\$blog_id:integer}, ${3:\\$reassign:string} )",
        "description": "Remove a user from a blog."
    },
    "Function: request_filesystem_credentials": {
        "prefix": "request_filesystem_credentials",
        "body": "request_filesystem_credentials( ${1:\\$form_post:string}, ${2:\\$type:string}, ${3:\\$error:boolean}, ${4:\\$context:string}, ${5:\\$extra_fields:array|null}, ${6:\\$allow_relaxed_file_ownership:boolean} )",
        "description": "Displays a form to the user to request for their FTP/SSH details in order to connect to the filesystem."
    },
    "Function: require_if_theme_supports": {
        "prefix": "require_if_theme_supports",
        "body": "require_if_theme_supports( ${1:\\$feature:string}, ${2:\\$include:string} )",
        "description": "Checks a theme&#039;s support for a given feature before loading the functions which implement it."
    },
    "Function: require_wp_db": {
        "prefix": "require_wp_db",
        "body": "require_wp_db(  )",
        "description": "Load the database class file and instantiate the `$wpdb` global."
    },
    "Function: reset_mbstring_encoding": {
        "prefix": "reset_mbstring_encoding",
        "body": "reset_mbstring_encoding(  )",
        "description": "Reset the mbstring internal encoding to a users previously set encoding."
    },
    "Function: reset_password": {
        "prefix": "reset_password",
        "body": "reset_password( ${1:\\$user:WP_User}, ${2:\\$new_pass:string} )",
        "description": "Handles resetting the user&#039;s password."
    },
    "Function: rest_api_default_filters": {
        "prefix": "rest_api_default_filters",
        "body": "rest_api_default_filters(  )",
        "description": "Registers the default REST API filters."
    },
    "Function: rest_api_init": {
        "prefix": "rest_api_init",
        "body": "rest_api_init(  )",
        "description": "Registers rewrite rules for the API."
    },
    "Function: rest_api_loaded": {
        "prefix": "rest_api_loaded",
        "body": "rest_api_loaded(  )",
        "description": "Loads the REST API."
    },
    "Function: rest_api_register_rewrites": {
        "prefix": "rest_api_register_rewrites",
        "body": "rest_api_register_rewrites(  )",
        "description": "Adds REST rewrite rules."
    },
    "Function: rest_authorization_required_code": {
        "prefix": "rest_authorization_required_code",
        "body": "rest_authorization_required_code(  )",
        "description": "Returns a contextual HTTP error code for authorization failure."
    },
    "Function: rest_cookie_check_errors": {
        "prefix": "rest_cookie_check_errors",
        "body": "rest_cookie_check_errors( ${1:\\$result:WP_Error|mixed} )",
        "description": "Checks for errors when using cookie-based authentication."
    },
    "Function: rest_cookie_collect_status": {
        "prefix": "rest_cookie_collect_status",
        "body": "rest_cookie_collect_status(  )",
        "description": "Collects cookie authentication status."
    },
    "Function: rest_do_request": {
        "prefix": "rest_do_request",
        "body": "rest_do_request( ${1:\\$request:WP_REST_Request|string} )",
        "description": "Do a REST request."
    },
    "Function: rest_ensure_request": {
        "prefix": "rest_ensure_request",
        "body": "rest_ensure_request( ${1:\\$request:array|WP_REST_Request} )",
        "description": "Ensures request arguments are a request object (for consistency)."
    },
    "Function: rest_ensure_response": {
        "prefix": "rest_ensure_response",
        "body": "rest_ensure_response( ${1:\\$response:WP_Error|WP_HTTP_Response|mixed} )",
        "description": "Ensures a REST response is a response object (for consistency)."
    },
    "Function: rest_filter_response_fields": {
        "prefix": "rest_filter_response_fields",
        "body": "rest_filter_response_fields( ${1:\\$response:WP_REST_Response}, ${2:\\$server:WP_REST_Server}, ${3:\\$request:WP_REST_Request} )",
        "description": "Filter the API response to include only a white-listed set of response object fields."
    },
    "Function: rest_get_avatar_sizes": {
        "prefix": "rest_get_avatar_sizes",
        "body": "rest_get_avatar_sizes(  )",
        "description": "Retrieves the pixel sizes for avatars."
    },
    "Function: rest_get_avatar_urls": {
        "prefix": "rest_get_avatar_urls",
        "body": "rest_get_avatar_urls( ${1:\\$email:string} )",
        "description": "Retrieves the avatar urls in various sizes based on a given email address."
    },
    "Function: rest_get_date_with_gmt": {
        "prefix": "rest_get_date_with_gmt",
        "body": "rest_get_date_with_gmt( ${1:\\$date:string}, ${2:\\$is_utc:boolean} )",
        "description": "Parses a date into both its local and UTC equivalent, in MySQL datetime format."
    },
    "Function: rest_get_server": {
        "prefix": "rest_get_server",
        "body": "rest_get_server(  )",
        "description": "Retrieves the current REST server instance."
    },
    "Function: rest_get_url_prefix": {
        "prefix": "rest_get_url_prefix",
        "body": "rest_get_url_prefix(  )",
        "description": "Retrieves the URL prefix for any API resource."
    },
    "Function: rest_handle_deprecated_argument": {
        "prefix": "rest_handle_deprecated_argument",
        "body": "rest_handle_deprecated_argument( ${1:\\$function:string}, ${2:\\$message:string}, ${3:\\$version:string} )",
        "description": "Handles _deprecated_argument() errors."
    },
    "Function: rest_handle_deprecated_function": {
        "prefix": "rest_handle_deprecated_function",
        "body": "rest_handle_deprecated_function( ${1:\\$function:string}, ${2:\\$replacement:string}, ${3:\\$version:string} )",
        "description": "Handles _deprecated_function() errors."
    },
    "Function: rest_handle_options_request": {
        "prefix": "rest_handle_options_request",
        "body": "rest_handle_options_request( ${1:\\$response:mixed}, ${2:\\$handler:WP_REST_Server}, ${3:\\$request:WP_REST_Request} )",
        "description": "Handles OPTIONS requests for the server."
    },
    "Function: rest_is_boolean": {
        "prefix": "rest_is_boolean",
        "body": "rest_is_boolean( ${1:\\$maybe_bool:boolean|string} )",
        "description": "Determines if a given value is boolean-like."
    },
    "Function: rest_is_ip_address": {
        "prefix": "rest_is_ip_address",
        "body": "rest_is_ip_address( ${1:\\$ip:string} )",
        "description": "Determines if an IP address is valid."
    },
    "Function: rest_output_link_header": {
        "prefix": "rest_output_link_header",
        "body": "rest_output_link_header(  )",
        "description": "Sends a Link header for the REST API."
    },
    "Function: rest_output_link_wp_head": {
        "prefix": "rest_output_link_wp_head",
        "body": "rest_output_link_wp_head(  )",
        "description": "Outputs the REST API link tag into page header."
    },
    "Function: rest_output_rsd": {
        "prefix": "rest_output_rsd",
        "body": "rest_output_rsd(  )",
        "description": "Adds the REST API URL to the WP RSD endpoint."
    },
    "Function: rest_parse_date": {
        "prefix": "rest_parse_date",
        "body": "rest_parse_date( ${1:\\$date:string}, ${2:\\$force_utc:boolean} )",
        "description": "Parses an RFC3339 time into a Unix timestamp."
    },
    "Function: rest_parse_request_arg": {
        "prefix": "rest_parse_request_arg",
        "body": "rest_parse_request_arg( ${1:\\$value:mixed}, ${2:\\$request:WP_REST_Request}, ${3:\\$param:string} )",
        "description": "Parse a request argument based on details registered to the route."
    },
    "Function: rest_sanitize_boolean": {
        "prefix": "rest_sanitize_boolean",
        "body": "rest_sanitize_boolean( ${1:\\$value:boolean|string|integer} )",
        "description": "Changes a boolean-like value into the proper boolean value."
    },
    "Function: rest_sanitize_request_arg": {
        "prefix": "rest_sanitize_request_arg",
        "body": "rest_sanitize_request_arg( ${1:\\$value:mixed}, ${2:\\$request:WP_REST_Request}, ${3:\\$param:string} )",
        "description": "Sanitize a request argument based on details registered to the route."
    },
    "Function: rest_sanitize_value_from_schema": {
        "prefix": "rest_sanitize_value_from_schema",
        "body": "rest_sanitize_value_from_schema( ${1:\\$value:mixed}, ${2:\\$args:array} )",
        "description": "Sanitize a value based on a schema."
    },
    "Function: rest_send_allow_header": {
        "prefix": "rest_send_allow_header",
        "body": "rest_send_allow_header( ${1:\\$response:WP_REST_Response}, ${2:\\$server:WP_REST_Server}, ${3:\\$request:WP_REST_Request} )",
        "description": "Sends the &quot;Allow&quot; header to state all methods that can be sent to the current route."
    },
    "Function: rest_send_cors_headers": {
        "prefix": "rest_send_cors_headers",
        "body": "rest_send_cors_headers( ${1:\\$value:mixed} )",
        "description": "Sends Cross-Origin Resource Sharing headers with API requests."
    },
    "Function: rest_url": {
        "prefix": "rest_url",
        "body": "rest_url( ${1:\\$path:string}, ${2:\\$scheme:string} )",
        "description": "Retrieves the URL to a REST endpoint."
    },
    "Function: rest_validate_request_arg": {
        "prefix": "rest_validate_request_arg",
        "body": "rest_validate_request_arg( ${1:\\$value:mixed}, ${2:\\$request:WP_REST_Request}, ${3:\\$param:string} )",
        "description": "Validate a request argument based on details registered to the route."
    },
    "Function: rest_validate_value_from_schema": {
        "prefix": "rest_validate_value_from_schema",
        "body": "rest_validate_value_from_schema( ${1:\\$value:mixed}, ${2:\\$args:array}, ${3:\\$param:string} )",
        "description": "Validate a value based on a schema."
    },
    "Function: restore_current_blog": {
        "prefix": "restore_current_blog",
        "body": "restore_current_blog(  )",
        "description": "Restore the current blog, after calling switch_to_blog()"
    },
    "Function: restore_current_locale": {
        "prefix": "restore_current_locale",
        "body": "restore_current_locale(  )",
        "description": "Restores the translations according to the original locale."
    },
    "Function: restore_previous_locale": {
        "prefix": "restore_previous_locale",
        "body": "restore_previous_locale(  )",
        "description": "Restores the translations according to the previous locale."
    },
    "Function: retrieve_password": {
        "prefix": "retrieve_password",
        "body": "retrieve_password(  )",
        "description": "Handles sending password retrieval email to user."
    },
    "Function: retrieve_widgets": {
        "prefix": "retrieve_widgets",
        "body": "retrieve_widgets( ${1:\\$theme_changed:string|boolean} )",
        "description": "Look for &quot;lost&quot; widgets, this has to run at least on each theme change."
    },
    "Function: revoke_super_admin": {
        "prefix": "revoke_super_admin",
        "body": "revoke_super_admin( ${1:\\$user_id:integer} )",
        "description": "Revokes Super Admin privileges."
    },
    "Function: rewind_posts": {
        "prefix": "rewind_posts",
        "body": "rewind_posts(  )",
        "description": "Rewind the loop posts."
    },
    "Function: rich_edit_exists": {
        "prefix": "rich_edit_exists",
        "body": "rich_edit_exists(  )",
        "description": "Determine if TinyMCE is available."
    },
    "Function: rsd_link": {
        "prefix": "rsd_link",
        "body": "rsd_link(  )",
        "description": "Display the link to the Really Simple Discovery service endpoint."
    },
    "Function: rss2_site_icon": {
        "prefix": "rss2_site_icon",
        "body": "rss2_site_icon(  )",
        "description": "Displays Site Icon in RSS2."
    },
    "Function: rss_enclosure": {
        "prefix": "rss_enclosure",
        "body": "rss_enclosure(  )",
        "description": "Display the rss enclosure for the current post."
    },
    "Function: safecss_filter_attr": {
        "prefix": "safecss_filter_attr",
        "body": "safecss_filter_attr( ${1:\\$css:string}, ${2:\\$deprecated:string} )",
        "description": "Inline CSS filter"
    },
    "Function: sanitize_bookmark": {
        "prefix": "sanitize_bookmark",
        "body": "sanitize_bookmark( ${1:\\$bookmark:stdClass|array}, ${2:\\$context:string} )",
        "description": "Sanitizes all bookmark fields"
    },
    "Function: sanitize_bookmark_field": {
        "prefix": "sanitize_bookmark_field",
        "body": "sanitize_bookmark_field( ${1:\\$field:string}, ${2:\\$value:mixed}, ${3:\\$bookmark_id:integer}, ${4:\\$context:string} )",
        "description": "Sanitizes a bookmark field."
    },
    "Function: sanitize_category": {
        "prefix": "sanitize_category",
        "body": "sanitize_category( ${1:\\$category:object|array}, ${2:\\$context:string} )",
        "description": "Sanitizes category data based on context."
    },
    "Function: sanitize_category_field": {
        "prefix": "sanitize_category_field",
        "body": "sanitize_category_field( ${1:\\$field:string}, ${2:\\$value:mixed}, ${3:\\$cat_id:integer}, ${4:\\$context:string} )",
        "description": "Sanitizes data in single category key field."
    },
    "Function: sanitize_comment_cookies": {
        "prefix": "sanitize_comment_cookies",
        "body": "sanitize_comment_cookies(  )",
        "description": "Sanitizes the cookies sent to the user already."
    },
    "Function: sanitize_email": {
        "prefix": "sanitize_email",
        "body": "sanitize_email( ${1:\\$email:string} )",
        "description": "Strips out all characters that are not allowable in an email."
    },
    "Function: sanitize_file_name": {
        "prefix": "sanitize_file_name",
        "body": "sanitize_file_name( ${1:\\$filename:string} )",
        "description": "Sanitizes a filename, replacing whitespace with dashes."
    },
    "Function: sanitize_hex_color": {
        "prefix": "sanitize_hex_color",
        "body": "sanitize_hex_color( ${1:\\$color:string} )",
        "description": "Sanitizes a hex color."
    },
    "Function: sanitize_hex_color_no_hash": {
        "prefix": "sanitize_hex_color_no_hash",
        "body": "sanitize_hex_color_no_hash( ${1:\\$color:string} )",
        "description": "Sanitizes a hex color without a hash. Use sanitize_hex_color() when possible."
    },
    "Function: sanitize_html_class": {
        "prefix": "sanitize_html_class",
        "body": "sanitize_html_class( ${1:\\$class:string}, ${2:\\$fallback:string} )",
        "description": "Sanitizes an HTML classname to ensure it only contains valid characters."
    },
    "Function: sanitize_key": {
        "prefix": "sanitize_key",
        "body": "sanitize_key( ${1:\\$key:string} )",
        "description": "Sanitizes a string key."
    },
    "Function: sanitize_meta": {
        "prefix": "sanitize_meta",
        "body": "sanitize_meta( ${1:\\$meta_key:string}, ${2:\\$meta_value:mixed}, ${3:\\$object_type:string} )",
        "description": "Sanitize meta value."
    },
    "Function: sanitize_mime_type": {
        "prefix": "sanitize_mime_type",
        "body": "sanitize_mime_type( ${1:\\$mime_type:string} )",
        "description": "Sanitize a mime type"
    },
    "Function: sanitize_option": {
        "prefix": "sanitize_option",
        "body": "sanitize_option( ${1:\\$option:string}, ${2:\\$value:string} )",
        "description": "Sanitises various option values based on the nature of the option."
    },
    "Function: sanitize_post": {
        "prefix": "sanitize_post",
        "body": "sanitize_post( ${1:\\$post:object|WP_Post|array}, ${2:\\$context:string} )",
        "description": "Sanitize every post field."
    },
    "Function: sanitize_post_field": {
        "prefix": "sanitize_post_field",
        "body": "sanitize_post_field( ${1:\\$field:string}, ${2:\\$value:mixed}, ${3:\\$post_id:integer}, ${4:\\$context:string} )",
        "description": "Sanitize post field based on context."
    },
    "Function: sanitize_sql_orderby": {
        "prefix": "sanitize_sql_orderby",
        "body": "sanitize_sql_orderby( ${1:\\$orderby:string} )",
        "description": "Ensures a string is a valid SQL &#039;order by&#039; clause."
    },
    "Function: sanitize_term": {
        "prefix": "sanitize_term",
        "body": "sanitize_term( ${1:\\$term:array|object}, ${2:\\$taxonomy:string}, ${3:\\$context:string} )",
        "description": "Sanitize Term all fields."
    },
    "Function: sanitize_term_field": {
        "prefix": "sanitize_term_field",
        "body": "sanitize_term_field( ${1:\\$field:string}, ${2:\\$value:string}, ${3:\\$term_id:integer}, ${4:\\$taxonomy:string}, ${5:\\$context:string} )",
        "description": "Cleanse the field value in the term based on the context."
    },
    "Function: sanitize_text_field": {
        "prefix": "sanitize_text_field",
        "body": "sanitize_text_field( ${1:\\$str:string} )",
        "description": "Sanitizes a string from user input or from the database."
    },
    "Function: sanitize_textarea_field": {
        "prefix": "sanitize_textarea_field",
        "body": "sanitize_textarea_field( ${1:\\$str:string} )",
        "description": "Sanitizes a multiline string from user input or from the database."
    },
    "Function: sanitize_title": {
        "prefix": "sanitize_title",
        "body": "sanitize_title( ${1:\\$title:string}, ${2:\\$fallback_title:string}, ${3:\\$context:string} )",
        "description": "Sanitizes a title, or returns a fallback title."
    },
    "Function: sanitize_title_for_query": {
        "prefix": "sanitize_title_for_query",
        "body": "sanitize_title_for_query( ${1:\\$title:string} )",
        "description": "Sanitizes a title with the &#039;query&#039; context."
    },
    "Function: sanitize_title_with_dashes": {
        "prefix": "sanitize_title_with_dashes",
        "body": "sanitize_title_with_dashes( ${1:\\$title:string}, ${2:\\$raw_title:string}, ${3:\\$context:string} )",
        "description": "Sanitizes a title, replacing whitespace and a few other characters with dashes."
    },
    "Function: sanitize_trackback_urls": {
        "prefix": "sanitize_trackback_urls",
        "body": "sanitize_trackback_urls( ${1:\\$to_ping:string} )",
        "description": "Sanitize space or carriage return separated URLs that are used to send trackbacks."
    },
    "Function: sanitize_url": {
        "prefix": "sanitize_url",
        "body": "sanitize_url( ${1:\\$url:string}, ${2:\\$protocols:array|null} )",
        "description": "Performs esc_url() for database or redirect usage."
    },
    "Function: sanitize_user": {
        "prefix": "sanitize_user",
        "body": "sanitize_user( ${1:\\$username:string}, ${2:\\$strict:boolean} )",
        "description": "Sanitizes a username, stripping out unsafe characters."
    },
    "Function: sanitize_user_field": {
        "prefix": "sanitize_user_field",
        "body": "sanitize_user_field( ${1:\\$field:string}, ${2:\\$value:mixed}, ${3:\\$user_id:integer}, ${4:\\$context:string} )",
        "description": "Sanitize user field based on context."
    },
    "Function: sanitize_user_object": {
        "prefix": "sanitize_user_object",
        "body": "sanitize_user_object( ${1:\\$user:object|array}, ${2:\\$context:string} )",
        "description": "Sanitize every user field."
    },
    "Function: save_mod_rewrite_rules": {
        "prefix": "save_mod_rewrite_rules",
        "body": "save_mod_rewrite_rules(  )",
        "description": "Updates the htaccess file with the current rules if it is writable."
    },
    "Function: saveDomDocument": {
        "prefix": "saveDomDocument",
        "body": "saveDomDocument( ${1:\\$doc:DOMDocument}, ${2:\\$filename:string} )",
        "description": "Saves the XML document into a file"
    },
    "Function: screen_icon": {
        "prefix": "screen_icon",
        "body": "screen_icon(  )",
        "description": "Displays a screen icon."
    },
    "Function: screen_layout": {
        "prefix": "screen_layout",
        "body": "screen_layout( ${1:\\$screen:} )",
        "description": "Returns the screen layout options."
    },
    "Function: screen_meta": {
        "prefix": "screen_meta",
        "body": "screen_meta( ${1:\\$screen:} )",
        "description": "Renders the screen&#039;s help."
    },
    "Function: screen_options": {
        "prefix": "screen_options",
        "body": "screen_options( ${1:\\$screen:} )",
        "description": "Returns the screen&#039;s per-page options."
    },
    "Function: script_concat_settings": {
        "prefix": "script_concat_settings",
        "body": "script_concat_settings(  )",
        "description": "Determine the concatenation and compression settings for scripts and styles."
    },
    "Function: search_theme_directories": {
        "prefix": "search_theme_directories",
        "body": "search_theme_directories( ${1:\\$force:boolean} )",
        "description": "Search all registered theme directories for complete and valid themes."
    },
    "Function: seems_utf8": {
        "prefix": "seems_utf8",
        "body": "seems_utf8( ${1:\\$str:string} )",
        "description": "Checks to see if a string is utf8 encoded."
    },
    "Function: selected": {
        "prefix": "selected",
        "body": "selected( ${1:\\$selected:mixed}, ${2:\\$current:mixed}, ${3:\\$echo:boolean} )",
        "description": "Outputs the html selected attribute."
    },
    "Function: self_admin_url": {
        "prefix": "self_admin_url",
        "body": "self_admin_url( ${1:\\$path:string}, ${2:\\$scheme:string} )",
        "description": "Retrieves the URL to the admin area for either the current site or the network depending on context."
    },
    "Function: self_link": {
        "prefix": "self_link",
        "body": "self_link(  )",
        "description": "Display the link for the currently displayed feed in a XSS safe way."
    },
    "Function: send_confirmation_on_profile_email": {
        "prefix": "send_confirmation_on_profile_email",
        "body": "send_confirmation_on_profile_email(  )",
        "description": "Send a confirmation request email when a change of user email address is attempted."
    },
    "Function: send_frame_options_header": {
        "prefix": "send_frame_options_header",
        "body": "send_frame_options_header(  )",
        "description": "Send a HTTP header to limit rendering of pages to same origin iframes."
    },
    "Function: send_nosniff_header": {
        "prefix": "send_nosniff_header",
        "body": "send_nosniff_header(  )",
        "description": "Send a HTTP header to disable content type sniffing in browsers which support it."
    },
    "Function: send_origin_headers": {
        "prefix": "send_origin_headers",
        "body": "send_origin_headers(  )",
        "description": "Send Access-Control-Allow-Origin and related headers if the current request is from an allowed origin."
    },
    "Function: separate_comments": {
        "prefix": "separate_comments",
        "body": "separate_comments( ${1:\\$comments:array} )",
        "description": "Separates an array of comments into an array keyed by comment_type."
    },
    "Function: set_current_screen": {
        "prefix": "set_current_screen",
        "body": "set_current_screen( ${1:\\$hook_name:mixed} )",
        "description": "Set the current screen object"
    },
    "Function: set_current_user": {
        "prefix": "set_current_user",
        "body": "set_current_user( ${1:\\$id:integer|null}, ${2:\\$name:string} )",
        "description": "Changes the current user by ID or name."
    },
    "Function: set_post_format": {
        "prefix": "set_post_format",
        "body": "set_post_format( ${1:\\$post:integer|object}, ${2:\\$format:string} )",
        "description": "Assign a format to a post"
    },
    "Function: set_post_thumbnail": {
        "prefix": "set_post_thumbnail",
        "body": "set_post_thumbnail( ${1:\\$post:integer|WP_Post}, ${2:\\$thumbnail_id:integer} )",
        "description": "Set a post thumbnail."
    },
    "Function: set_post_thumbnail_size": {
        "prefix": "set_post_thumbnail_size",
        "body": "set_post_thumbnail_size( ${1:\\$width:integer}, ${2:\\$height:integer}, ${3:\\$crop:boolean|array} )",
        "description": "Registers an image size for the post thumbnail."
    },
    "Function: set_post_type": {
        "prefix": "set_post_type",
        "body": "set_post_type( ${1:\\$post_id:integer}, ${2:\\$post_type:string} )",
        "description": "Update the post type for the post ID."
    },
    "Function: set_query_var": {
        "prefix": "set_query_var",
        "body": "set_query_var( ${1:\\$var:string}, ${2:\\$value:mixed} )",
        "description": "Set query variable."
    },
    "Function: set_screen_options": {
        "prefix": "set_screen_options",
        "body": "set_screen_options(  )",
        "description": "Saves option for number of rows when listing posts, pages, comments, etc."
    },
    "Function: set_site_transient": {
        "prefix": "set_site_transient",
        "body": "set_site_transient( ${1:\\$transient:string}, ${2:\\$value:mixed}, ${3:\\$expiration:integer} )",
        "description": "Set/update the value of a site transient."
    },
    "Function: set_theme_mod": {
        "prefix": "set_theme_mod",
        "body": "set_theme_mod( ${1:\\$name:string}, ${2:\\$value:mixed} )",
        "description": "Update theme modification value for the current theme."
    },
    "Function: set_transient": {
        "prefix": "set_transient",
        "body": "set_transient( ${1:\\$transient:string}, ${2:\\$value:mixed}, ${3:\\$expiration:integer} )",
        "description": "Set/update the value of a transient."
    },
    "Function: set_url_scheme": {
        "prefix": "set_url_scheme",
        "body": "set_url_scheme( ${1:\\$url:string}, ${2:\\$scheme:string|null} )",
        "description": "Sets the scheme for a URL."
    },
    "Function: set_user_setting": {
        "prefix": "set_user_setting",
        "body": "set_user_setting( ${1:\\$name:string}, ${2:\\$value:string} )",
        "description": "Add or update user interface setting."
    },
    "Function: settings_errors": {
        "prefix": "settings_errors",
        "body": "settings_errors( ${1:\\$setting:string}, ${2:\\$sanitize:boolean}, ${3:\\$hide_on_update:boolean} )",
        "description": "Display settings errors registered by add_settings_error()."
    },
    "Function: settings_fields": {
        "prefix": "settings_fields",
        "body": "settings_fields( ${1:\\$option_group:string} )",
        "description": "Output nonce, action, and option_page fields for a settings page."
    },
    "Function: setup_postdata": {
        "prefix": "setup_postdata",
        "body": "setup_postdata( ${1:\\$post:WP_Post|object|integer} )",
        "description": "Set up global post data."
    },
    "Function: setup_userdata": {
        "prefix": "setup_userdata",
        "body": "setup_userdata( ${1:\\$for_user_id:integer} )",
        "description": "Set up global user vars."
    },
    "Function: shortcode_atts": {
        "prefix": "shortcode_atts",
        "body": "shortcode_atts( ${1:\\$pairs:array}, ${2:\\$atts:array}, ${3:\\$shortcode:string} )",
        "description": "Combine user attributes with known attributes and fill in defaults when needed."
    },
    "Function: shortcode_exists": {
        "prefix": "shortcode_exists",
        "body": "shortcode_exists( ${1:\\$tag:string} )",
        "description": "Whether a registered shortcode exists named $tag"
    },
    "Function: shortcode_parse_atts": {
        "prefix": "shortcode_parse_atts",
        "body": "shortcode_parse_atts( ${1:\\$text:string} )",
        "description": "Retrieve all attributes from the shortcodes tag."
    },
    "Function: shortcode_unautop": {
        "prefix": "shortcode_unautop",
        "body": "shortcode_unautop( ${1:\\$pee:string} )",
        "description": "Don&#039;t auto-p wrap shortcodes that stand alone"
    },
    "Function: show_admin_bar": {
        "prefix": "show_admin_bar",
        "body": "show_admin_bar( ${1:\\$show:boolean} )",
        "description": "Sets the display status of the admin bar."
    },
    "Function: show_blog_form": {
        "prefix": "show_blog_form",
        "body": "show_blog_form( ${1:\\$blogname:string}, ${2:\\$blog_title:string}, ${3:\\$errors:WP_Error|string} )",
        "description": "Generates and displays the Signup and Create Site forms"
    },
    "Function: show_message": {
        "prefix": "show_message",
        "body": "show_message( ${1:\\$message:string|WP_Error} )",
        "description": "Displays the given administration message."
    },
    "Function: show_user_form": {
        "prefix": "show_user_form",
        "body": "show_user_form( ${1:\\$user_name:string}, ${2:\\$user_email:string}, ${3:\\$errors:WP_Error|string} )",
        "description": "Display user registration form"
    },
    "Function: shutdown_action_hook": {
        "prefix": "shutdown_action_hook",
        "body": "shutdown_action_hook(  )",
        "description": "Runs just before PHP shuts down execution."
    },
    "Function: signup_another_blog": {
        "prefix": "signup_another_blog",
        "body": "signup_another_blog( ${1:\\$blogname:string}, ${2:\\$blog_title:string}, ${3:\\$errors:WP_Error|string} )",
        "description": "Allow returning users to sign up for another site"
    },
    "Function: signup_blog": {
        "prefix": "signup_blog",
        "body": "signup_blog( ${1:\\$user_name:string}, ${2:\\$user_email:string}, ${3:\\$blogname:string}, ${4:\\$blog_title:string}, ${5:\\$errors:WP_Error|string} )",
        "description": "Setup the new site signup"
    },
    "Function: signup_get_available_languages": {
        "prefix": "signup_get_available_languages",
        "body": "signup_get_available_languages(  )",
        "description": "Retrieves languages available during the site/user signup process."
    },
    "Function: signup_nonce_check": {
        "prefix": "signup_nonce_check",
        "body": "signup_nonce_check( ${1:\\$result:array} )",
        "description": "Process the signup nonce created in signup_nonce_fields()."
    },
    "Function: signup_nonce_fields": {
        "prefix": "signup_nonce_fields",
        "body": "signup_nonce_fields(  )",
        "description": "Add a nonce field to the signup page."
    },
    "Function: signup_user": {
        "prefix": "signup_user",
        "body": "signup_user( ${1:\\$user_name:string}, ${2:\\$user_email:string}, ${3:\\$errors:WP_Error|string} )",
        "description": "Setup the new user signup process"
    },
    "Function: single_cat_title": {
        "prefix": "single_cat_title",
        "body": "single_cat_title( ${1:\\$prefix:string}, ${2:\\$display:boolean} )",
        "description": "Display or retrieve page title for category archive."
    },
    "Function: single_month_title": {
        "prefix": "single_month_title",
        "body": "single_month_title( ${1:\\$prefix:string}, ${2:\\$display:boolean} )",
        "description": "Display or retrieve page title for post archive based on date."
    },
    "Function: single_post_title": {
        "prefix": "single_post_title",
        "body": "single_post_title( ${1:\\$prefix:string}, ${2:\\$display:boolean} )",
        "description": "Display or retrieve page title for post."
    },
    "Function: single_tag_title": {
        "prefix": "single_tag_title",
        "body": "single_tag_title( ${1:\\$prefix:string}, ${2:\\$display:boolean} )",
        "description": "Display or retrieve page title for tag post archive."
    },
    "Function: single_term_title": {
        "prefix": "single_term_title",
        "body": "single_term_title( ${1:\\$prefix:string}, ${2:\\$display:boolean} )",
        "description": "Display or retrieve page title for taxonomy term archive."
    },
    "Function: site_admin_notice": {
        "prefix": "site_admin_notice",
        "body": "site_admin_notice(  )",
        "description": "Displays an admin notice to upgrade all sites after a core upgrade."
    },
    "Function: site_icon_url": {
        "prefix": "site_icon_url",
        "body": "site_icon_url( ${1:\\$size:integer}, ${2:\\$url:string}, ${3:\\$blog_id:integer} )",
        "description": "Displays the Site Icon URL."
    },
    "Function: site_url": {
        "prefix": "site_url",
        "body": "site_url( ${1:\\$path:string}, ${2:\\$scheme:string|null} )",
        "description": "Retrieves the URL for the current site where WordPress application files (e.g. wp-blog-header.php or the wp-admin/ folder) are accessible."
    },
    "Function: size_format": {
        "prefix": "size_format",
        "body": "size_format( ${1:\\$bytes:integer|string}, ${2:\\$decimals:integer} )",
        "description": "Convert number of bytes largest unit bytes will fit into."
    },
    "Function: smilies_init": {
        "prefix": "smilies_init",
        "body": "smilies_init(  )",
        "description": "Convert smiley code to the icon graphic file equivalent."
    },
    "Function: sort_menu": {
        "prefix": "sort_menu",
        "body": "sort_menu( ${1:\\$a:array}, ${2:\\$b:array} )",
        "description": ""
    },
    "Function: spawn_cron": {
        "prefix": "spawn_cron",
        "body": "spawn_cron( ${1:\\$gmt_time:integer} )",
        "description": "Sends a request to run cron through HTTP request that doesn&#039;t halt page loading."
    },
    "Function: spl_autoload_functions": {
        "prefix": "spl_autoload_functions",
        "body": "spl_autoload_functions(  )",
        "description": "Retrieves the registered autoloader functions."
    },
    "Function: spl_autoload_register": {
        "prefix": "spl_autoload_register",
        "body": "spl_autoload_register( ${1:\\$autoload_function:callable}, ${2:\\$throw:boolean}, ${3:\\$prepend:boolean} )",
        "description": "Registers a function to be autoloaded."
    },
    "Function: spl_autoload_unregister": {
        "prefix": "spl_autoload_unregister",
        "body": "spl_autoload_unregister( ${1:\\$function:callable} )",
        "description": "Unregisters an autoloader function."
    },
    "Function: start_post_rel_link": {
        "prefix": "start_post_rel_link",
        "body": "start_post_rel_link( ${1:\\$title:string}, ${2:\\$in_same_cat:boolean}, ${3:\\$excluded_categories:string} )",
        "description": "Display relational link for the first post."
    },
    "Function: start_wp": {
        "prefix": "start_wp",
        "body": "start_wp(  )",
        "description": "Sets up the WordPress Loop."
    },
    "Function: startElement": {
        "prefix": "startElement",
        "body": "startElement( ${1:\\$parser:mixed}, ${2:\\$tagName:string}, ${3:\\$attrs:array} )",
        "description": "XML callback function for the start of a new XML tag."
    },
    "Function: status_header": {
        "prefix": "status_header",
        "body": "status_header( ${1:\\$code:integer}, ${2:\\$description:string} )",
        "description": "Set HTTP status header."
    },
    "Function: stick_post": {
        "prefix": "stick_post",
        "body": "stick_post( ${1:\\$post_id:integer} )",
        "description": "Make a post sticky."
    },
    "Function: sticky_class": {
        "prefix": "sticky_class",
        "body": "sticky_class( ${1:\\$post_id:integer|null} )",
        "description": "Display &quot;sticky&quot; CSS class, if a post is sticky."
    },
    "Function: stream_preview_image": {
        "prefix": "stream_preview_image",
        "body": "stream_preview_image( ${1:\\$post_id:integer} )",
        "description": "Streams image in post to browser, along with enqueued changes in $_REQUEST[&#039;history&#039;]"
    },
    "Function: strip_fragment_from_url": {
        "prefix": "strip_fragment_from_url",
        "body": "strip_fragment_from_url( ${1:\\$url:string} )",
        "description": "Strips the #fragment from a URL, if one is present."
    },
    "Function: strip_shortcode_tag": {
        "prefix": "strip_shortcode_tag",
        "body": "strip_shortcode_tag( ${1:\\$m:array} )",
        "description": "Strips a shortcode tag based on RegEx matches against post content."
    },
    "Function: strip_shortcodes": {
        "prefix": "strip_shortcodes",
        "body": "strip_shortcodes( ${1:\\$content:string} )",
        "description": "Remove all shortcode tags from the given content."
    },
    "Function: stripos": {
        "prefix": "stripos",
        "body": "stripos( ${1:\\$haystack:}, ${2:\\$needle:} )",
        "description": ""
    },
    "Function: stripslashes_deep": {
        "prefix": "stripslashes_deep",
        "body": "stripslashes_deep( ${1:\\$value:mixed} )",
        "description": "Navigates through an array, object, or scalar, and removes slashes from the values."
    },
    "Function: stripslashes_from_strings_only": {
        "prefix": "stripslashes_from_strings_only",
        "body": "stripslashes_from_strings_only( ${1:\\$value:mixed} )",
        "description": "Callback function for `stripslashes_deep()` which strips slashes from strings."
    },
    "Function: submit_button": {
        "prefix": "submit_button",
        "body": "submit_button( ${1:\\$text:string|null}, ${2:\\$type:string}, ${3:\\$name:string}, ${4:\\$wrap:boolean}, ${5:\\$other_attributes:array|string|null} )",
        "description": "Echoes a submit button, with provided text and appropriate class(es)."
    },
    "Function: switch_theme": {
        "prefix": "switch_theme",
        "body": "switch_theme( ${1:\\$stylesheet:string} )",
        "description": "Switches the theme."
    },
    "Function: switch_to_blog": {
        "prefix": "switch_to_blog",
        "body": "switch_to_blog( ${1:\\$new_blog:integer}, ${2:\\$deprecated:boolean|null} )",
        "description": "Switch the current blog."
    },
    "Function: switch_to_locale": {
        "prefix": "switch_to_locale",
        "body": "switch_to_locale( ${1:\\$locale:string} )",
        "description": "Switches the translations according to the given locale."
    },
    "Function: sync_category_tag_slugs": {
        "prefix": "sync_category_tag_slugs",
        "body": "sync_category_tag_slugs( ${1:\\$term:object}, ${2:\\$taxonomy:string} )",
        "description": "Synchronize category and post tag slugs when global terms are enabled."
    },
    "Function: tag_description": {
        "prefix": "tag_description",
        "body": "tag_description( ${1:\\$tag:integer} )",
        "description": "Retrieve tag description."
    },
    "Function: tag_escape": {
        "prefix": "tag_escape",
        "body": "tag_escape( ${1:\\$tag_name:string} )",
        "description": "Escape an HTML tag name."
    },
    "Function: tag_exists": {
        "prefix": "tag_exists",
        "body": "tag_exists( ${1:\\$tag_name:integer|string} )",
        "description": "Check whether a post tag with a given name exists."
    },
    "Function: taxonomy_exists": {
        "prefix": "taxonomy_exists",
        "body": "taxonomy_exists( ${1:\\$taxonomy:string} )",
        "description": "Checks that the taxonomy name exists."
    },
    "Function: term_description": {
        "prefix": "term_description",
        "body": "term_description( ${1:\\$term:integer}, ${2:\\$deprecated:null} )",
        "description": "Retrieve term description."
    },
    "Function: term_exists": {
        "prefix": "term_exists",
        "body": "term_exists( ${1:\\$term:integer|string}, ${2:\\$taxonomy:string}, ${3:\\$parent:integer|null} )",
        "description": "Check if Term exists."
    },
    "Function: term_is_ancestor_of": {
        "prefix": "term_is_ancestor_of",
        "body": "term_is_ancestor_of( ${1:\\$term1:integer|object}, ${2:\\$term2:integer|object}, ${3:\\$taxonomy:string} )",
        "description": "Check if a term is an ancestor of another term."
    },
    "Function: the_archive_description": {
        "prefix": "the_archive_description",
        "body": "the_archive_description( ${1:\\$before:string}, ${2:\\$after:string} )",
        "description": "Display category, tag, term, or author description."
    },
    "Function: the_archive_title": {
        "prefix": "the_archive_title",
        "body": "the_archive_title( ${1:\\$before:string}, ${2:\\$after:string} )",
        "description": "Display the archive title based on the queried object."
    },
    "Function: the_attachment_link": {
        "prefix": "the_attachment_link",
        "body": "the_attachment_link( ${1:\\$id:integer|WP_Post}, ${2:\\$fullsize:boolean}, ${3:\\$deprecated:boolean}, ${4:\\$permalink:boolean} )",
        "description": "Display an attachment page link using an image or icon."
    },
    "Function: the_attachment_links": {
        "prefix": "the_attachment_links",
        "body": "the_attachment_links( ${1:\\$id:integer|boolean} )",
        "description": "This was once used to display attachment links. Now it is deprecated and stubbed."
    },
    "Function: the_author": {
        "prefix": "the_author",
        "body": "the_author( ${1:\\$deprecated:string}, ${2:\\$deprecated_echo:string} )",
        "description": "Display the name of the author of the current post."
    },
    "Function: the_author_aim": {
        "prefix": "the_author_aim",
        "body": "the_author_aim(  )",
        "description": "Display the AIM address of the author of the current post."
    },
    "Function: the_author_description": {
        "prefix": "the_author_description",
        "body": "the_author_description(  )",
        "description": "Display the description of the author of the current post."
    },
    "Function: the_author_email": {
        "prefix": "the_author_email",
        "body": "the_author_email(  )",
        "description": "Display the email of the author of the current post."
    },
    "Function: the_author_firstname": {
        "prefix": "the_author_firstname",
        "body": "the_author_firstname(  )",
        "description": "Display the first name of the author of the current post."
    },
    "Function: the_author_icq": {
        "prefix": "the_author_icq",
        "body": "the_author_icq(  )",
        "description": "Display the ICQ number of the author of the current post."
    },
    "Function: the_author_ID": {
        "prefix": "the_author_ID",
        "body": "the_author_ID(  )",
        "description": "Display the ID of the author of the current post."
    },
    "Function: the_author_lastname": {
        "prefix": "the_author_lastname",
        "body": "the_author_lastname(  )",
        "description": "Display the last name of the author of the current post."
    },
    "Function: the_author_link": {
        "prefix": "the_author_link",
        "body": "the_author_link(  )",
        "description": "Display either author&#039;s link or author&#039;s name."
    },
    "Function: the_author_login": {
        "prefix": "the_author_login",
        "body": "the_author_login(  )",
        "description": "Display the login name of the author of the current post."
    },
    "Function: the_author_meta": {
        "prefix": "the_author_meta",
        "body": "the_author_meta( ${1:\\$field:string}, ${2:\\$user_id:integer} )",
        "description": "Outputs the field from the user&#039;s DB object. Defaults to current post&#039;s author."
    },
    "Function: the_author_msn": {
        "prefix": "the_author_msn",
        "body": "the_author_msn(  )",
        "description": "Display the MSN address of the author of the current post."
    },
    "Function: the_author_nickname": {
        "prefix": "the_author_nickname",
        "body": "the_author_nickname(  )",
        "description": "Display the nickname of the author of the current post."
    },
    "Function: the_author_posts": {
        "prefix": "the_author_posts",
        "body": "the_author_posts(  )",
        "description": "Display the number of posts by the author of the current post."
    },
    "Function: the_author_posts_link": {
        "prefix": "the_author_posts_link",
        "body": "the_author_posts_link( ${1:\\$deprecated:string} )",
        "description": "Displays an HTML link to the author page of the current post&#039;s author."
    },
    "Function: the_author_url": {
        "prefix": "the_author_url",
        "body": "the_author_url(  )",
        "description": "Display the URL to the home page of the author of the current post."
    },
    "Function: the_author_yim": {
        "prefix": "the_author_yim",
        "body": "the_author_yim(  )",
        "description": "Display the Yahoo! IM name of the author of the current post."
    },
    "Function: the_category": {
        "prefix": "the_category",
        "body": "the_category( ${1:\\$separator:string}, ${2:\\$parents:string}, ${3:\\$post_id:integer} )",
        "description": "Display category list for a post in either HTML list or custom format."
    },
    "Function: the_category_head": {
        "prefix": "the_category_head",
        "body": "the_category_head( ${1:\\$before:string}, ${2:\\$after:string} )",
        "description": "Prints a category with optional text before and after."
    },
    "Function: the_category_ID": {
        "prefix": "the_category_ID",
        "body": "the_category_ID( ${1:\\$echo:boolean} )",
        "description": "Returns or prints a category ID."
    },
    "Function: the_category_rss": {
        "prefix": "the_category_rss",
        "body": "the_category_rss( ${1:\\$type:string|null} )",
        "description": "Display the post categories in the feed."
    },
    "Function: the_comment": {
        "prefix": "the_comment",
        "body": "the_comment(  )",
        "description": "Iterate comment index in the comment loop."
    },
    "Function: the_comments_navigation": {
        "prefix": "the_comments_navigation",
        "body": "the_comments_navigation( ${1:\\$args:array} )",
        "description": "Displays navigation to next/previous set of comments, when applicable."
    },
    "Function: the_comments_pagination": {
        "prefix": "the_comments_pagination",
        "body": "the_comments_pagination( ${1:\\$args:array} )",
        "description": "Displays a paginated navigation to next/previous set of comments, when applicable."
    },
    "Function: the_content": {
        "prefix": "the_content",
        "body": "the_content( ${1:\\$more_link_text:string|null}, ${2:\\$strip_teaser:boolean} )",
        "description": "Display the post content."
    },
    "Function: the_content_feed": {
        "prefix": "the_content_feed",
        "body": "the_content_feed( ${1:\\$feed_type:string|null} )",
        "description": "Display the post content for feeds."
    },
    "Function: the_content_rss": {
        "prefix": "the_content_rss",
        "body": "the_content_rss( ${1:\\$more_link_text:string}, ${2:\\$stripteaser:integer}, ${3:\\$more_file:string}, ${4:\\$cut:integer}, ${5:\\$encode_html:integer} )",
        "description": "Display the post content for the feed."
    },
    "Function: the_custom_header_markup": {
        "prefix": "the_custom_header_markup",
        "body": "the_custom_header_markup(  )",
        "description": "Print the markup for a custom header."
    },
    "Function: the_custom_logo": {
        "prefix": "the_custom_logo",
        "body": "the_custom_logo( ${1:\\$blog_id:integer} )",
        "description": "Displays a custom logo, linked to home."
    },
    "Function: the_date": {
        "prefix": "the_date",
        "body": "the_date( ${1:\\$d:string}, ${2:\\$before:string}, ${3:\\$after:string}, ${4:\\$echo:boolean} )",
        "description": "Display or Retrieve the date the current post was written (once per date)"
    },
    "Function: the_date_xml": {
        "prefix": "the_date_xml",
        "body": "the_date_xml(  )",
        "description": "Outputs the date in iso8601 format for xml files."
    },
    "Function: the_editor": {
        "prefix": "the_editor",
        "body": "the_editor( ${1:\\$content:string}, ${2:\\$id:string}, ${3:\\$prev_id:string}, ${4:\\$media_buttons:boolean}, ${5:\\$tab_index:integer}, ${6:\\$extended:boolean} )",
        "description": "Displays an editor: TinyMCE, HTML, or both."
    },
    "Function: the_embed_site_title": {
        "prefix": "the_embed_site_title",
        "body": "the_embed_site_title(  )",
        "description": "Prints the necessary markup for the site title in an embed template."
    },
    "Function: the_excerpt": {
        "prefix": "the_excerpt",
        "body": "the_excerpt(  )",
        "description": "Display the post excerpt."
    },
    "Function: the_excerpt_embed": {
        "prefix": "the_excerpt_embed",
        "body": "the_excerpt_embed(  )",
        "description": "Displays the post excerpt for the embed template."
    },
    "Function: the_excerpt_rss": {
        "prefix": "the_excerpt_rss",
        "body": "the_excerpt_rss(  )",
        "description": "Display the post excerpt for the feed."
    },
    "Function: the_feed_link": {
        "prefix": "the_feed_link",
        "body": "the_feed_link( ${1:\\$anchor:string}, ${2:\\$feed:string} )",
        "description": "Displays the permalink for the feed type."
    },
    "Function: the_generator": {
        "prefix": "the_generator",
        "body": "the_generator( ${1:\\$type:string} )",
        "description": "Display the generator XML or Comment for RSS, ATOM, etc."
    },
    "Function: the_guid": {
        "prefix": "the_guid",
        "body": "the_guid( ${1:\\$post:integer|WP_Post} )",
        "description": "Display the Post Global Unique Identifier (guid)."
    },
    "Function: the_header_image_tag": {
        "prefix": "the_header_image_tag",
        "body": "the_header_image_tag( ${1:\\$attr:array} )",
        "description": "Display the image markup for a custom header image."
    },
    "Function: the_header_video_url": {
        "prefix": "the_header_video_url",
        "body": "the_header_video_url(  )",
        "description": "Display header video URL."
    },
    "Function: the_ID": {
        "prefix": "the_ID",
        "body": "the_ID(  )",
        "description": "Display the ID of the current item in the WordPress Loop."
    },
    "Function: the_media_upload_tabs": {
        "prefix": "the_media_upload_tabs",
        "body": "the_media_upload_tabs(  )",
        "description": "Outputs the legacy media upload tabs UI."
    },
    "Function: the_modified_author": {
        "prefix": "the_modified_author",
        "body": "the_modified_author(  )",
        "description": "Display the name of the author who last edited the current post, if the author&#039;s ID is available."
    },
    "Function: the_modified_date": {
        "prefix": "the_modified_date",
        "body": "the_modified_date( ${1:\\$d:string}, ${2:\\$before:string}, ${3:\\$after:string}, ${4:\\$echo:boolean} )",
        "description": "Display the date on which the post was last modified."
    },
    "Function: the_modified_time": {
        "prefix": "the_modified_time",
        "body": "the_modified_time( ${1:\\$d:string} )",
        "description": "Display the time at which the post was last modified."
    },
    "Function: the_permalink": {
        "prefix": "the_permalink",
        "body": "the_permalink( ${1:\\$post:integer|WP_Post} )",
        "description": "Displays the permalink for the current post."
    },
    "Function: the_permalink_rss": {
        "prefix": "the_permalink_rss",
        "body": "the_permalink_rss(  )",
        "description": "Display the permalink to the post for use in feeds."
    },
    "Function: the_post": {
        "prefix": "the_post",
        "body": "the_post(  )",
        "description": "Iterate the post index in the loop."
    },
    "Function: the_post_navigation": {
        "prefix": "the_post_navigation",
        "body": "the_post_navigation( ${1:\\$args:array} )",
        "description": "Displays the navigation to next/previous post, when applicable."
    },
    "Function: the_post_password": {
        "prefix": "the_post_password",
        "body": "the_post_password(  )",
        "description": "Displays the post password."
    },
    "Function: the_post_thumbnail": {
        "prefix": "the_post_thumbnail",
        "body": "the_post_thumbnail( ${1:\\$size:string|array}, ${2:\\$attr:string|array} )",
        "description": "Display the post thumbnail."
    },
    "Function: the_post_thumbnail_caption": {
        "prefix": "the_post_thumbnail_caption",
        "body": "the_post_thumbnail_caption( ${1:\\$post:integer|WP_Post|null} )",
        "description": "Displays the post thumbnail caption."
    },
    "Function: the_post_thumbnail_url": {
        "prefix": "the_post_thumbnail_url",
        "body": "the_post_thumbnail_url( ${1:\\$size:string|array} )",
        "description": "Display the post thumbnail URL."
    },
    "Function: the_posts_navigation": {
        "prefix": "the_posts_navigation",
        "body": "the_posts_navigation( ${1:\\$args:array} )",
        "description": "Displays the navigation to next/previous set of posts, when applicable."
    },
    "Function: the_posts_pagination": {
        "prefix": "the_posts_pagination",
        "body": "the_posts_pagination( ${1:\\$args:array} )",
        "description": "Displays a paginated navigation to next/previous set of posts, when applicable."
    },
    "Function: the_privacy_policy_link": {
        "prefix": "the_privacy_policy_link",
        "body": "the_privacy_policy_link( ${1:\\$before:string}, ${2:\\$after:string} )",
        "description": "Displays the privacy policy link with formatting, when applicable."
    },
    "Function: the_search_query": {
        "prefix": "the_search_query",
        "body": "the_search_query(  )",
        "description": "Displays the contents of the search query variable."
    },
    "Function: the_shortlink": {
        "prefix": "the_shortlink",
        "body": "the_shortlink( ${1:\\$text:string}, ${2:\\$title:string}, ${3:\\$before:string}, ${4:\\$after:string} )",
        "description": "Displays the shortlink for a post."
    },
    "Function: the_tags": {
        "prefix": "the_tags",
        "body": "the_tags( ${1:\\$before:string|null}, ${2:\\$sep:string}, ${3:\\$after:string} )",
        "description": "Retrieve the tags for a post."
    },
    "Function: the_taxonomies": {
        "prefix": "the_taxonomies",
        "body": "the_taxonomies( ${1:\\$args:array} )",
        "description": "Display the taxonomies of a post with available options."
    },
    "Function: the_terms": {
        "prefix": "the_terms",
        "body": "the_terms( ${1:\\$id:integer}, ${2:\\$taxonomy:string}, ${3:\\$before:string}, ${4:\\$sep:string}, ${5:\\$after:string} )",
        "description": "Display the terms in a list."
    },
    "Function: the_time": {
        "prefix": "the_time",
        "body": "the_time( ${1:\\$d:string} )",
        "description": "Display the time at which the post was written."
    },
    "Function: the_title": {
        "prefix": "the_title",
        "body": "the_title( ${1:\\$before:string}, ${2:\\$after:string}, ${3:\\$echo:boolean} )",
        "description": "Display or retrieve the current post title with optional markup."
    },
    "Function: the_title_attribute": {
        "prefix": "the_title_attribute",
        "body": "the_title_attribute( ${1:\\$args:string|array} )",
        "description": "Sanitize the current title when retrieving or displaying."
    },
    "Function: the_title_rss": {
        "prefix": "the_title_rss",
        "body": "the_title_rss(  )",
        "description": "Display the post title in the feed."
    },
    "Function: the_weekday": {
        "prefix": "the_weekday",
        "body": "the_weekday(  )",
        "description": "Display the weekday on which the post was written."
    },
    "Function: the_weekday_date": {
        "prefix": "the_weekday_date",
        "body": "the_weekday_date( ${1:\\$before:string}, ${2:\\$after:string} )",
        "description": "Display the weekday on which the post was written."
    },
    "Function: the_widget": {
        "prefix": "the_widget",
        "body": "the_widget( ${1:\\$widget:string}, ${2:\\$instance:array}, ${3:\\$args:array} )",
        "description": "Output an arbitrary widget as a template tag."
    },
    "Function: theme_update_available": {
        "prefix": "theme_update_available",
        "body": "theme_update_available( ${1:\\$theme:WP_Theme} )",
        "description": "Check if there is an update for a theme available."
    },
    "Function: themes_api": {
        "prefix": "themes_api",
        "body": "themes_api( ${1:\\$action:string}, ${2:\\$args:array|object} )",
        "description": "Retrieves theme installer pages from the WordPress.org Themes API."
    },
    "Function: timer_start": {
        "prefix": "timer_start",
        "body": "timer_start(  )",
        "description": "Start the WordPress micro-timer."
    },
    "Function: timer_stop": {
        "prefix": "timer_stop",
        "body": "timer_stop( ${1:\\$display:integer|boolean}, ${2:\\$precision:integer} )",
        "description": "Retrieve or display the time from the page start to when function is called."
    },
    "Function: tinymce_include": {
        "prefix": "tinymce_include",
        "body": "tinymce_include(  )",
        "description": ""
    },
    "Function: touch_time": {
        "prefix": "touch_time",
        "body": "touch_time( ${1:\\$edit:integer|boolean}, ${2:\\$for_post:integer|boolean}, ${3:\\$tab_index:integer}, ${4:\\$multi:integer|boolean} )",
        "description": "Print out HTML form date elements for editing post or comment publish date."
    },
    "Function: trackback": {
        "prefix": "trackback",
        "body": "trackback( ${1:\\$trackback_url:string}, ${2:\\$title:string}, ${3:\\$excerpt:string}, ${4:\\$ID:integer} )",
        "description": "Send a Trackback."
    },
    "Function: trackback_rdf": {
        "prefix": "trackback_rdf",
        "body": "trackback_rdf( ${1:\\$deprecated:integer} )",
        "description": "Generate and display the RDF for the trackback information of current post."
    },
    "Function: trackback_response": {
        "prefix": "trackback_response",
        "body": "trackback_response( ${1:\\$error:mixed}, ${2:\\$error_message:string} )",
        "description": "Response to a trackback."
    },
    "Function: trackback_url": {
        "prefix": "trackback_url",
        "body": "trackback_url( ${1:\\$deprecated_echo:boolean} )",
        "description": "Display the current post&#039;s trackback URL."
    },
    "Function: trackback_url_list": {
        "prefix": "trackback_url_list",
        "body": "trackback_url_list( ${1:\\$tb_list:string}, ${2:\\$post_id:integer} )",
        "description": "Do trackbacks for a list of URLs."
    },
    "Function: trailingslashit": {
        "prefix": "trailingslashit",
        "body": "trailingslashit( ${1:\\$string:string} )",
        "description": "Appends a trailing slash."
    },
    "Function: translate": {
        "prefix": "translate",
        "body": "translate( ${1:\\$text:string}, ${2:\\$domain:string} )",
        "description": "Retrieve the translation of $text."
    },
    "Function: translate_level_to_role": {
        "prefix": "translate_level_to_role",
        "body": "translate_level_to_role( ${1:\\$level:integer} )",
        "description": "Translate user level to user role name."
    },
    "Function: translate_nooped_plural": {
        "prefix": "translate_nooped_plural",
        "body": "translate_nooped_plural( ${1:\\$nooped_plural:array}, ${2:\\$count:integer}, ${3:\\$domain:string} )",
        "description": "Translates and retrieves the singular or plural form of a string that&#039;s been registered with _n_noop() or _nx_noop()."
    },
    "Function: translate_smiley": {
        "prefix": "translate_smiley",
        "body": "translate_smiley( ${1:\\$matches:array} )",
        "description": "Convert one smiley code to the icon graphic file equivalent."
    },
    "Function: translate_user_role": {
        "prefix": "translate_user_role",
        "body": "translate_user_role( ${1:\\$name:string} )",
        "description": "Translates role name."
    },
    "Function: translate_with_context": {
        "prefix": "translate_with_context",
        "body": "translate_with_context( ${1:\\$text:string}, ${2:\\$domain:string} )",
        "description": "Translates $text like translate(), but assumes that the text contains a context after its last vertical bar."
    },
    "Function: translate_with_gettext_context": {
        "prefix": "translate_with_gettext_context",
        "body": "translate_with_gettext_context( ${1:\\$text:string}, ${2:\\$context:string}, ${3:\\$domain:string} )",
        "description": "Retrieve the translation of $text in the context defined in $context."
    },
    "Function: translations_api": {
        "prefix": "translations_api",
        "body": "translations_api( ${1:\\$type:string}, ${2:\\$args:array|object|null} )",
        "description": "Retrieve translations from WordPress Translation API."
    },
    "Function: twentyfifteen_categorized_blog": {
        "prefix": "twentyfifteen_categorized_blog",
        "body": "twentyfifteen_categorized_blog(  )",
        "description": "Determine whether blog/site has more than one category."
    },
    "Function: twentyfifteen_category_transient_flusher": {
        "prefix": "twentyfifteen_category_transient_flusher",
        "body": "twentyfifteen_category_transient_flusher(  )",
        "description": "Flush out the transients used in {@see twentyfifteen_categorized_blog()}."
    },
    "Function: twentyfifteen_color_scheme_css": {
        "prefix": "twentyfifteen_color_scheme_css",
        "body": "twentyfifteen_color_scheme_css(  )",
        "description": "Enqueues front-end CSS for color scheme."
    },
    "Function: twentyfifteen_color_scheme_css_template": {
        "prefix": "twentyfifteen_color_scheme_css_template",
        "body": "twentyfifteen_color_scheme_css_template(  )",
        "description": "Output an Underscore template for generating CSS for the color scheme."
    },
    "Function: twentyfifteen_comment_nav": {
        "prefix": "twentyfifteen_comment_nav",
        "body": "twentyfifteen_comment_nav(  )",
        "description": "Display navigation to next/previous comments when applicable."
    },
    "Function: twentyfifteen_custom_header_setup": {
        "prefix": "twentyfifteen_custom_header_setup",
        "body": "twentyfifteen_custom_header_setup(  )",
        "description": "Set up the WordPress core custom header feature."
    },
    "Function: twentyfifteen_customize": {
        "prefix": "twentyfifteen_customize",
        "body": "twentyfifteen_customize(  )",
        "description": "Prevent the Customizer from being loaded on WordPress versions prior to 4.1."
    },
    "Function: twentyfifteen_customize_control_js": {
        "prefix": "twentyfifteen_customize_control_js",
        "body": "twentyfifteen_customize_control_js(  )",
        "description": "Binds JS listener to make Customizer color_scheme control."
    },
    "Function: twentyfifteen_customize_partial_blogdescription": {
        "prefix": "twentyfifteen_customize_partial_blogdescription",
        "body": "twentyfifteen_customize_partial_blogdescription(  )",
        "description": "Render the site tagline for the selective refresh partial."
    },
    "Function: twentyfifteen_customize_partial_blogname": {
        "prefix": "twentyfifteen_customize_partial_blogname",
        "body": "twentyfifteen_customize_partial_blogname(  )",
        "description": "Render the site title for the selective refresh partial."
    },
    "Function: twentyfifteen_customize_preview_js": {
        "prefix": "twentyfifteen_customize_preview_js",
        "body": "twentyfifteen_customize_preview_js(  )",
        "description": "Binds JS handlers to make the Customizer preview reload changes asynchronously."
    },
    "Function: twentyfifteen_customize_register": {
        "prefix": "twentyfifteen_customize_register",
        "body": "twentyfifteen_customize_register( ${1:\\$wp_customize:WP_Customize_Manager} )",
        "description": "Add postMessage support for site title and description for the Customizer."
    },
    "Function: twentyfifteen_entry_meta": {
        "prefix": "twentyfifteen_entry_meta",
        "body": "twentyfifteen_entry_meta(  )",
        "description": "Prints HTML with meta information for the categories, tags."
    },
    "Function: twentyfifteen_excerpt_more": {
        "prefix": "twentyfifteen_excerpt_more",
        "body": "twentyfifteen_excerpt_more( ${1:\\$more:} )",
        "description": "Replaces &quot;[."
    },
    "Function: twentyfifteen_fonts_url": {
        "prefix": "twentyfifteen_fonts_url",
        "body": "twentyfifteen_fonts_url(  )",
        "description": "Register Google fonts for Twenty Fifteen."
    },
    "Function: twentyfifteen_get_color_scheme": {
        "prefix": "twentyfifteen_get_color_scheme",
        "body": "twentyfifteen_get_color_scheme(  )",
        "description": "Get the current Twenty Fifteen color scheme."
    },
    "Function: twentyfifteen_get_color_scheme_choices": {
        "prefix": "twentyfifteen_get_color_scheme_choices",
        "body": "twentyfifteen_get_color_scheme_choices(  )",
        "description": "Returns an array of color scheme choices registered for Twenty Fifteen."
    },
    "Function: twentyfifteen_get_color_scheme_css": {
        "prefix": "twentyfifteen_get_color_scheme_css",
        "body": "twentyfifteen_get_color_scheme_css( ${1:\\$colors:array} )",
        "description": "Returns CSS for the color schemes."
    },
    "Function: twentyfifteen_get_color_schemes": {
        "prefix": "twentyfifteen_get_color_schemes",
        "body": "twentyfifteen_get_color_schemes(  )",
        "description": "Register color schemes for Twenty Fifteen."
    },
    "Function: twentyfifteen_get_link_url": {
        "prefix": "twentyfifteen_get_link_url",
        "body": "twentyfifteen_get_link_url(  )",
        "description": "Return the post URL."
    },
    "Function: twentyfifteen_header_background_color_css": {
        "prefix": "twentyfifteen_header_background_color_css",
        "body": "twentyfifteen_header_background_color_css(  )",
        "description": "Enqueues front-end CSS for the header background color."
    },
    "Function: twentyfifteen_header_style": {
        "prefix": "twentyfifteen_header_style",
        "body": "twentyfifteen_header_style(  )",
        "description": "Styles the header image and text displayed on the blog."
    },
    "Function: twentyfifteen_hex2rgb": {
        "prefix": "twentyfifteen_hex2rgb",
        "body": "twentyfifteen_hex2rgb( ${1:\\$color:string} )",
        "description": "Convert HEX to RGB."
    },
    "Function: twentyfifteen_javascript_detection": {
        "prefix": "twentyfifteen_javascript_detection",
        "body": "twentyfifteen_javascript_detection(  )",
        "description": "JavaScript Detection."
    },
    "Function: twentyfifteen_nav_description": {
        "prefix": "twentyfifteen_nav_description",
        "body": "twentyfifteen_nav_description( ${1:\\$item_output:string}, ${2:\\$item:WP_Post}, ${3:\\$depth:integer}, ${4:\\$args:array} )",
        "description": "Display descriptions in main navigation."
    },
    "Function: twentyfifteen_post_nav_background": {
        "prefix": "twentyfifteen_post_nav_background",
        "body": "twentyfifteen_post_nav_background(  )",
        "description": "Add featured image as background image to post navigation elements."
    },
    "Function: twentyfifteen_post_thumbnail": {
        "prefix": "twentyfifteen_post_thumbnail",
        "body": "twentyfifteen_post_thumbnail(  )",
        "description": "Display an optional post thumbnail."
    },
    "Function: twentyfifteen_preview": {
        "prefix": "twentyfifteen_preview",
        "body": "twentyfifteen_preview(  )",
        "description": "Prevent the Theme Preview from being loaded on WordPress versions prior to 4.1."
    },
    "Function: twentyfifteen_resource_hints": {
        "prefix": "twentyfifteen_resource_hints",
        "body": "twentyfifteen_resource_hints( ${1:\\$urls:array}, ${2:\\$relation_type:string} )",
        "description": "Add preconnect for Google Fonts."
    },
    "Function: twentyfifteen_sanitize_color_scheme": {
        "prefix": "twentyfifteen_sanitize_color_scheme",
        "body": "twentyfifteen_sanitize_color_scheme( ${1:\\$value:string} )",
        "description": "Sanitization callback for color schemes."
    },
    "Function: twentyfifteen_scripts": {
        "prefix": "twentyfifteen_scripts",
        "body": "twentyfifteen_scripts(  )",
        "description": "Enqueue scripts and styles."
    },
    "Function: twentyfifteen_search_form_modify": {
        "prefix": "twentyfifteen_search_form_modify",
        "body": "twentyfifteen_search_form_modify( ${1:\\$html:string} )",
        "description": "Add a `screen-reader-text` class to the search form&#039;s submit button."
    },
    "Function: twentyfifteen_setup": {
        "prefix": "twentyfifteen_setup",
        "body": "twentyfifteen_setup(  )",
        "description": "Sets up theme defaults and registers support for various WordPress features."
    },
    "Function: twentyfifteen_sidebar_text_color_css": {
        "prefix": "twentyfifteen_sidebar_text_color_css",
        "body": "twentyfifteen_sidebar_text_color_css(  )",
        "description": "Enqueues front-end CSS for the sidebar text color."
    },
    "Function: twentyfifteen_switch_theme": {
        "prefix": "twentyfifteen_switch_theme",
        "body": "twentyfifteen_switch_theme(  )",
        "description": "Prevent switching to Twenty Fifteen on old versions of WordPress."
    },
    "Function: twentyfifteen_the_custom_logo": {
        "prefix": "twentyfifteen_the_custom_logo",
        "body": "twentyfifteen_the_custom_logo(  )",
        "description": "Displays the optional custom logo."
    },
    "Function: twentyfifteen_upgrade_notice": {
        "prefix": "twentyfifteen_upgrade_notice",
        "body": "twentyfifteen_upgrade_notice(  )",
        "description": "Add message for unsuccessful theme switch."
    },
    "Function: twentyfifteen_widget_tag_cloud_args": {
        "prefix": "twentyfifteen_widget_tag_cloud_args",
        "body": "twentyfifteen_widget_tag_cloud_args( ${1:\\$args:array} )",
        "description": "Modifies tag cloud widget arguments to display all tags in the same font size and use list format for better accessibility."
    },
    "Function: twentyfifteen_widgets_init": {
        "prefix": "twentyfifteen_widgets_init",
        "body": "twentyfifteen_widgets_init(  )",
        "description": "Register widget area."
    },
    "Function: twentyseventeen_body_classes": {
        "prefix": "twentyseventeen_body_classes",
        "body": "twentyseventeen_body_classes( ${1:\\$classes:array} )",
        "description": "Adds custom classes to the array of body classes."
    },
    "Function: twentyseventeen_categorized_blog": {
        "prefix": "twentyseventeen_categorized_blog",
        "body": "twentyseventeen_categorized_blog(  )",
        "description": "Returns true if a blog has more than 1 category."
    },
    "Function: twentyseventeen_category_transient_flusher": {
        "prefix": "twentyseventeen_category_transient_flusher",
        "body": "twentyseventeen_category_transient_flusher(  )",
        "description": "Flush out the transients used in twentyseventeen_categorized_blog."
    },
    "Function: twentyseventeen_colors_css_wrap": {
        "prefix": "twentyseventeen_colors_css_wrap",
        "body": "twentyseventeen_colors_css_wrap(  )",
        "description": "Display custom color CSS."
    },
    "Function: twentyseventeen_content_image_sizes_attr": {
        "prefix": "twentyseventeen_content_image_sizes_attr",
        "body": "twentyseventeen_content_image_sizes_attr( ${1:\\$sizes:string}, ${2:\\$size:array} )",
        "description": "Add custom image sizes attribute to enhance responsive image functionality for content images."
    },
    "Function: twentyseventeen_content_width": {
        "prefix": "twentyseventeen_content_width",
        "body": "twentyseventeen_content_width(  )",
        "description": "Set the content width in pixels, based on the theme&#039;s design and stylesheet."
    },
    "Function: twentyseventeen_custom_colors_css": {
        "prefix": "twentyseventeen_custom_colors_css",
        "body": "twentyseventeen_custom_colors_css(  )",
        "description": "Generate the CSS for the current custom color scheme."
    },
    "Function: twentyseventeen_custom_header_setup": {
        "prefix": "twentyseventeen_custom_header_setup",
        "body": "twentyseventeen_custom_header_setup(  )",
        "description": "Set up the WordPress core custom header feature."
    },
    "Function: twentyseventeen_customize": {
        "prefix": "twentyseventeen_customize",
        "body": "twentyseventeen_customize(  )",
        "description": "Prevents the Customizer from being loaded on WordPress versions prior to 4.7."
    },
    "Function: twentyseventeen_customize_partial_blogdescription": {
        "prefix": "twentyseventeen_customize_partial_blogdescription",
        "body": "twentyseventeen_customize_partial_blogdescription(  )",
        "description": "Render the site tagline for the selective refresh partial."
    },
    "Function: twentyseventeen_customize_partial_blogname": {
        "prefix": "twentyseventeen_customize_partial_blogname",
        "body": "twentyseventeen_customize_partial_blogname(  )",
        "description": "Render the site title for the selective refresh partial."
    },
    "Function: twentyseventeen_customize_preview_js": {
        "prefix": "twentyseventeen_customize_preview_js",
        "body": "twentyseventeen_customize_preview_js(  )",
        "description": "Bind JS handlers to instantly live-preview changes."
    },
    "Function: twentyseventeen_customize_register": {
        "prefix": "twentyseventeen_customize_register",
        "body": "twentyseventeen_customize_register( ${1:\\$wp_customize:WP_Customize_Manager} )",
        "description": "Add postMessage support for site title and description for the Theme Customizer."
    },
    "Function: twentyseventeen_dropdown_icon_to_menu_link": {
        "prefix": "twentyseventeen_dropdown_icon_to_menu_link",
        "body": "twentyseventeen_dropdown_icon_to_menu_link( ${1:\\$title:string}, ${2:\\$item:WP_Post}, ${3:\\$args:array}, ${4:\\$depth:integer} )",
        "description": "Add dropdown icon if menu item has children."
    },
    "Function: twentyseventeen_edit_link": {
        "prefix": "twentyseventeen_edit_link",
        "body": "twentyseventeen_edit_link(  )",
        "description": "Returns an accessibility-friendly link to edit a post or page."
    },
    "Function: twentyseventeen_entry_footer": {
        "prefix": "twentyseventeen_entry_footer",
        "body": "twentyseventeen_entry_footer(  )",
        "description": "Prints HTML with meta information for the categories, tags and comments."
    },
    "Function: twentyseventeen_excerpt_more": {
        "prefix": "twentyseventeen_excerpt_more",
        "body": "twentyseventeen_excerpt_more( ${1:\\$link:string} )",
        "description": "Replaces &quot;[."
    },
    "Function: twentyseventeen_fonts_url": {
        "prefix": "twentyseventeen_fonts_url",
        "body": "twentyseventeen_fonts_url(  )",
        "description": "Register custom fonts."
    },
    "Function: twentyseventeen_front_page_section": {
        "prefix": "twentyseventeen_front_page_section",
        "body": "twentyseventeen_front_page_section( ${1:\\$partial:WP_Customize_Partial|null}, ${2:\\$id:integer} )",
        "description": "Display a front page section."
    },
    "Function: twentyseventeen_front_page_template": {
        "prefix": "twentyseventeen_front_page_template",
        "body": "twentyseventeen_front_page_template( ${1:\\$template:string} )",
        "description": "Use front-page.php when Front page displays is set to a static page."
    },
    "Function: twentyseventeen_get_svg": {
        "prefix": "twentyseventeen_get_svg",
        "body": "twentyseventeen_get_svg( ${1:\\$args:array} )",
        "description": "Return SVG markup."
    },
    "Function: twentyseventeen_header_image_tag": {
        "prefix": "twentyseventeen_header_image_tag",
        "body": "twentyseventeen_header_image_tag( ${1:\\$html:string}, ${2:\\$header:object}, ${3:\\$attr:array} )",
        "description": "Filter the `sizes` value in the header image markup."
    },
    "Function: twentyseventeen_header_style": {
        "prefix": "twentyseventeen_header_style",
        "body": "twentyseventeen_header_style(  )",
        "description": "Styles the header image and text displayed on the blog."
    },
    "Function: twentyseventeen_include_svg_icons": {
        "prefix": "twentyseventeen_include_svg_icons",
        "body": "twentyseventeen_include_svg_icons(  )",
        "description": "Add SVG definitions to the footer."
    },
    "Function: twentyseventeen_is_frontpage": {
        "prefix": "twentyseventeen_is_frontpage",
        "body": "twentyseventeen_is_frontpage(  )",
        "description": "Checks to see if we&#039;re on the homepage or not."
    },
    "Function: twentyseventeen_is_static_front_page": {
        "prefix": "twentyseventeen_is_static_front_page",
        "body": "twentyseventeen_is_static_front_page(  )",
        "description": "Return whether we&#039;re previewing the front page and it&#039;s a static page."
    },
    "Function: twentyseventeen_is_view_with_layout_option": {
        "prefix": "twentyseventeen_is_view_with_layout_option",
        "body": "twentyseventeen_is_view_with_layout_option(  )",
        "description": "Return whether we&#039;re on a view that supports a one or two column layout."
    },
    "Function: twentyseventeen_javascript_detection": {
        "prefix": "twentyseventeen_javascript_detection",
        "body": "twentyseventeen_javascript_detection(  )",
        "description": "Handles JavaScript detection."
    },
    "Function: twentyseventeen_nav_menu_social_icons": {
        "prefix": "twentyseventeen_nav_menu_social_icons",
        "body": "twentyseventeen_nav_menu_social_icons( ${1:\\$item_output:string}, ${2:\\$item:WP_Post}, ${3:\\$depth:integer}, ${4:\\$args:array} )",
        "description": "Display SVG icons in social links menu."
    },
    "Function: twentyseventeen_panel_count": {
        "prefix": "twentyseventeen_panel_count",
        "body": "twentyseventeen_panel_count(  )",
        "description": "Count our number of active panels."
    },
    "Function: twentyseventeen_panels_js": {
        "prefix": "twentyseventeen_panels_js",
        "body": "twentyseventeen_panels_js(  )",
        "description": "Load dynamic logic for the customizer controls area."
    },
    "Function: twentyseventeen_pingback_header": {
        "prefix": "twentyseventeen_pingback_header",
        "body": "twentyseventeen_pingback_header(  )",
        "description": "Add a pingback url auto-discovery header for singularly identifiable articles."
    },
    "Function: twentyseventeen_post_thumbnail_sizes_attr": {
        "prefix": "twentyseventeen_post_thumbnail_sizes_attr",
        "body": "twentyseventeen_post_thumbnail_sizes_attr( ${1:\\$attr:array}, ${2:\\$attachment:integer}, ${3:\\$size:array} )",
        "description": "Add custom image sizes attribute to enhance responsive image functionality for post thumbnails."
    },
    "Function: twentyseventeen_posted_on": {
        "prefix": "twentyseventeen_posted_on",
        "body": "twentyseventeen_posted_on(  )",
        "description": "Prints HTML with meta information for the current post-date/time and author."
    },
    "Function: twentyseventeen_preview": {
        "prefix": "twentyseventeen_preview",
        "body": "twentyseventeen_preview(  )",
        "description": "Prevents the Theme Preview from being loaded on WordPress versions prior to 4.7."
    },
    "Function: twentyseventeen_resource_hints": {
        "prefix": "twentyseventeen_resource_hints",
        "body": "twentyseventeen_resource_hints( ${1:\\$urls:array}, ${2:\\$relation_type:string} )",
        "description": "Add preconnect for Google Fonts."
    },
    "Function: twentyseventeen_sanitize_colorscheme": {
        "prefix": "twentyseventeen_sanitize_colorscheme",
        "body": "twentyseventeen_sanitize_colorscheme( ${1:\\$input:string} )",
        "description": "Sanitize the colorscheme."
    },
    "Function: twentyseventeen_sanitize_page_layout": {
        "prefix": "twentyseventeen_sanitize_page_layout",
        "body": "twentyseventeen_sanitize_page_layout( ${1:\\$input:string} )",
        "description": "Sanitize the page layout options."
    },
    "Function: twentyseventeen_scripts": {
        "prefix": "twentyseventeen_scripts",
        "body": "twentyseventeen_scripts(  )",
        "description": "Enqueue scripts and styles."
    },
    "Function: twentyseventeen_setup": {
        "prefix": "twentyseventeen_setup",
        "body": "twentyseventeen_setup(  )",
        "description": "Sets up theme defaults and registers support for various WordPress features."
    },
    "Function: twentyseventeen_social_links_icons": {
        "prefix": "twentyseventeen_social_links_icons",
        "body": "twentyseventeen_social_links_icons(  )",
        "description": "Returns an array of supported social links (URL and icon name)."
    },
    "Function: twentyseventeen_switch_theme": {
        "prefix": "twentyseventeen_switch_theme",
        "body": "twentyseventeen_switch_theme(  )",
        "description": "Prevent switching to Twenty Seventeen on old versions of WordPress."
    },
    "Function: twentyseventeen_time_link": {
        "prefix": "twentyseventeen_time_link",
        "body": "twentyseventeen_time_link(  )",
        "description": "Gets a nicely formatted string for the published date."
    },
    "Function: twentyseventeen_upgrade_notice": {
        "prefix": "twentyseventeen_upgrade_notice",
        "body": "twentyseventeen_upgrade_notice(  )",
        "description": "Adds a message for unsuccessful theme switch."
    },
    "Function: twentyseventeen_video_controls": {
        "prefix": "twentyseventeen_video_controls",
        "body": "twentyseventeen_video_controls( ${1:\\$settings:array} )",
        "description": "Customize video play/pause button in the custom header."
    },
    "Function: twentyseventeen_widget_tag_cloud_args": {
        "prefix": "twentyseventeen_widget_tag_cloud_args",
        "body": "twentyseventeen_widget_tag_cloud_args( ${1:\\$args:array} )",
        "description": "Modifies tag cloud widget arguments to display all tags in the same font size and use list format for better accessibility."
    },
    "Function: twentyseventeen_widgets_init": {
        "prefix": "twentyseventeen_widgets_init",
        "body": "twentyseventeen_widgets_init(  )",
        "description": "Register widget area."
    },
    "Function: twentysixteen_body_classes": {
        "prefix": "twentysixteen_body_classes",
        "body": "twentysixteen_body_classes( ${1:\\$classes:array} )",
        "description": "Adds custom classes to the array of body classes."
    },
    "Function: twentysixteen_categorized_blog": {
        "prefix": "twentysixteen_categorized_blog",
        "body": "twentysixteen_categorized_blog(  )",
        "description": "Determines whether blog/site has more than one category."
    },
    "Function: twentysixteen_category_transient_flusher": {
        "prefix": "twentysixteen_category_transient_flusher",
        "body": "twentysixteen_category_transient_flusher(  )",
        "description": "Flushes out the transients used in twentysixteen_categorized_blog()."
    },
    "Function: twentysixteen_color_scheme_css": {
        "prefix": "twentysixteen_color_scheme_css",
        "body": "twentysixteen_color_scheme_css(  )",
        "description": "Enqueues front-end CSS for color scheme."
    },
    "Function: twentysixteen_color_scheme_css_template": {
        "prefix": "twentysixteen_color_scheme_css_template",
        "body": "twentysixteen_color_scheme_css_template(  )",
        "description": "Outputs an Underscore template for generating CSS for the color scheme."
    },
    "Function: twentysixteen_content_image_sizes_attr": {
        "prefix": "twentysixteen_content_image_sizes_attr",
        "body": "twentysixteen_content_image_sizes_attr( ${1:\\$sizes:string}, ${2:\\$size:array} )",
        "description": "Add custom image sizes attribute to enhance responsive image functionality for content images"
    },
    "Function: twentysixteen_content_width": {
        "prefix": "twentysixteen_content_width",
        "body": "twentysixteen_content_width(  )",
        "description": "Sets the content width in pixels, based on the theme&#039;s design and stylesheet."
    },
    "Function: twentysixteen_custom_header_and_background": {
        "prefix": "twentysixteen_custom_header_and_background",
        "body": "twentysixteen_custom_header_and_background(  )",
        "description": "Sets up the WordPress core custom header and custom background features."
    },
    "Function: twentysixteen_customize": {
        "prefix": "twentysixteen_customize",
        "body": "twentysixteen_customize(  )",
        "description": "Prevents the Customizer from being loaded on WordPress versions prior to 4.4."
    },
    "Function: twentysixteen_customize_control_js": {
        "prefix": "twentysixteen_customize_control_js",
        "body": "twentysixteen_customize_control_js(  )",
        "description": "Binds the JS listener to make Customizer color_scheme control."
    },
    "Function: twentysixteen_customize_partial_blogdescription": {
        "prefix": "twentysixteen_customize_partial_blogdescription",
        "body": "twentysixteen_customize_partial_blogdescription(  )",
        "description": "Render the site tagline for the selective refresh partial."
    },
    "Function: twentysixteen_customize_partial_blogname": {
        "prefix": "twentysixteen_customize_partial_blogname",
        "body": "twentysixteen_customize_partial_blogname(  )",
        "description": "Render the site title for the selective refresh partial."
    },
    "Function: twentysixteen_customize_preview_js": {
        "prefix": "twentysixteen_customize_preview_js",
        "body": "twentysixteen_customize_preview_js(  )",
        "description": "Binds JS handlers to make the Customizer preview reload changes asynchronously."
    },
    "Function: twentysixteen_customize_register": {
        "prefix": "twentysixteen_customize_register",
        "body": "twentysixteen_customize_register( ${1:\\$wp_customize:WP_Customize_Manager} )",
        "description": "Adds postMessage support for site title and description for the Customizer."
    },
    "Function: twentysixteen_entry_date": {
        "prefix": "twentysixteen_entry_date",
        "body": "twentysixteen_entry_date(  )",
        "description": "Prints HTML with date information for current post."
    },
    "Function: twentysixteen_entry_meta": {
        "prefix": "twentysixteen_entry_meta",
        "body": "twentysixteen_entry_meta(  )",
        "description": "Prints HTML with meta information for the categories, tags."
    },
    "Function: twentysixteen_entry_taxonomies": {
        "prefix": "twentysixteen_entry_taxonomies",
        "body": "twentysixteen_entry_taxonomies(  )",
        "description": "Prints HTML with category and tags for current post."
    },
    "Function: twentysixteen_excerpt": {
        "prefix": "twentysixteen_excerpt",
        "body": "twentysixteen_excerpt( ${1:\\$class:string} )",
        "description": "Displays the optional excerpt."
    },
    "Function: twentysixteen_excerpt_more": {
        "prefix": "twentysixteen_excerpt_more",
        "body": "twentysixteen_excerpt_more(  )",
        "description": "Replaces &quot;[."
    },
    "Function: twentysixteen_fonts_url": {
        "prefix": "twentysixteen_fonts_url",
        "body": "twentysixteen_fonts_url(  )",
        "description": "Register Google fonts for Twenty Sixteen."
    },
    "Function: twentysixteen_get_color_scheme": {
        "prefix": "twentysixteen_get_color_scheme",
        "body": "twentysixteen_get_color_scheme(  )",
        "description": "Retrieves the current Twenty Sixteen color scheme."
    },
    "Function: twentysixteen_get_color_scheme_choices": {
        "prefix": "twentysixteen_get_color_scheme_choices",
        "body": "twentysixteen_get_color_scheme_choices(  )",
        "description": "Retrieves an array of color scheme choices registered for Twenty Sixteen."
    },
    "Function: twentysixteen_get_color_scheme_css": {
        "prefix": "twentysixteen_get_color_scheme_css",
        "body": "twentysixteen_get_color_scheme_css( ${1:\\$colors:array} )",
        "description": "Returns CSS for the color schemes."
    },
    "Function: twentysixteen_get_color_schemes": {
        "prefix": "twentysixteen_get_color_schemes",
        "body": "twentysixteen_get_color_schemes(  )",
        "description": "Registers color schemes for Twenty Sixteen."
    },
    "Function: twentysixteen_header_style": {
        "prefix": "twentysixteen_header_style",
        "body": "twentysixteen_header_style(  )",
        "description": "Styles the header text displayed on the site."
    },
    "Function: twentysixteen_hex2rgb": {
        "prefix": "twentysixteen_hex2rgb",
        "body": "twentysixteen_hex2rgb( ${1:\\$color:string} )",
        "description": "Converts a HEX value to RGB."
    },
    "Function: twentysixteen_javascript_detection": {
        "prefix": "twentysixteen_javascript_detection",
        "body": "twentysixteen_javascript_detection(  )",
        "description": "Handles JavaScript detection."
    },
    "Function: twentysixteen_link_color_css": {
        "prefix": "twentysixteen_link_color_css",
        "body": "twentysixteen_link_color_css(  )",
        "description": "Enqueues front-end CSS for the link color."
    },
    "Function: twentysixteen_main_text_color_css": {
        "prefix": "twentysixteen_main_text_color_css",
        "body": "twentysixteen_main_text_color_css(  )",
        "description": "Enqueues front-end CSS for the main text color."
    },
    "Function: twentysixteen_page_background_color_css": {
        "prefix": "twentysixteen_page_background_color_css",
        "body": "twentysixteen_page_background_color_css(  )",
        "description": "Enqueues front-end CSS for the page background color."
    },
    "Function: twentysixteen_post_thumbnail": {
        "prefix": "twentysixteen_post_thumbnail",
        "body": "twentysixteen_post_thumbnail(  )",
        "description": "Displays an optional post thumbnail."
    },
    "Function: twentysixteen_post_thumbnail_sizes_attr": {
        "prefix": "twentysixteen_post_thumbnail_sizes_attr",
        "body": "twentysixteen_post_thumbnail_sizes_attr( ${1:\\$attr:array}, ${2:\\$attachment:integer}, ${3:\\$size:array} )",
        "description": "Add custom image sizes attribute to enhance responsive image functionality for post thumbnails"
    },
    "Function: twentysixteen_preview": {
        "prefix": "twentysixteen_preview",
        "body": "twentysixteen_preview(  )",
        "description": "Prevents the Theme Preview from being loaded on WordPress versions prior to 4.4."
    },
    "Function: twentysixteen_sanitize_color_scheme": {
        "prefix": "twentysixteen_sanitize_color_scheme",
        "body": "twentysixteen_sanitize_color_scheme( ${1:\\$value:string} )",
        "description": "Handles sanitization for Twenty Sixteen color schemes."
    },
    "Function: twentysixteen_scripts": {
        "prefix": "twentysixteen_scripts",
        "body": "twentysixteen_scripts(  )",
        "description": "Enqueues scripts and styles."
    },
    "Function: twentysixteen_secondary_text_color_css": {
        "prefix": "twentysixteen_secondary_text_color_css",
        "body": "twentysixteen_secondary_text_color_css(  )",
        "description": "Enqueues front-end CSS for the secondary text color."
    },
    "Function: twentysixteen_setup": {
        "prefix": "twentysixteen_setup",
        "body": "twentysixteen_setup(  )",
        "description": "Sets up theme defaults and registers support for various WordPress features."
    },
    "Function: twentysixteen_switch_theme": {
        "prefix": "twentysixteen_switch_theme",
        "body": "twentysixteen_switch_theme(  )",
        "description": "Prevent switching to Twenty Sixteen on old versions of WordPress."
    },
    "Function: twentysixteen_the_custom_logo": {
        "prefix": "twentysixteen_the_custom_logo",
        "body": "twentysixteen_the_custom_logo(  )",
        "description": "Displays the optional custom logo."
    },
    "Function: twentysixteen_upgrade_notice": {
        "prefix": "twentysixteen_upgrade_notice",
        "body": "twentysixteen_upgrade_notice(  )",
        "description": "Adds a message for unsuccessful theme switch."
    },
    "Function: twentysixteen_widget_tag_cloud_args": {
        "prefix": "twentysixteen_widget_tag_cloud_args",
        "body": "twentysixteen_widget_tag_cloud_args( ${1:\\$args:array} )",
        "description": "Modifies tag cloud widget arguments to display all tags in the same font size and use list format for better accessibility."
    },
    "Function: twentysixteen_widgets_init": {
        "prefix": "twentysixteen_widgets_init",
        "body": "twentysixteen_widgets_init(  )",
        "description": "Registers a widget area."
    },
    "Function: type_url_form_audio": {
        "prefix": "type_url_form_audio",
        "body": "type_url_form_audio(  )",
        "description": "Handles retrieving the insert-from-URL form for an audio file."
    },
    "Function: type_url_form_file": {
        "prefix": "type_url_form_file",
        "body": "type_url_form_file(  )",
        "description": "Handles retrieving the insert-from-URL form for a generic file."
    },
    "Function: type_url_form_image": {
        "prefix": "type_url_form_image",
        "body": "type_url_form_image(  )",
        "description": "Handles retrieving the insert-from-URL form for an image."
    },
    "Function: type_url_form_video": {
        "prefix": "type_url_form_video",
        "body": "type_url_form_video(  )",
        "description": "Handles retrieving the insert-from-URL form for a video file."
    },
    "Function: undismiss_core_update": {
        "prefix": "undismiss_core_update",
        "body": "undismiss_core_update( ${1:\\$version:string}, ${2:\\$locale:string} )",
        "description": ""
    },
    "Function: unescape_invalid_shortcodes": {
        "prefix": "unescape_invalid_shortcodes",
        "body": "unescape_invalid_shortcodes( ${1:\\$content:string} )",
        "description": "Remove placeholders added by do_shortcodes_in_html_tags()."
    },
    "Function: uninstall_plugin": {
        "prefix": "uninstall_plugin",
        "body": "uninstall_plugin( ${1:\\$plugin:string} )",
        "description": "Uninstall a single plugin."
    },
    "Function: unload_textdomain": {
        "prefix": "unload_textdomain",
        "body": "unload_textdomain( ${1:\\$domain:string} )",
        "description": "Unload translations for a text domain."
    },
    "Function: unregister_default_headers": {
        "prefix": "unregister_default_headers",
        "body": "unregister_default_headers( ${1:\\$header:string|array} )",
        "description": "Unregister default headers."
    },
    "Function: unregister_meta_key": {
        "prefix": "unregister_meta_key",
        "body": "unregister_meta_key( ${1:\\$object_type:string}, ${2:\\$meta_key:string} )",
        "description": "Unregisters a meta key from the list of registered keys."
    },
    "Function: unregister_nav_menu": {
        "prefix": "unregister_nav_menu",
        "body": "unregister_nav_menu( ${1:\\$location:string} )",
        "description": "Unregisters a navigation menu location for a theme."
    },
    "Function: unregister_post_type": {
        "prefix": "unregister_post_type",
        "body": "unregister_post_type( ${1:\\$post_type:string} )",
        "description": "Unregisters a post type."
    },
    "Function: unregister_setting": {
        "prefix": "unregister_setting",
        "body": "unregister_setting( ${1:\\$option_group:string}, ${2:\\$option_name:string}, ${3:\\$deprecated:callable} )",
        "description": "Unregister a setting."
    },
    "Function: unregister_sidebar": {
        "prefix": "unregister_sidebar",
        "body": "unregister_sidebar( ${1:\\$sidebar_id:string|integer} )",
        "description": "Removes a sidebar from the list."
    },
    "Function: unregister_sidebar_widget": {
        "prefix": "unregister_sidebar_widget",
        "body": "unregister_sidebar_widget( ${1:\\$id:integer|string} )",
        "description": "Serves as an alias of wp_unregister_sidebar_widget()."
    },
    "Function: unregister_taxonomy": {
        "prefix": "unregister_taxonomy",
        "body": "unregister_taxonomy( ${1:\\$taxonomy:string} )",
        "description": "Unregisters a taxonomy."
    },
    "Function: unregister_taxonomy_for_object_type": {
        "prefix": "unregister_taxonomy_for_object_type",
        "body": "unregister_taxonomy_for_object_type( ${1:\\$taxonomy:string}, ${2:\\$object_type:string} )",
        "description": "Remove an already registered taxonomy from an object type."
    },
    "Function: unregister_widget": {
        "prefix": "unregister_widget",
        "body": "unregister_widget( ${1:\\$widget:string|WP_Widget} )",
        "description": "Unregisters a widget."
    },
    "Function: unregister_widget_control": {
        "prefix": "unregister_widget_control",
        "body": "unregister_widget_control( ${1:\\$id:integer|string} )",
        "description": "Alias of wp_unregister_widget_control()."
    },
    "Function: unstick_post": {
        "prefix": "unstick_post",
        "body": "unstick_post( ${1:\\$post_id:integer} )",
        "description": "Un-stick a post."
    },
    "Function: untrailingslashit": {
        "prefix": "untrailingslashit",
        "body": "untrailingslashit( ${1:\\$string:string} )",
        "description": "Removes trailing forward slashes and backslashes if they exist."
    },
    "Function: unzip_file": {
        "prefix": "unzip_file",
        "body": "unzip_file( ${1:\\$file:string}, ${2:\\$to:string} )",
        "description": "Unzips a specified ZIP file to a location on the Filesystem via the WordPress Filesystem Abstraction."
    },
    "Function: update_archived": {
        "prefix": "update_archived",
        "body": "update_archived( ${1:\\$id:integer}, ${2:\\$archived:string} )",
        "description": "Update the &#039;archived&#039; status of a particular blog."
    },
    "Function: update_attached_file": {
        "prefix": "update_attached_file",
        "body": "update_attached_file( ${1:\\$attachment_id:integer}, ${2:\\$file:string} )",
        "description": "Update attachment file path based on attachment ID."
    },
    "Function: update_blog_details": {
        "prefix": "update_blog_details",
        "body": "update_blog_details( ${1:\\$blog_id:integer}, ${2:\\$details:array} )",
        "description": "Update the details for a blog. Updates the blogs table for a given blog id."
    },
    "Function: update_blog_option": {
        "prefix": "update_blog_option",
        "body": "update_blog_option( ${1:\\$id:integer}, ${2:\\$option:string}, ${3:\\$value:mixed}, ${4:\\$deprecated:mixed|null} )",
        "description": "Update an option for a particular blog."
    },
    "Function: update_blog_public": {
        "prefix": "update_blog_public",
        "body": "update_blog_public( ${1:\\$old_value:integer}, ${2:\\$value:integer} )",
        "description": "Update this blog&#039;s &#039;public&#039; setting in the global blogs table."
    },
    "Function: update_blog_status": {
        "prefix": "update_blog_status",
        "body": "update_blog_status( ${1:\\$blog_id:integer}, ${2:\\$pref:string}, ${3:\\$value:string}, ${4:\\$deprecated:null} )",
        "description": "Update a blog details field."
    },
    "Function: update_category_cache": {
        "prefix": "update_category_cache",
        "body": "update_category_cache(  )",
        "description": "Update the categories cache."
    },
    "Function: update_comment_cache": {
        "prefix": "update_comment_cache",
        "body": "update_comment_cache( ${1:\\$comments:array}, ${2:\\$update_meta_cache:boolean} )",
        "description": "Updates the comment cache of given comments."
    },
    "Function: update_comment_meta": {
        "prefix": "update_comment_meta",
        "body": "update_comment_meta( ${1:\\$comment_id:integer}, ${2:\\$meta_key:string}, ${3:\\$meta_value:mixed}, ${4:\\$prev_value:mixed} )",
        "description": "Update comment meta field based on comment ID."
    },
    "Function: update_core": {
        "prefix": "update_core",
        "body": "update_core( ${1:\\$from:string}, ${2:\\$to:string} )",
        "description": "Upgrades the core of WordPress."
    },
    "Function: update_gallery_tab": {
        "prefix": "update_gallery_tab",
        "body": "update_gallery_tab( ${1:\\$tabs:array} )",
        "description": "Adds the gallery tab back to the tabs array if post has image attachments"
    },
    "Function: update_home_siteurl": {
        "prefix": "update_home_siteurl",
        "body": "update_home_siteurl( ${1:\\$old_value:string}, ${2:\\$value:string} )",
        "description": "Flushes rewrite rules if siteurl, home or page_on_front changed."
    },
    "Function: update_meta": {
        "prefix": "update_meta",
        "body": "update_meta( ${1:\\$meta_id:integer}, ${2:\\$meta_key:string}, ${3:\\$meta_value:string} )",
        "description": "Update post meta data by meta ID."
    },
    "Function: update_meta_cache": {
        "prefix": "update_meta_cache",
        "body": "update_meta_cache( ${1:\\$meta_type:string}, ${2:\\$object_ids:integer|array} )",
        "description": "Update the metadata cache for the specified objects."
    },
    "Function: update_metadata": {
        "prefix": "update_metadata",
        "body": "update_metadata( ${1:\\$meta_type:string}, ${2:\\$object_id:integer}, ${3:\\$meta_key:string}, ${4:\\$meta_value:mixed}, ${5:\\$prev_value:mixed} )",
        "description": "Update metadata for the specified object. If no value already exists for the specified object ID and metadata key, the metadata will be added."
    },
    "Function: update_metadata_by_mid": {
        "prefix": "update_metadata_by_mid",
        "body": "update_metadata_by_mid( ${1:\\$meta_type:string}, ${2:\\$meta_id:integer}, ${3:\\$meta_value:string}, ${4:\\$meta_key:string} )",
        "description": "Update meta data by meta ID"
    },
    "Function: update_nag": {
        "prefix": "update_nag",
        "body": "update_nag(  )",
        "description": ""
    },
    "Function: update_network_cache": {
        "prefix": "update_network_cache",
        "body": "update_network_cache( ${1:\\$networks:array} )",
        "description": "Updates the network cache of given networks."
    },
    "Function: update_network_option": {
        "prefix": "update_network_option",
        "body": "update_network_option( ${1:\\$network_id:integer}, ${2:\\$option:string}, ${3:\\$value:mixed} )",
        "description": "Update the value of a network option that was already added."
    },
    "Function: update_network_option_new_admin_email": {
        "prefix": "update_network_option_new_admin_email",
        "body": "update_network_option_new_admin_email( ${1:\\$old_value:string}, ${2:\\$value:string} )",
        "description": "Send a confirmation request email when a change of network admin email address is attempted."
    },
    "Function: update_object_term_cache": {
        "prefix": "update_object_term_cache",
        "body": "update_object_term_cache( ${1:\\$object_ids:string|array}, ${2:\\$object_type:array|string} )",
        "description": "Updates the cache for the given term object ID(s)."
    },
    "Function: update_option": {
        "prefix": "update_option",
        "body": "update_option( ${1:\\$option:string}, ${2:\\$value:mixed}, ${3:\\$autoload:string|boolean|null} )",
        "description": "Update the value of an option that was already added."
    },
    "Function: update_option_new_admin_email": {
        "prefix": "update_option_new_admin_email",
        "body": "update_option_new_admin_email( ${1:\\$old_value:string}, ${2:\\$value:string} )",
        "description": "Send a confirmation request email when a change of site admin email address is attempted."
    },
    "Function: update_page_cache": {
        "prefix": "update_page_cache",
        "body": "update_page_cache( ${1:\\$pages:array} )",
        "description": "Alias of update_post_cache()."
    },
    "Function: update_post_cache": {
        "prefix": "update_post_cache",
        "body": "update_post_cache( ${1:\\$posts:array} )",
        "description": "Updates posts in cache."
    },
    "Function: update_post_caches": {
        "prefix": "update_post_caches",
        "body": "update_post_caches( ${1:\\$posts:array}, ${2:\\$post_type:string}, ${3:\\$update_term_cache:boolean}, ${4:\\$update_meta_cache:boolean} )",
        "description": "Call major cache updating functions for list of Post objects."
    },
    "Function: update_post_meta": {
        "prefix": "update_post_meta",
        "body": "update_post_meta( ${1:\\$post_id:integer}, ${2:\\$meta_key:string}, ${3:\\$meta_value:mixed}, ${4:\\$prev_value:mixed} )",
        "description": "Update post meta field based on post ID."
    },
    "Function: update_post_thumbnail_cache": {
        "prefix": "update_post_thumbnail_cache",
        "body": "update_post_thumbnail_cache( ${1:\\$wp_query:WP_Query|null} )",
        "description": "Update cache for thumbnails in the current loop."
    },
    "Function: update_postmeta_cache": {
        "prefix": "update_postmeta_cache",
        "body": "update_postmeta_cache( ${1:\\$post_ids:array} )",
        "description": "Updates metadata cache for list of post IDs."
    },
    "Function: update_posts_count": {
        "prefix": "update_posts_count",
        "body": "update_posts_count( ${1:\\$deprecated:string} )",
        "description": "Update a blog&#039;s post count."
    },
    "Function: update_recently_edited": {
        "prefix": "update_recently_edited",
        "body": "update_recently_edited( ${1:\\$file:string} )",
        "description": "Update the &quot;recently-edited&quot; file for the plugin or theme editor."
    },
    "Function: update_right_now_message": {
        "prefix": "update_right_now_message",
        "body": "update_right_now_message(  )",
        "description": ""
    },
    "Function: update_site_cache": {
        "prefix": "update_site_cache",
        "body": "update_site_cache( ${1:\\$sites:array} )",
        "description": "Updates sites in cache."
    },
    "Function: update_site_option": {
        "prefix": "update_site_option",
        "body": "update_site_option( ${1:\\$option:string}, ${2:\\$value:mixed} )",
        "description": "Update the value of an option that was already added for the current network."
    },
    "Function: update_term_cache": {
        "prefix": "update_term_cache",
        "body": "update_term_cache( ${1:\\$terms:array}, ${2:\\$taxonomy:string} )",
        "description": "Updates Terms to Taxonomy in cache."
    },
    "Function: update_term_meta": {
        "prefix": "update_term_meta",
        "body": "update_term_meta( ${1:\\$term_id:integer}, ${2:\\$meta_key:string}, ${3:\\$meta_value:mixed}, ${4:\\$prev_value:mixed} )",
        "description": "Updates term metadata."
    },
    "Function: update_termmeta_cache": {
        "prefix": "update_termmeta_cache",
        "body": "update_termmeta_cache( ${1:\\$term_ids:array} )",
        "description": "Updates metadata cache for list of term IDs."
    },
    "Function: update_user_caches": {
        "prefix": "update_user_caches",
        "body": "update_user_caches( ${1:\\$user:WP_User} )",
        "description": "Update all user caches"
    },
    "Function: update_user_meta": {
        "prefix": "update_user_meta",
        "body": "update_user_meta( ${1:\\$user_id:integer}, ${2:\\$meta_key:string}, ${3:\\$meta_value:mixed}, ${4:\\$prev_value:mixed} )",
        "description": "Update user meta field based on user ID."
    },
    "Function: update_user_option": {
        "prefix": "update_user_option",
        "body": "update_user_option( ${1:\\$user_id:integer}, ${2:\\$option_name:string}, ${3:\\$newvalue:mixed}, ${4:\\$global:boolean} )",
        "description": "Update user option with global blog capability."
    },
    "Function: update_user_status": {
        "prefix": "update_user_status",
        "body": "update_user_status( ${1:\\$id:integer}, ${2:\\$pref:string}, ${3:\\$value:integer}, ${4:\\$deprecated:null} )",
        "description": "Update the status of a user in the database."
    },
    "Function: update_usermeta": {
        "prefix": "update_usermeta",
        "body": "update_usermeta( ${1:\\$user_id:integer}, ${2:\\$meta_key:string}, ${3:\\$meta_value:mixed} )",
        "description": "Update metadata of user."
    },
    "Function: upgrade_network": {
        "prefix": "upgrade_network",
        "body": "upgrade_network(  )",
        "description": "Executes network-level upgrade routines."
    },
    "Function: upload_is_file_too_big": {
        "prefix": "upload_is_file_too_big",
        "body": "upload_is_file_too_big( ${1:\\$upload:array} )",
        "description": "Check whether an upload is too big."
    },
    "Function: upload_is_user_over_quota": {
        "prefix": "upload_is_user_over_quota",
        "body": "upload_is_user_over_quota( ${1:\\$echo:boolean} )",
        "description": "Check whether a site has used its allotted upload space."
    },
    "Function: upload_size_limit_filter": {
        "prefix": "upload_size_limit_filter",
        "body": "upload_size_limit_filter( ${1:\\$size:integer} )",
        "description": "Filters the maximum upload file size allowed, in bytes."
    },
    "Function: upload_space_setting": {
        "prefix": "upload_space_setting",
        "body": "upload_space_setting( ${1:\\$id:integer} )",
        "description": "Displays the site upload space quota setting form on the Edit Site Settings screen."
    },
    "Function: url_is_accessable_via_ssl": {
        "prefix": "url_is_accessable_via_ssl",
        "body": "url_is_accessable_via_ssl( ${1:\\$url:string} )",
        "description": "Determines if the URL can be accessed over SSL."
    },
    "Function: url_shorten": {
        "prefix": "url_shorten",
        "body": "url_shorten( ${1:\\$url:string}, ${2:\\$length:integer} )",
        "description": "Shorten a URL, to be used as link text."
    },
    "Function: url_to_postid": {
        "prefix": "url_to_postid",
        "body": "url_to_postid( ${1:\\$url:string} )",
        "description": "Examine a URL and try to determine the post ID it represents."
    },
    "Function: urldecode_deep": {
        "prefix": "urldecode_deep",
        "body": "urldecode_deep( ${1:\\$value:mixed} )",
        "description": "Navigates through an array, object, or scalar, and decodes URL-encoded values"
    },
    "Function: urlencode_deep": {
        "prefix": "urlencode_deep",
        "body": "urlencode_deep( ${1:\\$value:mixed} )",
        "description": "Navigates through an array, object, or scalar, and encodes the values to be used in a URL."
    },
    "Function: use_codepress": {
        "prefix": "use_codepress",
        "body": "use_codepress(  )",
        "description": "Determine whether to use CodePress."
    },
    "Function: use_ssl_preference": {
        "prefix": "use_ssl_preference",
        "body": "use_ssl_preference( ${1:\\$user:object} )",
        "description": "Optional SSL preference that can be turned on by hooking to the &#039;personal_options&#039; action."
    },
    "Function: user_admin_url": {
        "prefix": "user_admin_url",
        "body": "user_admin_url( ${1:\\$path:string}, ${2:\\$scheme:string} )",
        "description": "Retrieves the URL to the admin area for the current user."
    },
    "Function: user_can": {
        "prefix": "user_can",
        "body": "user_can( ${1:\\$user:integer|WP_User}, ${2:\\$capability:string} )",
        "description": "Whether a particular user has a specific capability."
    },
    "Function: user_can_access_admin_page": {
        "prefix": "user_can_access_admin_page",
        "body": "user_can_access_admin_page(  )",
        "description": ""
    },
    "Function: user_can_create_draft": {
        "prefix": "user_can_create_draft",
        "body": "user_can_create_draft( ${1:\\$user_id:integer}, ${2:\\$blog_id:integer}, ${3:\\$category_id:integer} )",
        "description": "Whether user can create a post."
    },
    "Function: user_can_create_post": {
        "prefix": "user_can_create_post",
        "body": "user_can_create_post( ${1:\\$user_id:integer}, ${2:\\$blog_id:integer}, ${3:\\$category_id:integer} )",
        "description": "Whether user can create a post."
    },
    "Function: user_can_delete_post": {
        "prefix": "user_can_delete_post",
        "body": "user_can_delete_post( ${1:\\$user_id:integer}, ${2:\\$post_id:integer}, ${3:\\$blog_id:integer} )",
        "description": "Whether user can delete a post."
    },
    "Function: user_can_delete_post_comments": {
        "prefix": "user_can_delete_post_comments",
        "body": "user_can_delete_post_comments( ${1:\\$user_id:integer}, ${2:\\$post_id:integer}, ${3:\\$blog_id:integer} )",
        "description": "Whether user can delete a post."
    },
    "Function: user_can_edit_post": {
        "prefix": "user_can_edit_post",
        "body": "user_can_edit_post( ${1:\\$user_id:integer}, ${2:\\$post_id:integer}, ${3:\\$blog_id:integer} )",
        "description": "Whether user can edit a post."
    },
    "Function: user_can_edit_post_comments": {
        "prefix": "user_can_edit_post_comments",
        "body": "user_can_edit_post_comments( ${1:\\$user_id:integer}, ${2:\\$post_id:integer}, ${3:\\$blog_id:integer} )",
        "description": "Whether user can delete a post."
    },
    "Function: user_can_edit_post_date": {
        "prefix": "user_can_edit_post_date",
        "body": "user_can_edit_post_date( ${1:\\$user_id:integer}, ${2:\\$post_id:integer}, ${3:\\$blog_id:integer} )",
        "description": "Whether user can delete a post."
    },
    "Function: user_can_edit_user": {
        "prefix": "user_can_edit_user",
        "body": "user_can_edit_user( ${1:\\$user_id:integer}, ${2:\\$other_user:integer} )",
        "description": "Can user can edit other user."
    },
    "Function: user_can_richedit": {
        "prefix": "user_can_richedit",
        "body": "user_can_richedit(  )",
        "description": "Whether the user can access the visual editor."
    },
    "Function: user_can_set_post_date": {
        "prefix": "user_can_set_post_date",
        "body": "user_can_set_post_date( ${1:\\$user_id:integer}, ${2:\\$blog_id:integer}, ${3:\\$category_id:integer} )",
        "description": "Whether user can set new posts&#039; dates."
    },
    "Function: user_pass_ok": {
        "prefix": "user_pass_ok",
        "body": "user_pass_ok( ${1:\\$user_login:string}, ${2:\\$user_pass:string} )",
        "description": "Check that the user login name and password is correct."
    },
    "Function: user_trailingslashit": {
        "prefix": "user_trailingslashit",
        "body": "user_trailingslashit( ${1:\\$string:string}, ${2:\\$type_of_url:string} )",
        "description": "Retrieves a trailing-slashed string if the site is set for adding trailing slashes."
    },
    "Function: username_exists": {
        "prefix": "username_exists",
        "body": "username_exists( ${1:\\$username:string} )",
        "description": "Checks whether the given username exists."
    },
    "Function: users_can_register_signup_filter": {
        "prefix": "users_can_register_signup_filter",
        "body": "users_can_register_signup_filter(  )",
        "description": "Check whether users can self-register, based on Network settings."
    },
    "Function: utf8_uri_encode": {
        "prefix": "utf8_uri_encode",
        "body": "utf8_uri_encode( ${1:\\$utf8_string:string}, ${2:\\$length:integer} )",
        "description": "Encode the Unicode values to be used in the URI."
    },
    "Function: valid_unicode": {
        "prefix": "valid_unicode",
        "body": "valid_unicode( ${1:\\$i:integer} )",
        "description": "Helper function to determine if a Unicode value is valid."
    },
    "Function: validate_active_plugins": {
        "prefix": "validate_active_plugins",
        "body": "validate_active_plugins(  )",
        "description": "Validate active plugins"
    },
    "Function: validate_another_blog_signup": {
        "prefix": "validate_another_blog_signup",
        "body": "validate_another_blog_signup(  )",
        "description": "Validate a new site signup."
    },
    "Function: validate_blog_form": {
        "prefix": "validate_blog_form",
        "body": "validate_blog_form(  )",
        "description": "Validate the new site signup"
    },
    "Function: validate_blog_signup": {
        "prefix": "validate_blog_signup",
        "body": "validate_blog_signup(  )",
        "description": "Validate new site signup"
    },
    "Function: validate_current_theme": {
        "prefix": "validate_current_theme",
        "body": "validate_current_theme(  )",
        "description": "Checks that current theme files &#039;index.php&#039; and &#039;style.css&#039; exists."
    },
    "Function: validate_email": {
        "prefix": "validate_email",
        "body": "validate_email( ${1:\\$email:string}, ${2:\\$check_domain:boolean} )",
        "description": "Deprecated functionality to validate an email address."
    },
    "Function: validate_file": {
        "prefix": "validate_file",
        "body": "validate_file( ${1:\\$file:string}, ${2:\\$allowed_files:array} )",
        "description": "Validates a file name and path against an allowed set of rules."
    },
    "Function: validate_file_to_edit": {
        "prefix": "validate_file_to_edit",
        "body": "validate_file_to_edit( ${1:\\$file:string}, ${2:\\$allowed_files:array} )",
        "description": "Makes sure that the file that was requested to be edited is allowed to be edited."
    },
    "Function: validate_plugin": {
        "prefix": "validate_plugin",
        "body": "validate_plugin( ${1:\\$plugin:string} )",
        "description": "Validate the plugin path."
    },
    "Function: validate_user_form": {
        "prefix": "validate_user_form",
        "body": "validate_user_form(  )",
        "description": "Validate user signup name and email"
    },
    "Function: validate_user_signup": {
        "prefix": "validate_user_signup",
        "body": "validate_user_signup(  )",
        "description": "Validate the new user signup"
    },
    "Function: validate_username": {
        "prefix": "validate_username",
        "body": "validate_username( ${1:\\$username:string} )",
        "description": "Checks whether a username is valid."
    },
    "Function: verify_file_md5": {
        "prefix": "verify_file_md5",
        "body": "verify_file_md5( ${1:\\$filename:string}, ${2:\\$expected_md5:string} )",
        "description": "Calculates and compares the MD5 of a file to its expected value."
    },
    "Function: walk_category_dropdown_tree": {
        "prefix": "walk_category_dropdown_tree",
        "body": "walk_category_dropdown_tree(  )",
        "description": "Retrieve HTML dropdown (select) content for category list."
    },
    "Function: walk_category_tree": {
        "prefix": "walk_category_tree",
        "body": "walk_category_tree(  )",
        "description": "Retrieve HTML list content for category list."
    },
    "Function: walk_nav_menu_tree": {
        "prefix": "walk_nav_menu_tree",
        "body": "walk_nav_menu_tree( ${1:\\$items:array}, ${2:\\$depth:integer}, ${3:\\$r:stdClass} )",
        "description": "Retrieve the HTML list content for nav menu items."
    },
    "Function: walk_page_dropdown_tree": {
        "prefix": "walk_page_dropdown_tree",
        "body": "walk_page_dropdown_tree(  )",
        "description": "Retrieve HTML dropdown (select) content for page list."
    },
    "Function: walk_page_tree": {
        "prefix": "walk_page_tree",
        "body": "walk_page_tree( ${1:\\$pages:array}, ${2:\\$depth:integer}, ${3:\\$current_page:integer}, ${4:\\$r:array} )",
        "description": "Retrieve HTML list content for page list."
    },
    "Function: weblog_ping": {
        "prefix": "weblog_ping",
        "body": "weblog_ping( ${1:\\$server:string}, ${2:\\$path:string} )",
        "description": "Send a pingback."
    },
    "Function: welcome_user_msg_filter": {
        "prefix": "welcome_user_msg_filter",
        "body": "welcome_user_msg_filter( ${1:\\$text:string} )",
        "description": "Ensure that the welcome message is not empty. Currently unused."
    },
    "Function: win_is_writable": {
        "prefix": "win_is_writable",
        "body": "win_is_writable( ${1:\\$path:string} )",
        "description": "Workaround for Windows bug in is_writable() function"
    },
    "Function: wlwmanifest_link": {
        "prefix": "wlwmanifest_link",
        "body": "wlwmanifest_link(  )",
        "description": "Display the link to the Windows Live Writer manifest file."
    },
    "Function: wp": {
        "prefix": "wp",
        "body": "wp( ${1:\\$query_vars:string|array} )",
        "description": "Set up the WordPress query."
    },
    "Function: wp_add_dashboard_widget": {
        "prefix": "wp_add_dashboard_widget",
        "body": "wp_add_dashboard_widget( ${1:\\$widget_id:string}, ${2:\\$widget_name:string}, ${3:\\$callback:callable}, ${4:\\$control_callback:callable|null}, ${5:\\$callback_args:array|null} )",
        "description": "Adds a new dashboard widget."
    },
    "Function: wp_add_id3_tag_data": {
        "prefix": "wp_add_id3_tag_data",
        "body": "wp_add_id3_tag_data( ${1:\\$metadata:array}, ${2:\\$data:array} )",
        "description": "Parse ID3v2, ID3v1, and getID3 comments to extract usable data"
    },
    "Function: wp_add_inline_script": {
        "prefix": "wp_add_inline_script",
        "body": "wp_add_inline_script( ${1:\\$handle:string}, ${2:\\$data:string}, ${3:\\$position:string} )",
        "description": "Adds extra code to a registered script."
    },
    "Function: wp_add_inline_style": {
        "prefix": "wp_add_inline_style",
        "body": "wp_add_inline_style( ${1:\\$handle:string}, ${2:\\$data:string} )",
        "description": "Add extra CSS styles to a registered stylesheet."
    },
    "Function: wp_add_object_terms": {
        "prefix": "wp_add_object_terms",
        "body": "wp_add_object_terms( ${1:\\$object_id:integer}, ${2:\\$terms:string|integer|array}, ${3:\\$taxonomy:array|string} )",
        "description": "Add term(s) associated with a given object."
    },
    "Function: wp_add_post_tags": {
        "prefix": "wp_add_post_tags",
        "body": "wp_add_post_tags( ${1:\\$post_id:integer}, ${2:\\$tags:string|array} )",
        "description": "Add tags to a post."
    },
    "Function: wp_add_privacy_policy_content": {
        "prefix": "wp_add_privacy_policy_content",
        "body": "wp_add_privacy_policy_content( ${1:\\$plugin_name:string}, ${2:\\$policy_text:string} )",
        "description": "Helper function for adding content to the postbox shown when editing the privacy policy."
    },
    "Function: wp_add_trashed_suffix_to_post_name_for_post": {
        "prefix": "wp_add_trashed_suffix_to_post_name_for_post",
        "body": "wp_add_trashed_suffix_to_post_name_for_post( ${1:\\$post:WP_Post} )",
        "description": "Adds a trashed suffix for a given post."
    },
    "Function: wp_add_trashed_suffix_to_post_name_for_trashed_posts": {
        "prefix": "wp_add_trashed_suffix_to_post_name_for_trashed_posts",
        "body": "wp_add_trashed_suffix_to_post_name_for_trashed_posts( ${1:\\$post_name:string}, ${2:\\$post_ID:string} )",
        "description": "Adds a suffix if any trashed posts have a given slug."
    },
    "Function: wp_admin_bar_add_secondary_groups": {
        "prefix": "wp_admin_bar_add_secondary_groups",
        "body": "wp_admin_bar_add_secondary_groups( ${1:\\$wp_admin_bar:WP_Admin_Bar} )",
        "description": "Add secondary menus."
    },
    "Function: wp_admin_bar_appearance_menu": {
        "prefix": "wp_admin_bar_appearance_menu",
        "body": "wp_admin_bar_appearance_menu( ${1:\\$wp_admin_bar:WP_Admin_Bar} )",
        "description": "Add appearance submenu items to the &quot;Site Name&quot; menu."
    },
    "Function: wp_admin_bar_comments_menu": {
        "prefix": "wp_admin_bar_comments_menu",
        "body": "wp_admin_bar_comments_menu( ${1:\\$wp_admin_bar:WP_Admin_Bar} )",
        "description": "Add edit comments link with awaiting moderation count bubble."
    },
    "Function: wp_admin_bar_customize_menu": {
        "prefix": "wp_admin_bar_customize_menu",
        "body": "wp_admin_bar_customize_menu( ${1:\\$wp_admin_bar:WP_Admin_Bar} )",
        "description": "Adds the &quot;Customize&quot; link to the Toolbar."
    },
    "Function: wp_admin_bar_dashboard_view_site_menu": {
        "prefix": "wp_admin_bar_dashboard_view_site_menu",
        "body": "wp_admin_bar_dashboard_view_site_menu( ${1:\\$wp_admin_bar:WP_Admin_Bar} )",
        "description": "Add the &quot;Dashboard&quot;/&quot;Visit Site&quot; menu."
    },
    "Function: wp_admin_bar_edit_menu": {
        "prefix": "wp_admin_bar_edit_menu",
        "body": "wp_admin_bar_edit_menu( ${1:\\$wp_admin_bar:WP_Admin_Bar} )",
        "description": "Provide an edit link for posts and terms."
    },
    "Function: wp_admin_bar_header": {
        "prefix": "wp_admin_bar_header",
        "body": "wp_admin_bar_header(  )",
        "description": "Style and scripts for the admin bar."
    },
    "Function: wp_admin_bar_my_account_item": {
        "prefix": "wp_admin_bar_my_account_item",
        "body": "wp_admin_bar_my_account_item( ${1:\\$wp_admin_bar:WP_Admin_Bar} )",
        "description": "Add the &quot;My Account&quot; item."
    },
    "Function: wp_admin_bar_my_account_menu": {
        "prefix": "wp_admin_bar_my_account_menu",
        "body": "wp_admin_bar_my_account_menu( ${1:\\$wp_admin_bar:WP_Admin_Bar} )",
        "description": "Add the &quot;My Account&quot; submenu items."
    },
    "Function: wp_admin_bar_my_sites_menu": {
        "prefix": "wp_admin_bar_my_sites_menu",
        "body": "wp_admin_bar_my_sites_menu( ${1:\\$wp_admin_bar:WP_Admin_Bar} )",
        "description": "Add the &quot;My Sites/[Site Name]&quot; menu and all submenus."
    },
    "Function: wp_admin_bar_new_content_menu": {
        "prefix": "wp_admin_bar_new_content_menu",
        "body": "wp_admin_bar_new_content_menu( ${1:\\$wp_admin_bar:WP_Admin_Bar} )",
        "description": "Add &quot;Add New&quot; menu."
    },
    "Function: wp_admin_bar_render": {
        "prefix": "wp_admin_bar_render",
        "body": "wp_admin_bar_render(  )",
        "description": "Renders the admin bar to the page based on the $wp_admin_bar-&gt;menu member var."
    },
    "Function: wp_admin_bar_search_menu": {
        "prefix": "wp_admin_bar_search_menu",
        "body": "wp_admin_bar_search_menu( ${1:\\$wp_admin_bar:WP_Admin_Bar} )",
        "description": "Add search form."
    },
    "Function: wp_admin_bar_shortlink_menu": {
        "prefix": "wp_admin_bar_shortlink_menu",
        "body": "wp_admin_bar_shortlink_menu( ${1:\\$wp_admin_bar:WP_Admin_Bar} )",
        "description": "Provide a shortlink."
    },
    "Function: wp_admin_bar_sidebar_toggle": {
        "prefix": "wp_admin_bar_sidebar_toggle",
        "body": "wp_admin_bar_sidebar_toggle( ${1:\\$wp_admin_bar:WP_Admin_Bar} )",
        "description": "Add the sidebar toggle button."
    },
    "Function: wp_admin_bar_site_menu": {
        "prefix": "wp_admin_bar_site_menu",
        "body": "wp_admin_bar_site_menu( ${1:\\$wp_admin_bar:WP_Admin_Bar} )",
        "description": "Add the &quot;Site Name&quot; menu."
    },
    "Function: wp_admin_bar_updates_menu": {
        "prefix": "wp_admin_bar_updates_menu",
        "body": "wp_admin_bar_updates_menu( ${1:\\$wp_admin_bar:WP_Admin_Bar} )",
        "description": "Provide an update link if theme/plugin/core updates are available."
    },
    "Function: wp_admin_bar_wp_menu": {
        "prefix": "wp_admin_bar_wp_menu",
        "body": "wp_admin_bar_wp_menu( ${1:\\$wp_admin_bar:WP_Admin_Bar} )",
        "description": "Add the WordPress logo menu."
    },
    "Function: wp_admin_canonical_url": {
        "prefix": "wp_admin_canonical_url",
        "body": "wp_admin_canonical_url(  )",
        "description": "Remove single-use URL parameters and create canonical link based on new URL."
    },
    "Function: wp_admin_css": {
        "prefix": "wp_admin_css",
        "body": "wp_admin_css( ${1:\\$file:string}, ${2:\\$force_echo:boolean} )",
        "description": "Enqueues or directly prints a stylesheet link to the specified CSS file."
    },
    "Function: wp_admin_css_color": {
        "prefix": "wp_admin_css_color",
        "body": "wp_admin_css_color( ${1:\\$key:string}, ${2:\\$name:string}, ${3:\\$url:string}, ${4:\\$colors:array}, ${5:\\$icons:array} )",
        "description": "Registers an admin colour scheme css file."
    },
    "Function: wp_admin_css_uri": {
        "prefix": "wp_admin_css_uri",
        "body": "wp_admin_css_uri( ${1:\\$file:string} )",
        "description": "Displays the URL of a WordPress admin CSS file."
    },
    "Function: wp_admin_headers": {
        "prefix": "wp_admin_headers",
        "body": "wp_admin_headers(  )",
        "description": "Send a referrer policy header so referrers are not sent externally from administration screens."
    },
    "Function: wp_ajax_add_link_category": {
        "prefix": "wp_ajax_add_link_category",
        "body": "wp_ajax_add_link_category( ${1:\\$action:string} )",
        "description": "Ajax handler for adding a link category."
    },
    "Function: wp_ajax_add_menu_item": {
        "prefix": "wp_ajax_add_menu_item",
        "body": "wp_ajax_add_menu_item(  )",
        "description": "Ajax handler for adding a menu item."
    },
    "Function: wp_ajax_add_meta": {
        "prefix": "wp_ajax_add_meta",
        "body": "wp_ajax_add_meta(  )",
        "description": "Ajax handler for adding meta."
    },
    "Function: wp_ajax_add_tag": {
        "prefix": "wp_ajax_add_tag",
        "body": "wp_ajax_add_tag(  )",
        "description": "Ajax handler to add a tag."
    },
    "Function: wp_ajax_add_user": {
        "prefix": "wp_ajax_add_user",
        "body": "wp_ajax_add_user( ${1:\\$action:string} )",
        "description": "Ajax handler for adding a user."
    },
    "Function: wp_ajax_ajax_tag_search": {
        "prefix": "wp_ajax_ajax_tag_search",
        "body": "wp_ajax_ajax_tag_search(  )",
        "description": "Ajax handler for tag search."
    },
    "Function: wp_ajax_autocomplete_user": {
        "prefix": "wp_ajax_autocomplete_user",
        "body": "wp_ajax_autocomplete_user(  )",
        "description": "Ajax handler for user autocomplete."
    },
    "Function: wp_ajax_closed_postboxes": {
        "prefix": "wp_ajax_closed_postboxes",
        "body": "wp_ajax_closed_postboxes(  )",
        "description": "Ajax handler for closed post boxes."
    },
    "Function: wp_ajax_crop_image": {
        "prefix": "wp_ajax_crop_image",
        "body": "wp_ajax_crop_image(  )",
        "description": "Ajax handler for cropping an image."
    },
    "Function: wp_ajax_dashboard_widgets": {
        "prefix": "wp_ajax_dashboard_widgets",
        "body": "wp_ajax_dashboard_widgets(  )",
        "description": "Ajax handler for dashboard widgets."
    },
    "Function: wp_ajax_date_format": {
        "prefix": "wp_ajax_date_format",
        "body": "wp_ajax_date_format(  )",
        "description": "Ajax handler for date formatting."
    },
    "Function: wp_ajax_delete_comment": {
        "prefix": "wp_ajax_delete_comment",
        "body": "wp_ajax_delete_comment(  )",
        "description": "Ajax handler for deleting a comment."
    },
    "Function: wp_ajax_delete_inactive_widgets": {
        "prefix": "wp_ajax_delete_inactive_widgets",
        "body": "wp_ajax_delete_inactive_widgets(  )",
        "description": "Ajax handler for removing inactive widgets."
    },
    "Function: wp_ajax_delete_link": {
        "prefix": "wp_ajax_delete_link",
        "body": "wp_ajax_delete_link(  )",
        "description": "Ajax handler for deleting a link."
    },
    "Function: wp_ajax_delete_meta": {
        "prefix": "wp_ajax_delete_meta",
        "body": "wp_ajax_delete_meta(  )",
        "description": "Ajax handler for deleting meta."
    },
    "Function: wp_ajax_delete_page": {
        "prefix": "wp_ajax_delete_page",
        "body": "wp_ajax_delete_page( ${1:\\$action:string} )",
        "description": ""
    },
    "Function: wp_ajax_delete_plugin": {
        "prefix": "wp_ajax_delete_plugin",
        "body": "wp_ajax_delete_plugin(  )",
        "description": "Ajax handler for deleting a plugin."
    },
    "Function: wp_ajax_delete_post": {
        "prefix": "wp_ajax_delete_post",
        "body": "wp_ajax_delete_post( ${1:\\$action:string} )",
        "description": "Ajax handler for deleting a post."
    },
    "Function: wp_ajax_delete_tag": {
        "prefix": "wp_ajax_delete_tag",
        "body": "wp_ajax_delete_tag(  )",
        "description": "Ajax handler for deleting a tag."
    },
    "Function: wp_ajax_delete_theme": {
        "prefix": "wp_ajax_delete_theme",
        "body": "wp_ajax_delete_theme(  )",
        "description": "Ajax handler for deleting a theme."
    },
    "Function: wp_ajax_destroy_sessions": {
        "prefix": "wp_ajax_destroy_sessions",
        "body": "wp_ajax_destroy_sessions(  )",
        "description": "Ajax handler for destroying multiple open sessions for a user."
    },
    "Function: wp_ajax_dim_comment": {
        "prefix": "wp_ajax_dim_comment",
        "body": "wp_ajax_dim_comment(  )",
        "description": "Ajax handler to dim a comment."
    },
    "Function: wp_ajax_dismiss_wp_pointer": {
        "prefix": "wp_ajax_dismiss_wp_pointer",
        "body": "wp_ajax_dismiss_wp_pointer(  )",
        "description": "Ajax handler for dismissing a WordPress pointer."
    },
    "Function: wp_ajax_edit_comment": {
        "prefix": "wp_ajax_edit_comment",
        "body": "wp_ajax_edit_comment(  )",
        "description": "Ajax handler for editing a comment."
    },
    "Function: wp_ajax_edit_theme_plugin_file": {
        "prefix": "wp_ajax_edit_theme_plugin_file",
        "body": "wp_ajax_edit_theme_plugin_file(  )",
        "description": "Ajax handler for editing a theme or plugin file."
    },
    "Function: wp_ajax_fetch_list": {
        "prefix": "wp_ajax_fetch_list",
        "body": "wp_ajax_fetch_list(  )",
        "description": "Ajax handler for fetching a list table."
    },
    "Function: wp_ajax_find_posts": {
        "prefix": "wp_ajax_find_posts",
        "body": "wp_ajax_find_posts(  )",
        "description": "Ajax handler for querying posts for the Find Posts modal."
    },
    "Function: wp_ajax_generate_password": {
        "prefix": "wp_ajax_generate_password",
        "body": "wp_ajax_generate_password(  )",
        "description": "Ajax handler for generating a password."
    },
    "Function: wp_ajax_get_attachment": {
        "prefix": "wp_ajax_get_attachment",
        "body": "wp_ajax_get_attachment(  )",
        "description": "Ajax handler for getting an attachment."
    },
    "Function: wp_ajax_get_comments": {
        "prefix": "wp_ajax_get_comments",
        "body": "wp_ajax_get_comments( ${1:\\$action:string} )",
        "description": "Ajax handler for getting comments."
    },
    "Function: wp_ajax_get_community_events": {
        "prefix": "wp_ajax_get_community_events",
        "body": "wp_ajax_get_community_events(  )",
        "description": "Handles AJAX requests for community events"
    },
    "Function: wp_ajax_get_permalink": {
        "prefix": "wp_ajax_get_permalink",
        "body": "wp_ajax_get_permalink(  )",
        "description": "Ajax handler to retrieve a permalink."
    },
    "Function: wp_ajax_get_post_thumbnail_html": {
        "prefix": "wp_ajax_get_post_thumbnail_html",
        "body": "wp_ajax_get_post_thumbnail_html(  )",
        "description": "Ajax handler for retrieving HTML for the featured image."
    },
    "Function: wp_ajax_get_revision_diffs": {
        "prefix": "wp_ajax_get_revision_diffs",
        "body": "wp_ajax_get_revision_diffs(  )",
        "description": "Ajax handler for getting revision diffs."
    },
    "Function: wp_ajax_get_tagcloud": {
        "prefix": "wp_ajax_get_tagcloud",
        "body": "wp_ajax_get_tagcloud(  )",
        "description": "Ajax handler for getting a tagcloud."
    },
    "Function: wp_ajax_heartbeat": {
        "prefix": "wp_ajax_heartbeat",
        "body": "wp_ajax_heartbeat(  )",
        "description": "Ajax handler for the Heartbeat API."
    },
    "Function: wp_ajax_hidden_columns": {
        "prefix": "wp_ajax_hidden_columns",
        "body": "wp_ajax_hidden_columns(  )",
        "description": "Ajax handler for hidden columns."
    },
    "Function: wp_ajax_image_editor": {
        "prefix": "wp_ajax_image_editor",
        "body": "wp_ajax_image_editor(  )",
        "description": "Ajax handler for image editing."
    },
    "Function: wp_ajax_imgedit_preview": {
        "prefix": "wp_ajax_imgedit_preview",
        "body": "wp_ajax_imgedit_preview(  )",
        "description": "Ajax handler for image editor previews."
    },
    "Function: wp_ajax_inline_save": {
        "prefix": "wp_ajax_inline_save",
        "body": "wp_ajax_inline_save(  )",
        "description": "Ajax handler for Quick Edit saving a post from a list table."
    },
    "Function: wp_ajax_inline_save_tax": {
        "prefix": "wp_ajax_inline_save_tax",
        "body": "wp_ajax_inline_save_tax(  )",
        "description": "Ajax handler for quick edit saving for a term."
    },
    "Function: wp_ajax_install_plugin": {
        "prefix": "wp_ajax_install_plugin",
        "body": "wp_ajax_install_plugin(  )",
        "description": "Ajax handler for installing a plugin."
    },
    "Function: wp_ajax_install_theme": {
        "prefix": "wp_ajax_install_theme",
        "body": "wp_ajax_install_theme(  )",
        "description": "Ajax handler for installing a theme."
    },
    "Function: wp_ajax_logged_in": {
        "prefix": "wp_ajax_logged_in",
        "body": "wp_ajax_logged_in(  )",
        "description": "Ajax handler for Customizer preview logged-in status."
    },
    "Function: wp_ajax_menu_get_metabox": {
        "prefix": "wp_ajax_menu_get_metabox",
        "body": "wp_ajax_menu_get_metabox(  )",
        "description": "Ajax handler for retrieving menu meta boxes."
    },
    "Function: wp_ajax_menu_locations_save": {
        "prefix": "wp_ajax_menu_locations_save",
        "body": "wp_ajax_menu_locations_save(  )",
        "description": "Ajax handler for menu locations save."
    },
    "Function: wp_ajax_menu_quick_search": {
        "prefix": "wp_ajax_menu_quick_search",
        "body": "wp_ajax_menu_quick_search(  )",
        "description": "Ajax handler for menu quick searching."
    },
    "Function: wp_ajax_meta_box_order": {
        "prefix": "wp_ajax_meta_box_order",
        "body": "wp_ajax_meta_box_order(  )",
        "description": "Ajax handler for saving the meta box order."
    },
    "Function: wp_ajax_nopriv_heartbeat": {
        "prefix": "wp_ajax_nopriv_heartbeat",
        "body": "wp_ajax_nopriv_heartbeat(  )",
        "description": "Ajax handler for the Heartbeat API in the no-privilege context."
    },
    "Function: wp_ajax_oembed_cache": {
        "prefix": "wp_ajax_oembed_cache",
        "body": "wp_ajax_oembed_cache(  )",
        "description": "Ajax handler for oEmbed caching."
    },
    "Function: wp_ajax_parse_embed": {
        "prefix": "wp_ajax_parse_embed",
        "body": "wp_ajax_parse_embed(  )",
        "description": "Apply [embed] Ajax handlers to a string."
    },
    "Function: wp_ajax_parse_media_shortcode": {
        "prefix": "wp_ajax_parse_media_shortcode",
        "body": "wp_ajax_parse_media_shortcode(  )",
        "description": ""
    },
    "Function: wp_ajax_press_this_add_category": {
        "prefix": "wp_ajax_press_this_add_category",
        "body": "wp_ajax_press_this_add_category(  )",
        "description": "Ajax handler for creating new category from Press This."
    },
    "Function: wp_ajax_press_this_save_post": {
        "prefix": "wp_ajax_press_this_save_post",
        "body": "wp_ajax_press_this_save_post(  )",
        "description": "Ajax handler for saving a post from Press This."
    },
    "Function: wp_ajax_query_attachments": {
        "prefix": "wp_ajax_query_attachments",
        "body": "wp_ajax_query_attachments(  )",
        "description": "Ajax handler for querying attachments."
    },
    "Function: wp_ajax_query_themes": {
        "prefix": "wp_ajax_query_themes",
        "body": "wp_ajax_query_themes(  )",
        "description": "Ajax handler for getting themes from themes_api()."
    },
    "Function: wp_ajax_replyto_comment": {
        "prefix": "wp_ajax_replyto_comment",
        "body": "wp_ajax_replyto_comment( ${1:\\$action:string} )",
        "description": "Ajax handler for replying to a comment."
    },
    "Function: wp_ajax_sample_permalink": {
        "prefix": "wp_ajax_sample_permalink",
        "body": "wp_ajax_sample_permalink(  )",
        "description": "Ajax handler to retrieve a sample permalink."
    },
    "Function: wp_ajax_save_attachment": {
        "prefix": "wp_ajax_save_attachment",
        "body": "wp_ajax_save_attachment(  )",
        "description": "Ajax handler for updating attachment attributes."
    },
    "Function: wp_ajax_save_attachment_compat": {
        "prefix": "wp_ajax_save_attachment_compat",
        "body": "wp_ajax_save_attachment_compat(  )",
        "description": "Ajax handler for saving backward compatible attachment attributes."
    },
    "Function: wp_ajax_save_attachment_order": {
        "prefix": "wp_ajax_save_attachment_order",
        "body": "wp_ajax_save_attachment_order(  )",
        "description": "Ajax handler for saving the attachment order."
    },
    "Function: wp_ajax_save_user_color_scheme": {
        "prefix": "wp_ajax_save_user_color_scheme",
        "body": "wp_ajax_save_user_color_scheme(  )",
        "description": "Ajax handler for auto-saving the selected color scheme for a user&#039;s own profile."
    },
    "Function: wp_ajax_save_widget": {
        "prefix": "wp_ajax_save_widget",
        "body": "wp_ajax_save_widget(  )",
        "description": "Ajax handler for saving a widget."
    },
    "Function: wp_ajax_save_wporg_username": {
        "prefix": "wp_ajax_save_wporg_username",
        "body": "wp_ajax_save_wporg_username(  )",
        "description": "Ajax handler for saving the user&#039;s WordPress.org username."
    },
    "Function: wp_ajax_search_install_plugins": {
        "prefix": "wp_ajax_search_install_plugins",
        "body": "wp_ajax_search_install_plugins(  )",
        "description": "Ajax handler for searching plugins to install."
    },
    "Function: wp_ajax_search_plugins": {
        "prefix": "wp_ajax_search_plugins",
        "body": "wp_ajax_search_plugins(  )",
        "description": "Ajax handler for searching plugins."
    },
    "Function: wp_ajax_send_attachment_to_editor": {
        "prefix": "wp_ajax_send_attachment_to_editor",
        "body": "wp_ajax_send_attachment_to_editor(  )",
        "description": "Ajax handler for sending an attachment to the editor."
    },
    "Function: wp_ajax_send_link_to_editor": {
        "prefix": "wp_ajax_send_link_to_editor",
        "body": "wp_ajax_send_link_to_editor(  )",
        "description": "Ajax handler for sending a link to the editor."
    },
    "Function: wp_ajax_set_attachment_thumbnail": {
        "prefix": "wp_ajax_set_attachment_thumbnail",
        "body": "wp_ajax_set_attachment_thumbnail(  )",
        "description": "Ajax handler for setting the featured image for an attachment."
    },
    "Function: wp_ajax_set_post_thumbnail": {
        "prefix": "wp_ajax_set_post_thumbnail",
        "body": "wp_ajax_set_post_thumbnail(  )",
        "description": "Ajax handler for setting the featured image."
    },
    "Function: wp_ajax_time_format": {
        "prefix": "wp_ajax_time_format",
        "body": "wp_ajax_time_format(  )",
        "description": "Ajax handler for time formatting."
    },
    "Function: wp_ajax_trash_post": {
        "prefix": "wp_ajax_trash_post",
        "body": "wp_ajax_trash_post( ${1:\\$action:string} )",
        "description": "Ajax handler for sending a post to the trash."
    },
    "Function: wp_ajax_untrash_post": {
        "prefix": "wp_ajax_untrash_post",
        "body": "wp_ajax_untrash_post( ${1:\\$action:string} )",
        "description": "Ajax handler to restore a post from the trash."
    },
    "Function: wp_ajax_update_plugin": {
        "prefix": "wp_ajax_update_plugin",
        "body": "wp_ajax_update_plugin(  )",
        "description": "Ajax handler for updating a plugin."
    },
    "Function: wp_ajax_update_theme": {
        "prefix": "wp_ajax_update_theme",
        "body": "wp_ajax_update_theme(  )",
        "description": "Ajax handler for updating a theme."
    },
    "Function: wp_ajax_update_welcome_panel": {
        "prefix": "wp_ajax_update_welcome_panel",
        "body": "wp_ajax_update_welcome_panel(  )",
        "description": "Ajax handler for updating whether to display the welcome panel."
    },
    "Function: wp_ajax_update_widget": {
        "prefix": "wp_ajax_update_widget",
        "body": "wp_ajax_update_widget(  )",
        "description": "Ajax handler for saving a widget."
    },
    "Function: wp_ajax_upload_attachment": {
        "prefix": "wp_ajax_upload_attachment",
        "body": "wp_ajax_upload_attachment(  )",
        "description": "Ajax handler for uploading attachments"
    },
    "Function: wp_ajax_widgets_order": {
        "prefix": "wp_ajax_widgets_order",
        "body": "wp_ajax_widgets_order(  )",
        "description": "Ajax handler for saving the widgets order."
    },
    "Function: wp_ajax_wp_compression_test": {
        "prefix": "wp_ajax_wp_compression_test",
        "body": "wp_ajax_wp_compression_test(  )",
        "description": "Ajax handler for compression testing."
    },
    "Function: wp_ajax_wp_fullscreen_save_post": {
        "prefix": "wp_ajax_wp_fullscreen_save_post",
        "body": "wp_ajax_wp_fullscreen_save_post(  )",
        "description": "Ajax handler for saving posts from the fullscreen editor."
    },
    "Function: wp_ajax_wp_link_ajax": {
        "prefix": "wp_ajax_wp_link_ajax",
        "body": "wp_ajax_wp_link_ajax(  )",
        "description": "Ajax handler for internal linking."
    },
    "Function: wp_ajax_wp_privacy_erase_personal_data": {
        "prefix": "wp_ajax_wp_privacy_erase_personal_data",
        "body": "wp_ajax_wp_privacy_erase_personal_data(  )",
        "description": "Ajax handler for erasing personal data."
    },
    "Function: wp_ajax_wp_privacy_export_personal_data": {
        "prefix": "wp_ajax_wp_privacy_export_personal_data",
        "body": "wp_ajax_wp_privacy_export_personal_data(  )",
        "description": "Ajax handler for exporting a user&#039;s personal data."
    },
    "Function: wp_ajax_wp_remove_post_lock": {
        "prefix": "wp_ajax_wp_remove_post_lock",
        "body": "wp_ajax_wp_remove_post_lock(  )",
        "description": "Ajax handler for removing a post lock."
    },
    "Function: wp_allow_comment": {
        "prefix": "wp_allow_comment",
        "body": "wp_allow_comment( ${1:\\$commentdata:array}, ${2:\\$avoid_die:boolean} )",
        "description": "Validates whether this comment is allowed to be made."
    },
    "Function: wp_allowed_protocols": {
        "prefix": "wp_allowed_protocols",
        "body": "wp_allowed_protocols(  )",
        "description": "Retrieve a list of protocols to allow in HTML attributes."
    },
    "Function: wp_array_slice_assoc": {
        "prefix": "wp_array_slice_assoc",
        "body": "wp_array_slice_assoc( ${1:\\$array:array}, ${2:\\$keys:array} )",
        "description": "Extract a slice of an array, given a list of keys."
    },
    "Function: wp_attachment_is": {
        "prefix": "wp_attachment_is",
        "body": "wp_attachment_is( ${1:\\$type:string}, ${2:\\$post:integer|WP_Post|null} )",
        "description": "Verifies an attachment is of a given type."
    },
    "Function: wp_attachment_is_image": {
        "prefix": "wp_attachment_is_image",
        "body": "wp_attachment_is_image( ${1:\\$post:integer|WP_Post|null} )",
        "description": "Checks if the attachment is an image."
    },
    "Function: wp_audio_shortcode": {
        "prefix": "wp_audio_shortcode",
        "body": "wp_audio_shortcode( ${1:\\$attr:array}, ${2:\\$content:string} )",
        "description": "Builds the Audio shortcode output."
    },
    "Function: wp_auth_check": {
        "prefix": "wp_auth_check",
        "body": "wp_auth_check( ${1:\\$response:array} )",
        "description": "Check whether a user is still logged in, for the heartbeat."
    },
    "Function: wp_auth_check_html": {
        "prefix": "wp_auth_check_html",
        "body": "wp_auth_check_html(  )",
        "description": "Output the HTML that shows the wp-login dialog when the user is no longer logged in."
    },
    "Function: wp_auth_check_load": {
        "prefix": "wp_auth_check_load",
        "body": "wp_auth_check_load(  )",
        "description": "Load the auth check for monitoring whether the user is still logged in."
    },
    "Function: wp_authenticate": {
        "prefix": "wp_authenticate",
        "body": "wp_authenticate( ${1:\\$username:string}, ${2:\\$password:string} )",
        "description": "Authenticate a user, confirming the login credentials are valid."
    },
    "Function: wp_authenticate_cookie": {
        "prefix": "wp_authenticate_cookie",
        "body": "wp_authenticate_cookie( ${1:\\$user:WP_User|WP_Error|null}, ${2:\\$username:string}, ${3:\\$password:string} )",
        "description": "Authenticate the user using the WordPress auth cookie."
    },
    "Function: wp_authenticate_email_password": {
        "prefix": "wp_authenticate_email_password",
        "body": "wp_authenticate_email_password( ${1:\\$user:WP_User|WP_Error|null}, ${2:\\$email:string}, ${3:\\$password:string} )",
        "description": "Authenticates a user using the email and password."
    },
    "Function: wp_authenticate_spam_check": {
        "prefix": "wp_authenticate_spam_check",
        "body": "wp_authenticate_spam_check( ${1:\\$user:WP_User|WP_Error|null} )",
        "description": "For Multisite blogs, check if the authenticated user has been marked as a spammer, or if the user&#039;s primary blog has been marked as spam."
    },
    "Function: wp_authenticate_username_password": {
        "prefix": "wp_authenticate_username_password",
        "body": "wp_authenticate_username_password( ${1:\\$user:WP_User|WP_Error|null}, ${2:\\$username:string}, ${3:\\$password:string} )",
        "description": "Authenticate a user, confirming the username and password are valid."
    },
    "Function: wp_autosave": {
        "prefix": "wp_autosave",
        "body": "wp_autosave( ${1:\\$post_data:array} )",
        "description": "Save a post submitted with XHR"
    },
    "Function: wp_basename": {
        "prefix": "wp_basename",
        "body": "wp_basename( ${1:\\$path:string}, ${2:\\$suffix:string} )",
        "description": "i18n friendly version of basename()"
    },
    "Function: wp_blacklist_check": {
        "prefix": "wp_blacklist_check",
        "body": "wp_blacklist_check( ${1:\\$author:string}, ${2:\\$email:string}, ${3:\\$url:string}, ${4:\\$comment:string}, ${5:\\$user_ip:string}, ${6:\\$user_agent:string} )",
        "description": "Does comment contain blacklisted characters or words."
    },
    "Function: wp_cache_add": {
        "prefix": "wp_cache_add",
        "body": "wp_cache_add( ${1:\\$key:integer|string}, ${2:\\$data:mixed}, ${3:\\$group:string}, ${4:\\$expire:integer} )",
        "description": "Adds data to the cache, if the cache key doesn&#039;t already exist."
    },
    "Function: wp_cache_add_global_groups": {
        "prefix": "wp_cache_add_global_groups",
        "body": "wp_cache_add_global_groups( ${1:\\$groups:string|array} )",
        "description": "Adds a group or set of groups to the list of global groups."
    },
    "Function: wp_cache_add_non_persistent_groups": {
        "prefix": "wp_cache_add_non_persistent_groups",
        "body": "wp_cache_add_non_persistent_groups( ${1:\\$groups:string|array} )",
        "description": "Adds a group or set of groups to the list of non-persistent groups."
    },
    "Function: wp_cache_close": {
        "prefix": "wp_cache_close",
        "body": "wp_cache_close(  )",
        "description": "Closes the cache."
    },
    "Function: wp_cache_decr": {
        "prefix": "wp_cache_decr",
        "body": "wp_cache_decr( ${1:\\$key:integer|string}, ${2:\\$offset:integer}, ${3:\\$group:string} )",
        "description": "Decrements numeric cache item&#039;s value."
    },
    "Function: wp_cache_delete": {
        "prefix": "wp_cache_delete",
        "body": "wp_cache_delete( ${1:\\$key:integer|string}, ${2:\\$group:string} )",
        "description": "Removes the cache contents matching key and group."
    },
    "Function: wp_cache_flush": {
        "prefix": "wp_cache_flush",
        "body": "wp_cache_flush(  )",
        "description": "Removes all cache items."
    },
    "Function: wp_cache_get": {
        "prefix": "wp_cache_get",
        "body": "wp_cache_get( ${1:\\$key:integer|string}, ${2:\\$group:string}, ${3:\\$force:boolean}, ${4:\\$found:boolean|null} )",
        "description": "Retrieves the cache contents from the cache by key and group."
    },
    "Function: wp_cache_get_last_changed": {
        "prefix": "wp_cache_get_last_changed",
        "body": "wp_cache_get_last_changed( ${1:\\$group:string} )",
        "description": "Get last changed date for the specified cache group."
    },
    "Function: wp_cache_incr": {
        "prefix": "wp_cache_incr",
        "body": "wp_cache_incr( ${1:\\$key:integer|string}, ${2:\\$offset:integer}, ${3:\\$group:string} )",
        "description": "Increment numeric cache item&#039;s value"
    },
    "Function: wp_cache_init": {
        "prefix": "wp_cache_init",
        "body": "wp_cache_init(  )",
        "description": "Sets up Object Cache Global and assigns it."
    },
    "Function: wp_cache_replace": {
        "prefix": "wp_cache_replace",
        "body": "wp_cache_replace( ${1:\\$key:integer|string}, ${2:\\$data:mixed}, ${3:\\$group:string}, ${4:\\$expire:integer} )",
        "description": "Replaces the contents of the cache with new data."
    },
    "Function: wp_cache_reset": {
        "prefix": "wp_cache_reset",
        "body": "wp_cache_reset(  )",
        "description": "Reset internal cache keys and structures."
    },
    "Function: wp_cache_set": {
        "prefix": "wp_cache_set",
        "body": "wp_cache_set( ${1:\\$key:integer|string}, ${2:\\$data:mixed}, ${3:\\$group:string}, ${4:\\$expire:integer} )",
        "description": "Saves the data to the cache."
    },
    "Function: wp_cache_switch_to_blog": {
        "prefix": "wp_cache_switch_to_blog",
        "body": "wp_cache_switch_to_blog( ${1:\\$blog_id:integer} )",
        "description": "Switches the internal blog ID."
    },
    "Function: wp_calculate_image_sizes": {
        "prefix": "wp_calculate_image_sizes",
        "body": "wp_calculate_image_sizes( ${1:\\$size:array|string}, ${2:\\$image_src:string|null}, ${3:\\$image_meta:array|null}, ${4:\\$attachment_id:integer} )",
        "description": "Creates a &#039;sizes&#039; attribute value for an image."
    },
    "Function: wp_calculate_image_srcset": {
        "prefix": "wp_calculate_image_srcset",
        "body": "wp_calculate_image_srcset( ${1:\\$size_array:array}, ${2:\\$image_src:string}, ${3:\\$image_meta:array}, ${4:\\$attachment_id:integer} )",
        "description": "A helper function to calculate the image sources to include in a &#039;srcset&#039; attribute."
    },
    "Function: wp_can_install_language_pack": {
        "prefix": "wp_can_install_language_pack",
        "body": "wp_can_install_language_pack(  )",
        "description": "Check if WordPress has access to the filesystem without asking for credentials."
    },
    "Function: wp_caption_input_textarea": {
        "prefix": "wp_caption_input_textarea",
        "body": "wp_caption_input_textarea( ${1:\\$edit_post:WP_Post} )",
        "description": "Output a textarea element for inputting an attachment caption."
    },
    "Function: wp_category_checklist": {
        "prefix": "wp_category_checklist",
        "body": "wp_category_checklist( ${1:\\$post_id:integer}, ${2:\\$descendants_and_self:integer}, ${3:\\$selected_cats:array}, ${4:\\$popular_cats:array}, ${5:\\$walker:object|null}, ${6:\\$checked_ontop:boolean} )",
        "description": "Output an unordered list of checkbox input elements labeled with category names."
    },
    "Function: wp_check_browser_version": {
        "prefix": "wp_check_browser_version",
        "body": "wp_check_browser_version(  )",
        "description": "Check if the user needs a browser update"
    },
    "Function: wp_check_comment_data_max_lengths": {
        "prefix": "wp_check_comment_data_max_lengths",
        "body": "wp_check_comment_data_max_lengths( ${1:\\$comment_data:array} )",
        "description": "Compares the lengths of comment data against the maximum character limits."
    },
    "Function: wp_check_comment_flood": {
        "prefix": "wp_check_comment_flood",
        "body": "wp_check_comment_flood( ${1:\\$is_flood:boolean}, ${2:\\$ip:string}, ${3:\\$email:string}, ${4:\\$date:string}, ${5:\\$avoid_die:boolean} )",
        "description": "Checks whether comment flooding is occurring."
    },
    "Function: wp_check_filetype": {
        "prefix": "wp_check_filetype",
        "body": "wp_check_filetype( ${1:\\$filename:string}, ${2:\\$mimes:array|null} )",
        "description": "Retrieve the file type from the file name."
    },
    "Function: wp_check_filetype_and_ext": {
        "prefix": "wp_check_filetype_and_ext",
        "body": "wp_check_filetype_and_ext( ${1:\\$file:string}, ${2:\\$filename:string}, ${3:\\$mimes:array|null} )",
        "description": "Attempt to determine the real file type of a file."
    },
    "Function: wp_check_for_changed_dates": {
        "prefix": "wp_check_for_changed_dates",
        "body": "wp_check_for_changed_dates( ${1:\\$post_id:integer}, ${2:\\$post:WP_Post}, ${3:\\$post_before:WP_Post} )",
        "description": "Check for changed dates for published post objects and save the old date."
    },
    "Function: wp_check_for_changed_slugs": {
        "prefix": "wp_check_for_changed_slugs",
        "body": "wp_check_for_changed_slugs( ${1:\\$post_id:integer}, ${2:\\$post:WP_Post}, ${3:\\$post_before:WP_Post} )",
        "description": "Check for changed slugs for published post objects and save the old slug."
    },
    "Function: wp_check_invalid_utf8": {
        "prefix": "wp_check_invalid_utf8",
        "body": "wp_check_invalid_utf8( ${1:\\$string:string}, ${2:\\$strip:boolean} )",
        "description": "Checks for invalid UTF8 in a string."
    },
    "Function: wp_check_jsonp_callback": {
        "prefix": "wp_check_jsonp_callback",
        "body": "wp_check_jsonp_callback( ${1:\\$callback:string} )",
        "description": "Checks that a JSONP callback is a valid JavaScript callback."
    },
    "Function: wp_check_locked_posts": {
        "prefix": "wp_check_locked_posts",
        "body": "wp_check_locked_posts( ${1:\\$response:array}, ${2:\\$data:array}, ${3:\\$screen_id:string} )",
        "description": "Check lock status for posts displayed on the Posts screen"
    },
    "Function: wp_check_mysql_version": {
        "prefix": "wp_check_mysql_version",
        "body": "wp_check_mysql_version(  )",
        "description": "Checks the version of the installed MySQL binary."
    },
    "Function: wp_check_password": {
        "prefix": "wp_check_password",
        "body": "wp_check_password( ${1:\\$password:string}, ${2:\\$hash:string}, ${3:\\$user_id:string|integer} )",
        "description": "Checks the plaintext password against the encrypted Password."
    },
    "Function: wp_check_php_mysql_versions": {
        "prefix": "wp_check_php_mysql_versions",
        "body": "wp_check_php_mysql_versions(  )",
        "description": "Check for the required PHP version, and the MySQL extension or a database drop-in."
    },
    "Function: wp_check_post_hierarchy_for_loops": {
        "prefix": "wp_check_post_hierarchy_for_loops",
        "body": "wp_check_post_hierarchy_for_loops( ${1:\\$post_parent:integer}, ${2:\\$post_ID:integer} )",
        "description": "Check the given subset of the post hierarchy for hierarchy loops."
    },
    "Function: wp_check_post_lock": {
        "prefix": "wp_check_post_lock",
        "body": "wp_check_post_lock( ${1:\\$post_id:integer} )",
        "description": "Check to see if the post is currently being edited by another user."
    },
    "Function: wp_check_term_hierarchy_for_loops": {
        "prefix": "wp_check_term_hierarchy_for_loops",
        "body": "wp_check_term_hierarchy_for_loops( ${1:\\$parent:integer}, ${2:\\$term_id:integer}, ${3:\\$taxonomy:string} )",
        "description": "Checks the given subset of the term hierarchy for hierarchy loops."
    },
    "Function: wp_checkdate": {
        "prefix": "wp_checkdate",
        "body": "wp_checkdate( ${1:\\$month:integer}, ${2:\\$day:integer}, ${3:\\$year:integer}, ${4:\\$source_date:string} )",
        "description": "Test if the supplied date is valid for the Gregorian calendar."
    },
    "Function: wp_clean_plugins_cache": {
        "prefix": "wp_clean_plugins_cache",
        "body": "wp_clean_plugins_cache( ${1:\\$clear_update_cache:boolean} )",
        "description": "Clears the Plugins cache used by get_plugins() and by default, the Plugin Update cache."
    },
    "Function: wp_clean_themes_cache": {
        "prefix": "wp_clean_themes_cache",
        "body": "wp_clean_themes_cache( ${1:\\$clear_update_cache:boolean} )",
        "description": "Clears the cache held by get_theme_roots() and WP_Theme."
    },
    "Function: wp_clean_update_cache": {
        "prefix": "wp_clean_update_cache",
        "body": "wp_clean_update_cache(  )",
        "description": "Clear existing update caches for plugins, themes, and core."
    },
    "Function: wp_clear_auth_cookie": {
        "prefix": "wp_clear_auth_cookie",
        "body": "wp_clear_auth_cookie(  )",
        "description": "Removes all of the cookies associated with authentication."
    },
    "Function: wp_clear_scheduled_hook": {
        "prefix": "wp_clear_scheduled_hook",
        "body": "wp_clear_scheduled_hook( ${1:\\$hook:string}, ${2:\\$args:array} )",
        "description": "Unschedules all events attached to the hook with the specified arguments."
    },
    "Function: wp_clearcookie": {
        "prefix": "wp_clearcookie",
        "body": "wp_clearcookie(  )",
        "description": "Clears the authentication cookie, logging the user out. This function is deprecated."
    },
    "Function: wp_clone": {
        "prefix": "wp_clone",
        "body": "wp_clone( ${1:\\$object:object} )",
        "description": "Copy an object."
    },
    "Function: wp_color_scheme_settings": {
        "prefix": "wp_color_scheme_settings",
        "body": "wp_color_scheme_settings(  )",
        "description": ""
    },
    "Function: wp_comment_form_unfiltered_html_nonce": {
        "prefix": "wp_comment_form_unfiltered_html_nonce",
        "body": "wp_comment_form_unfiltered_html_nonce(  )",
        "description": "Display form token for unfiltered comments."
    },
    "Function: wp_comment_reply": {
        "prefix": "wp_comment_reply",
        "body": "wp_comment_reply( ${1:\\$position:integer}, ${2:\\$checkbox:boolean}, ${3:\\$mode:string}, ${4:\\$table_row:boolean} )",
        "description": "Outputs the in-line comment reply-to form in the Comments list table."
    },
    "Function: wp_comment_trashnotice": {
        "prefix": "wp_comment_trashnotice",
        "body": "wp_comment_trashnotice(  )",
        "description": "Output &#039;undo move to trash&#039; text for comments"
    },
    "Function: wp_comments_personal_data_eraser": {
        "prefix": "wp_comments_personal_data_eraser",
        "body": "wp_comments_personal_data_eraser( ${1:\\$email_address:string}, ${2:\\$page:integer} )",
        "description": "Erases personal data associated with an email address from the comments table."
    },
    "Function: wp_comments_personal_data_exporter": {
        "prefix": "wp_comments_personal_data_exporter",
        "body": "wp_comments_personal_data_exporter( ${1:\\$email_address:string}, ${2:\\$page:integer} )",
        "description": "Finds and exports personal data associated with an email address from the comments table."
    },
    "Function: wp_constrain_dimensions": {
        "prefix": "wp_constrain_dimensions",
        "body": "wp_constrain_dimensions( ${1:\\$current_width:integer}, ${2:\\$current_height:integer}, ${3:\\$max_width:integer}, ${4:\\$max_height:integer} )",
        "description": "Calculates the new dimensions for a down-sampled image."
    },
    "Function: wp_convert_bytes_to_hr": {
        "prefix": "wp_convert_bytes_to_hr",
        "body": "wp_convert_bytes_to_hr( ${1:\\$bytes:integer} )",
        "description": "Converts an integer byte value to a shorthand byte value."
    },
    "Function: wp_convert_hr_to_bytes": {
        "prefix": "wp_convert_hr_to_bytes",
        "body": "wp_convert_hr_to_bytes( ${1:\\$value:string} )",
        "description": "Converts a shorthand byte value to an integer byte value."
    },
    "Function: wp_convert_widget_settings": {
        "prefix": "wp_convert_widget_settings",
        "body": "wp_convert_widget_settings( ${1:\\$base_name:string}, ${2:\\$option_name:string}, ${3:\\$settings:array} )",
        "description": "Convert the widget settings from single to multi-widget format."
    },
    "Function: wp_cookie_constants": {
        "prefix": "wp_cookie_constants",
        "body": "wp_cookie_constants(  )",
        "description": "Defines cookie related WordPress constants"
    },
    "Function: wp_count_attachments": {
        "prefix": "wp_count_attachments",
        "body": "wp_count_attachments( ${1:\\$mime_type:string|array} )",
        "description": "Count number of attachments for the mime type(s)."
    },
    "Function: wp_count_comments": {
        "prefix": "wp_count_comments",
        "body": "wp_count_comments( ${1:\\$post_id:integer} )",
        "description": "Retrieve total comments for blog or single post."
    },
    "Function: wp_count_posts": {
        "prefix": "wp_count_posts",
        "body": "wp_count_posts( ${1:\\$type:string}, ${2:\\$perm:string} )",
        "description": "Count number of posts of a post type and if user has permissions to view."
    },
    "Function: wp_count_terms": {
        "prefix": "wp_count_terms",
        "body": "wp_count_terms( ${1:\\$taxonomy:string}, ${2:\\$args:array|string} )",
        "description": "Count how many terms are in Taxonomy."
    },
    "Function: wp_create_categories": {
        "prefix": "wp_create_categories",
        "body": "wp_create_categories( ${1:\\$categories:array}, ${2:\\$post_id:integer} )",
        "description": "Create categories for the given post."
    },
    "Function: wp_create_category": {
        "prefix": "wp_create_category",
        "body": "wp_create_category( ${1:\\$cat_name:integer|string}, ${2:\\$parent:integer} )",
        "description": "Add a new category to the database if it does not already exist."
    },
    "Function: wp_create_nav_menu": {
        "prefix": "wp_create_nav_menu",
        "body": "wp_create_nav_menu( ${1:\\$menu_name:string} )",
        "description": "Creates a navigation menu."
    },
    "Function: wp_create_nonce": {
        "prefix": "wp_create_nonce",
        "body": "wp_create_nonce( ${1:\\$action:string|integer} )",
        "description": "Creates a cryptographic token tied to a specific action, user, user session, and window of time."
    },
    "Function: wp_create_post_autosave": {
        "prefix": "wp_create_post_autosave",
        "body": "wp_create_post_autosave( ${1:\\$post_data:mixed} )",
        "description": "Creates autosave data for the specified post from $_POST data."
    },
    "Function: wp_create_tag": {
        "prefix": "wp_create_tag",
        "body": "wp_create_tag( ${1:\\$tag_name:integer|string} )",
        "description": "Add a new tag to the database if it does not already exist."
    },
    "Function: wp_create_term": {
        "prefix": "wp_create_term",
        "body": "wp_create_term( ${1:\\$tag_name:integer|string}, ${2:\\$taxonomy:string} )",
        "description": "Add a new term to the database if it does not already exist."
    },
    "Function: wp_create_thumbnail": {
        "prefix": "wp_create_thumbnail",
        "body": "wp_create_thumbnail( ${1:\\$file:mixed}, ${2:\\$max_side:integer}, ${3:\\$deprecated:mixed} )",
        "description": "This was once used to create a thumbnail from an Image given a maximum side size."
    },
    "Function: wp_create_user": {
        "prefix": "wp_create_user",
        "body": "wp_create_user( ${1:\\$username:string}, ${2:\\$password:string}, ${3:\\$email:string} )",
        "description": "A simpler way of inserting a user into the database."
    },
    "Function: wp_create_user_request": {
        "prefix": "wp_create_user_request",
        "body": "wp_create_user_request( ${1:\\$email_address:string}, ${2:\\$action_name:string}, ${3:\\$request_data:array} )",
        "description": "Create and log a user request to perform a specific action."
    },
    "Function: wp_credits": {
        "prefix": "wp_credits",
        "body": "wp_credits(  )",
        "description": "Retrieve the contributor credits."
    },
    "Function: wp_cron": {
        "prefix": "wp_cron",
        "body": "wp_cron(  )",
        "description": "Run scheduled callbacks or spawn cron for all scheduled events."
    },
    "Function: wp_crop_image": {
        "prefix": "wp_crop_image",
        "body": "wp_crop_image( ${1:\\$src:string|integer}, ${2:\\$src_x:integer}, ${3:\\$src_y:integer}, ${4:\\$src_w:integer}, ${5:\\$src_h:integer}, ${6:\\$dst_w:integer}, ${7:\\$dst_h:integer}, ${8:\\$src_abs:integer}, ${9:\\$dst_file:string} )",
        "description": "Crop an Image to a given size."
    },
    "Function: wp_custom_css_cb": {
        "prefix": "wp_custom_css_cb",
        "body": "wp_custom_css_cb(  )",
        "description": "Render the Custom CSS style element."
    },
    "Function: wp_customize_support_script": {
        "prefix": "wp_customize_support_script",
        "body": "wp_customize_support_script(  )",
        "description": "Prints a script to check whether or not the Customizer is supported, and apply either the no-customize-support or customize-support class to the body."
    },
    "Function: wp_customize_url": {
        "prefix": "wp_customize_url",
        "body": "wp_customize_url( ${1:\\$stylesheet:string|null} )",
        "description": "Returns a URL to load the Customizer."
    },
    "Function: wp_dashboard": {
        "prefix": "wp_dashboard",
        "body": "wp_dashboard(  )",
        "description": "Displays the dashboard."
    },
    "Function: wp_dashboard_browser_nag": {
        "prefix": "wp_dashboard_browser_nag",
        "body": "wp_dashboard_browser_nag(  )",
        "description": ""
    },
    "Function: wp_dashboard_cached_rss_widget": {
        "prefix": "wp_dashboard_cached_rss_widget",
        "body": "wp_dashboard_cached_rss_widget( ${1:\\$widget_id:string}, ${2:\\$callback:callable}, ${3:\\$check_urls:array} )",
        "description": "Checks to see if all of the feed url in $check_urls are cached."
    },
    "Function: wp_dashboard_empty": {
        "prefix": "wp_dashboard_empty",
        "body": "wp_dashboard_empty(  )",
        "description": "Empty function usable by plugins to output empty dashboard widget (to be populated later by JS)."
    },
    "Function: wp_dashboard_events_news": {
        "prefix": "wp_dashboard_events_news",
        "body": "wp_dashboard_events_news(  )",
        "description": "Renders the Events and News dashboard widget."
    },
    "Function: wp_dashboard_incoming_links": {
        "prefix": "wp_dashboard_incoming_links",
        "body": "wp_dashboard_incoming_links(  )",
        "description": "Deprecated dashboard widget controls."
    },
    "Function: wp_dashboard_incoming_links_control": {
        "prefix": "wp_dashboard_incoming_links_control",
        "body": "wp_dashboard_incoming_links_control(  )",
        "description": "Deprecated dashboard incoming links control."
    },
    "Function: wp_dashboard_incoming_links_output": {
        "prefix": "wp_dashboard_incoming_links_output",
        "body": "wp_dashboard_incoming_links_output(  )",
        "description": "Deprecated dashboard widget controls."
    },
    "Function: wp_dashboard_plugins": {
        "prefix": "wp_dashboard_plugins",
        "body": "wp_dashboard_plugins(  )",
        "description": "Deprecated dashboard plugins control."
    },
    "Function: wp_dashboard_plugins_output": {
        "prefix": "wp_dashboard_plugins_output",
        "body": "wp_dashboard_plugins_output( ${1:\\$rss:string}, ${2:\\$args:array} )",
        "description": "Display plugins text for the WordPress news widget."
    },
    "Function: wp_dashboard_primary": {
        "prefix": "wp_dashboard_primary",
        "body": "wp_dashboard_primary(  )",
        "description": "WordPress News dashboard widget."
    },
    "Function: wp_dashboard_primary_control": {
        "prefix": "wp_dashboard_primary_control",
        "body": "wp_dashboard_primary_control(  )",
        "description": "Deprecated dashboard primary control."
    },
    "Function: wp_dashboard_primary_output": {
        "prefix": "wp_dashboard_primary_output",
        "body": "wp_dashboard_primary_output( ${1:\\$widget_id:string}, ${2:\\$feeds:array} )",
        "description": "Display the WordPress news feeds."
    },
    "Function: wp_dashboard_quick_press": {
        "prefix": "wp_dashboard_quick_press",
        "body": "wp_dashboard_quick_press( ${1:\\$error_msg:string} )",
        "description": "The Quick Draft widget display and creation of drafts."
    },
    "Function: wp_dashboard_quick_press_output": {
        "prefix": "wp_dashboard_quick_press_output",
        "body": "wp_dashboard_quick_press_output(  )",
        "description": "Output the QuickPress dashboard widget."
    },
    "Function: wp_dashboard_quota": {
        "prefix": "wp_dashboard_quota",
        "body": "wp_dashboard_quota(  )",
        "description": "Display file upload quota on dashboard."
    },
    "Function: wp_dashboard_recent_comments": {
        "prefix": "wp_dashboard_recent_comments",
        "body": "wp_dashboard_recent_comments( ${1:\\$total_items:integer} )",
        "description": "Show Comments section."
    },
    "Function: wp_dashboard_recent_comments_control": {
        "prefix": "wp_dashboard_recent_comments_control",
        "body": "wp_dashboard_recent_comments_control(  )",
        "description": "Deprecated dashboard recent comments control."
    },
    "Function: wp_dashboard_recent_drafts": {
        "prefix": "wp_dashboard_recent_drafts",
        "body": "wp_dashboard_recent_drafts( ${1:\\$drafts:array} )",
        "description": "Show recent drafts of the user on the dashboard."
    },
    "Function: wp_dashboard_recent_posts": {
        "prefix": "wp_dashboard_recent_posts",
        "body": "wp_dashboard_recent_posts( ${1:\\$args:array} )",
        "description": "Generates Publishing Soon and Recently Published sections."
    },
    "Function: wp_dashboard_right_now": {
        "prefix": "wp_dashboard_right_now",
        "body": "wp_dashboard_right_now(  )",
        "description": "Dashboard widget that displays some basic stats about the site."
    },
    "Function: wp_dashboard_rss_control": {
        "prefix": "wp_dashboard_rss_control",
        "body": "wp_dashboard_rss_control( ${1:\\$widget_id:string}, ${2:\\$form_inputs:array} )",
        "description": "The RSS dashboard widget control."
    },
    "Function: wp_dashboard_rss_output": {
        "prefix": "wp_dashboard_rss_output",
        "body": "wp_dashboard_rss_output( ${1:\\$widget_id:string} )",
        "description": "Display generic dashboard RSS widget feed."
    },
    "Function: wp_dashboard_secondary": {
        "prefix": "wp_dashboard_secondary",
        "body": "wp_dashboard_secondary(  )",
        "description": "Deprecated dashboard secondary section."
    },
    "Function: wp_dashboard_secondary_control": {
        "prefix": "wp_dashboard_secondary_control",
        "body": "wp_dashboard_secondary_control(  )",
        "description": "Deprecated dashboard secondary control."
    },
    "Function: wp_dashboard_secondary_output": {
        "prefix": "wp_dashboard_secondary_output",
        "body": "wp_dashboard_secondary_output(  )",
        "description": "Deprecated dashboard secondary output."
    },
    "Function: wp_dashboard_setup": {
        "prefix": "wp_dashboard_setup",
        "body": "wp_dashboard_setup(  )",
        "description": "Registers dashboard widgets."
    },
    "Function: wp_dashboard_site_activity": {
        "prefix": "wp_dashboard_site_activity",
        "body": "wp_dashboard_site_activity(  )",
        "description": "Callback function for Activity widget."
    },
    "Function: wp_dashboard_trigger_widget_control": {
        "prefix": "wp_dashboard_trigger_widget_control",
        "body": "wp_dashboard_trigger_widget_control( ${1:\\$widget_control_id:integer} )",
        "description": "Calls widget control callback."
    },
    "Function: wp_debug_backtrace_summary": {
        "prefix": "wp_debug_backtrace_summary",
        "body": "wp_debug_backtrace_summary( ${1:\\$ignore_class:string|null}, ${2:\\$skip_frames:integer}, ${3:\\$pretty:boolean} )",
        "description": "Return a comma-separated string of functions that have been called to get to the current point in code."
    },
    "Function: wp_debug_mode": {
        "prefix": "wp_debug_mode",
        "body": "wp_debug_mode(  )",
        "description": "Set PHP error reporting based on WordPress debug settings."
    },
    "Function: wp_default_editor": {
        "prefix": "wp_default_editor",
        "body": "wp_default_editor(  )",
        "description": "Find out which editor should be displayed by default."
    },
    "Function: wp_default_scripts": {
        "prefix": "wp_default_scripts",
        "body": "wp_default_scripts( ${1:\\$scripts:WP_Scripts} )",
        "description": "Register all WordPress scripts."
    },
    "Function: wp_default_styles": {
        "prefix": "wp_default_styles",
        "body": "wp_default_styles( ${1:\\$styles:WP_Styles} )",
        "description": "Assign default styles to $styles object."
    },
    "Function: wp_defer_comment_counting": {
        "prefix": "wp_defer_comment_counting",
        "body": "wp_defer_comment_counting( ${1:\\$defer:boolean|null} )",
        "description": "Whether to defer comment counting."
    },
    "Function: wp_defer_term_counting": {
        "prefix": "wp_defer_term_counting",
        "body": "wp_defer_term_counting( ${1:\\$defer:boolean|null} )",
        "description": "Enable or disable term counting."
    },
    "Function: wp_delete_attachment": {
        "prefix": "wp_delete_attachment",
        "body": "wp_delete_attachment( ${1:\\$post_id:integer}, ${2:\\$force_delete:boolean} )",
        "description": "Trash or delete an attachment."
    },
    "Function: wp_delete_auto_drafts": {
        "prefix": "wp_delete_auto_drafts",
        "body": "wp_delete_auto_drafts(  )",
        "description": "Delete auto-drafts for new posts that are &gt; 7 days old."
    },
    "Function: wp_delete_category": {
        "prefix": "wp_delete_category",
        "body": "wp_delete_category( ${1:\\$cat_ID:integer} )",
        "description": "Deletes one existing category."
    },
    "Function: wp_delete_comment": {
        "prefix": "wp_delete_comment",
        "body": "wp_delete_comment( ${1:\\$comment_id:integer|WP_Comment}, ${2:\\$force_delete:boolean} )",
        "description": "Trashes or deletes a comment."
    },
    "Function: wp_delete_file": {
        "prefix": "wp_delete_file",
        "body": "wp_delete_file( ${1:\\$file:string} )",
        "description": "Delete a file"
    },
    "Function: wp_delete_link": {
        "prefix": "wp_delete_link",
        "body": "wp_delete_link( ${1:\\$link_id:integer} )",
        "description": "Deletes a specified link from the database."
    },
    "Function: wp_delete_nav_menu": {
        "prefix": "wp_delete_nav_menu",
        "body": "wp_delete_nav_menu( ${1:\\$menu:integer|string|WP_Term} )",
        "description": "Delete a Navigation Menu."
    },
    "Function: wp_delete_object_term_relationships": {
        "prefix": "wp_delete_object_term_relationships",
        "body": "wp_delete_object_term_relationships( ${1:\\$object_id:integer}, ${2:\\$taxonomies:string|array} )",
        "description": "Will unlink the object from the taxonomy or taxonomies."
    },
    "Function: wp_delete_post": {
        "prefix": "wp_delete_post",
        "body": "wp_delete_post( ${1:\\$postid:integer}, ${2:\\$force_delete:boolean} )",
        "description": "Trash or delete a post or page."
    },
    "Function: wp_delete_post_revision": {
        "prefix": "wp_delete_post_revision",
        "body": "wp_delete_post_revision( ${1:\\$revision_id:integer|WP_Post} )",
        "description": "Deletes a revision."
    },
    "Function: wp_delete_term": {
        "prefix": "wp_delete_term",
        "body": "wp_delete_term( ${1:\\$term:integer}, ${2:\\$taxonomy:string}, ${3:\\$args:array|string} )",
        "description": "Removes a term from the database."
    },
    "Function: wp_delete_user": {
        "prefix": "wp_delete_user",
        "body": "wp_delete_user( ${1:\\$id:integer}, ${2:\\$reassign:integer|null} )",
        "description": "Remove user and optionally reassign posts and links to another user."
    },
    "Function: wp_dependencies_unique_hosts": {
        "prefix": "wp_dependencies_unique_hosts",
        "body": "wp_dependencies_unique_hosts(  )",
        "description": "Retrieves a list of unique hosts of all enqueued scripts and styles."
    },
    "Function: wp_dequeue_script": {
        "prefix": "wp_dequeue_script",
        "body": "wp_dequeue_script( ${1:\\$handle:string} )",
        "description": "Remove a previously enqueued script."
    },
    "Function: wp_dequeue_style": {
        "prefix": "wp_dequeue_style",
        "body": "wp_dequeue_style( ${1:\\$handle:string} )",
        "description": "Remove a previously enqueued CSS stylesheet."
    },
    "Function: wp_deregister_script": {
        "prefix": "wp_deregister_script",
        "body": "wp_deregister_script( ${1:\\$handle:string} )",
        "description": "Remove a registered script."
    },
    "Function: wp_deregister_style": {
        "prefix": "wp_deregister_style",
        "body": "wp_deregister_style( ${1:\\$handle:string} )",
        "description": "Remove a registered stylesheet."
    },
    "Function: wp_destroy_all_sessions": {
        "prefix": "wp_destroy_all_sessions",
        "body": "wp_destroy_all_sessions(  )",
        "description": "Remove all session tokens for the current user from the database."
    },
    "Function: wp_destroy_current_session": {
        "prefix": "wp_destroy_current_session",
        "body": "wp_destroy_current_session(  )",
        "description": "Remove the current session token from the database."
    },
    "Function: wp_destroy_other_sessions": {
        "prefix": "wp_destroy_other_sessions",
        "body": "wp_destroy_other_sessions(  )",
        "description": "Remove all but the current session token for the current user for the database."
    },
    "Function: wp_die": {
        "prefix": "wp_die",
        "body": "wp_die( ${1:\\$message:string|WP_Error}, ${2:\\$title:string|integer}, ${3:\\$args:string|array|integer} )",
        "description": "Kill WordPress execution and display HTML message with error message."
    },
    "Function: wp_doc_link_parse": {
        "prefix": "wp_doc_link_parse",
        "body": "wp_doc_link_parse( ${1:\\$content:string} )",
        "description": ""
    },
    "Function: wp_doing_ajax": {
        "prefix": "wp_doing_ajax",
        "body": "wp_doing_ajax(  )",
        "description": "Determines whether the current request is a WordPress Ajax request."
    },
    "Function: wp_doing_cron": {
        "prefix": "wp_doing_cron",
        "body": "wp_doing_cron(  )",
        "description": "Determines whether the current request is a WordPress cron request."
    },
    "Function: wp_download_language_pack": {
        "prefix": "wp_download_language_pack",
        "body": "wp_download_language_pack( ${1:\\$download:string} )",
        "description": "Download a language pack."
    },
    "Function: wp_dropdown_categories": {
        "prefix": "wp_dropdown_categories",
        "body": "wp_dropdown_categories( ${1:\\$args:string|array} )",
        "description": "Display or retrieve the HTML dropdown list of categories."
    },
    "Function: wp_dropdown_cats": {
        "prefix": "wp_dropdown_cats",
        "body": "wp_dropdown_cats( ${1:\\$currentcat:integer}, ${2:\\$currentparent:integer}, ${3:\\$parent:integer}, ${4:\\$level:integer}, ${5:\\$categories:array} )",
        "description": "Legacy function used for generating a categories drop-down control."
    },
    "Function: wp_dropdown_languages": {
        "prefix": "wp_dropdown_languages",
        "body": "wp_dropdown_languages( ${1:\\$args:string|array} )",
        "description": "Language selector."
    },
    "Function: wp_dropdown_pages": {
        "prefix": "wp_dropdown_pages",
        "body": "wp_dropdown_pages( ${1:\\$args:array|string} )",
        "description": "Retrieve or display list of pages as a dropdown (select list)."
    },
    "Function: wp_dropdown_roles": {
        "prefix": "wp_dropdown_roles",
        "body": "wp_dropdown_roles( ${1:\\$selected:string} )",
        "description": "Print out option html elements for role selectors."
    },
    "Function: wp_dropdown_users": {
        "prefix": "wp_dropdown_users",
        "body": "wp_dropdown_users( ${1:\\$args:array|string} )",
        "description": "Create dropdown HTML content of users."
    },
    "Function: wp_edit_attachments_query": {
        "prefix": "wp_edit_attachments_query",
        "body": "wp_edit_attachments_query( ${1:\\$q:array|false} )",
        "description": "Executes a query for attachments. An array of WP_Query arguments can be passed in, which will override the arguments set by this function."
    },
    "Function: wp_edit_attachments_query_vars": {
        "prefix": "wp_edit_attachments_query_vars",
        "body": "wp_edit_attachments_query_vars( ${1:\\$q:array|false} )",
        "description": "Get the query variables for the current attachments request."
    },
    "Function: wp_edit_posts_query": {
        "prefix": "wp_edit_posts_query",
        "body": "wp_edit_posts_query( ${1:\\$q:array|boolean} )",
        "description": "Run the wp query to fetch the posts for listing on the edit posts page"
    },
    "Function: wp_edit_theme_plugin_file": {
        "prefix": "wp_edit_theme_plugin_file",
        "body": "wp_edit_theme_plugin_file( ${1:\\$args:array} )",
        "description": "Attempt to edit a file for a theme or plugin."
    },
    "Function: wp_editor": {
        "prefix": "wp_editor",
        "body": "wp_editor( ${1:\\$content:string}, ${2:\\$editor_id:string}, ${3:\\$settings:array} )",
        "description": "Renders an editor."
    },
    "Function: wp_embed_defaults": {
        "prefix": "wp_embed_defaults",
        "body": "wp_embed_defaults( ${1:\\$url:string} )",
        "description": "Creates default array of embed parameters."
    },
    "Function: wp_embed_excerpt_attachment": {
        "prefix": "wp_embed_excerpt_attachment",
        "body": "wp_embed_excerpt_attachment( ${1:\\$content:string} )",
        "description": "Filters the post excerpt for the embed template."
    },
    "Function: wp_embed_excerpt_more": {
        "prefix": "wp_embed_excerpt_more",
        "body": "wp_embed_excerpt_more( ${1:\\$more_string:string} )",
        "description": "Filters the string in the &#039;more&#039; link displayed after a trimmed excerpt."
    },
    "Function: wp_embed_handler_audio": {
        "prefix": "wp_embed_handler_audio",
        "body": "wp_embed_handler_audio( ${1:\\$matches:array}, ${2:\\$attr:array}, ${3:\\$url:string}, ${4:\\$rawattr:array} )",
        "description": "Audio embed handler callback."
    },
    "Function: wp_embed_handler_googlevideo": {
        "prefix": "wp_embed_handler_googlevideo",
        "body": "wp_embed_handler_googlevideo( ${1:\\$matches:}, ${2:\\$attr:}, ${3:\\$url:}, ${4:\\$rawattr:} )",
        "description": "The Google Video embed handler callback."
    },
    "Function: wp_embed_handler_video": {
        "prefix": "wp_embed_handler_video",
        "body": "wp_embed_handler_video( ${1:\\$matches:array}, ${2:\\$attr:array}, ${3:\\$url:string}, ${4:\\$rawattr:array} )",
        "description": "Video embed handler callback."
    },
    "Function: wp_embed_handler_youtube": {
        "prefix": "wp_embed_handler_youtube",
        "body": "wp_embed_handler_youtube( ${1:\\$matches:array}, ${2:\\$attr:array}, ${3:\\$url:string}, ${4:\\$rawattr:array} )",
        "description": "YouTube iframe embed handler callback."
    },
    "Function: wp_embed_register_handler": {
        "prefix": "wp_embed_register_handler",
        "body": "wp_embed_register_handler( ${1:\\$id:string}, ${2:\\$regex:string}, ${3:\\$callback:callable}, ${4:\\$priority:integer} )",
        "description": "Registers an embed handler."
    },
    "Function: wp_embed_unregister_handler": {
        "prefix": "wp_embed_unregister_handler",
        "body": "wp_embed_unregister_handler( ${1:\\$id:string}, ${2:\\$priority:integer} )",
        "description": "Unregisters a previously-registered embed handler."
    },
    "Function: wp_encode_emoji": {
        "prefix": "wp_encode_emoji",
        "body": "wp_encode_emoji( ${1:\\$content:string} )",
        "description": "Convert emoji characters to their equivalent HTML entity."
    },
    "Function: wp_enqueue_code_editor": {
        "prefix": "wp_enqueue_code_editor",
        "body": "wp_enqueue_code_editor( ${1:\\$args:array} )",
        "description": "Enqueue assets needed by the code editor for the given settings."
    },
    "Function: wp_enqueue_editor": {
        "prefix": "wp_enqueue_editor",
        "body": "wp_enqueue_editor(  )",
        "description": "Outputs the editor scripts, stylesheets, and default settings."
    },
    "Function: wp_enqueue_media": {
        "prefix": "wp_enqueue_media",
        "body": "wp_enqueue_media( ${1:\\$args:array} )",
        "description": "Enqueues all scripts, styles, settings, and templates necessary to use all media JS APIs."
    },
    "Function: wp_enqueue_script": {
        "prefix": "wp_enqueue_script",
        "body": "wp_enqueue_script( ${1:\\$handle:string}, ${2:\\$src:string}, ${3:\\$deps:array}, ${4:\\$ver:string|boolean|null}, ${5:\\$in_footer:boolean} )",
        "description": "Enqueue a script."
    },
    "Function: wp_enqueue_scripts": {
        "prefix": "wp_enqueue_scripts",
        "body": "wp_enqueue_scripts(  )",
        "description": "Wrapper for do_action(&#039;wp_enqueue_scripts&#039;)"
    },
    "Function: wp_enqueue_style": {
        "prefix": "wp_enqueue_style",
        "body": "wp_enqueue_style( ${1:\\$handle:string}, ${2:\\$src:string}, ${3:\\$deps:array}, ${4:\\$ver:string|boolean|null}, ${5:\\$media:string} )",
        "description": "Enqueue a CSS stylesheet."
    },
    "Function: wp_exif_date2ts": {
        "prefix": "wp_exif_date2ts",
        "body": "wp_exif_date2ts( ${1:\\$str:string} )",
        "description": "Convert the exif date format to a unix timestamp."
    },
    "Function: wp_exif_frac2dec": {
        "prefix": "wp_exif_frac2dec",
        "body": "wp_exif_frac2dec( ${1:\\$str:string} )",
        "description": "Convert a fraction string to a decimal."
    },
    "Function: wp_expand_dimensions": {
        "prefix": "wp_expand_dimensions",
        "body": "wp_expand_dimensions( ${1:\\$example_width:integer}, ${2:\\$example_height:integer}, ${3:\\$max_width:integer}, ${4:\\$max_height:integer} )",
        "description": "Based on a supplied width/height example, return the biggest possible dimensions based on the max width/height."
    },
    "Function: wp_explain_nonce": {
        "prefix": "wp_explain_nonce",
        "body": "wp_explain_nonce( ${1:\\$action:string} )",
        "description": "Retrieve nonce action &quot;Are you sure&quot; message."
    },
    "Function: wp_ext2type": {
        "prefix": "wp_ext2type",
        "body": "wp_ext2type( ${1:\\$ext:string} )",
        "description": "Retrieve the file type based on the extension name."
    },
    "Function: wp_extract_urls": {
        "prefix": "wp_extract_urls",
        "body": "wp_extract_urls( ${1:\\$content:string} )",
        "description": "Use RegEx to extract URLs from arbitrary content."
    },
    "Function: wp_favicon_request": {
        "prefix": "wp_favicon_request",
        "body": "wp_favicon_request(  )",
        "description": "Don&#039;t load all of WordPress when handling a favicon.ico request."
    },
    "Function: WP_Filesystem": {
        "prefix": "WP_Filesystem",
        "body": "WP_Filesystem( ${1:\\$args:array|false}, ${2:\\$context:string|false}, ${3:\\$allow_relaxed_file_ownership:boolean} )",
        "description": "Initialises and connects the WordPress Filesystem Abstraction classes."
    },
    "Function: wp_filter_comment": {
        "prefix": "wp_filter_comment",
        "body": "wp_filter_comment( ${1:\\$commentdata:array} )",
        "description": "Filters and sanitizes comment data."
    },
    "Function: wp_filter_kses": {
        "prefix": "wp_filter_kses",
        "body": "wp_filter_kses( ${1:\\$data:string} )",
        "description": "Sanitize content with allowed HTML Kses rules."
    },
    "Function: wp_filter_nohtml_kses": {
        "prefix": "wp_filter_nohtml_kses",
        "body": "wp_filter_nohtml_kses( ${1:\\$data:string} )",
        "description": "Strips all of the HTML in the content."
    },
    "Function: wp_filter_object_list": {
        "prefix": "wp_filter_object_list",
        "body": "wp_filter_object_list( ${1:\\$list:array}, ${2:\\$args:array}, ${3:\\$operator:string}, ${4:\\$field:boolean|string} )",
        "description": "Filters a list of objects, based on a set of key =&gt; value arguments."
    },
    "Function: wp_filter_oembed_result": {
        "prefix": "wp_filter_oembed_result",
        "body": "wp_filter_oembed_result( ${1:\\$result:string}, ${2:\\$data:object}, ${3:\\$url:string} )",
        "description": "Filters the given oEmbed HTML."
    },
    "Function: wp_filter_post_kses": {
        "prefix": "wp_filter_post_kses",
        "body": "wp_filter_post_kses( ${1:\\$data:string} )",
        "description": "Sanitize content for allowed HTML tags for post content."
    },
    "Function: wp_filter_pre_oembed_result": {
        "prefix": "wp_filter_pre_oembed_result",
        "body": "wp_filter_pre_oembed_result( ${1:\\$result:null|string}, ${2:\\$url:string}, ${3:\\$args:array} )",
        "description": "Filters the oEmbed result before any HTTP requests are made."
    },
    "Function: wp_finalize_scraping_edited_file_errors": {
        "prefix": "wp_finalize_scraping_edited_file_errors",
        "body": "wp_finalize_scraping_edited_file_errors( ${1:\\$scrape_key:string} )",
        "description": "Finalize scraping for edited file errors."
    },
    "Function: wp_find_hierarchy_loop": {
        "prefix": "wp_find_hierarchy_loop",
        "body": "wp_find_hierarchy_loop( ${1:\\$callback:callable}, ${2:\\$start:integer}, ${3:\\$start_parent:integer}, ${4:\\$callback_args:array} )",
        "description": "Find hierarchy loops using a callback function that maps object IDs to parent IDs."
    },
    "Function: wp_find_hierarchy_loop_tortoise_hare": {
        "prefix": "wp_find_hierarchy_loop_tortoise_hare",
        "body": "wp_find_hierarchy_loop_tortoise_hare( ${1:\\$callback:callable}, ${2:\\$start:integer}, ${3:\\$override:array}, ${4:\\$callback_args:array}, ${5:\\$_return_loop:boolean} )",
        "description": "Use the &quot;The Tortoise and the Hare&quot; algorithm to detect loops."
    },
    "Function: wp_fix_server_vars": {
        "prefix": "wp_fix_server_vars",
        "body": "wp_fix_server_vars(  )",
        "description": "Fix `$_SERVER` variables for various setups."
    },
    "Function: wp_footer": {
        "prefix": "wp_footer",
        "body": "wp_footer(  )",
        "description": "Fire the wp_footer action."
    },
    "Function: wp_functionality_constants": {
        "prefix": "wp_functionality_constants",
        "body": "wp_functionality_constants(  )",
        "description": "Defines functionality related WordPress constants"
    },
    "Function: wp_generate_attachment_metadata": {
        "prefix": "wp_generate_attachment_metadata",
        "body": "wp_generate_attachment_metadata( ${1:\\$attachment_id:integer}, ${2:\\$file:string} )",
        "description": "Generate post thumbnail attachment meta data."
    },
    "Function: wp_generate_auth_cookie": {
        "prefix": "wp_generate_auth_cookie",
        "body": "wp_generate_auth_cookie( ${1:\\$user_id:integer}, ${2:\\$expiration:integer}, ${3:\\$scheme:string}, ${4:\\$token:string} )",
        "description": "Generate authentication cookie contents."
    },
    "Function: wp_generate_password": {
        "prefix": "wp_generate_password",
        "body": "wp_generate_password( ${1:\\$length:integer}, ${2:\\$special_chars:boolean}, ${3:\\$extra_special_chars:boolean} )",
        "description": "Generates a random password drawn from the defined set of characters."
    },
    "Function: wp_generate_tag_cloud": {
        "prefix": "wp_generate_tag_cloud",
        "body": "wp_generate_tag_cloud( ${1:\\$tags:array}, ${2:\\$args:string|array} )",
        "description": "Generates a tag cloud (heatmap) from provided data."
    },
    "Function: wp_generate_user_request_key": {
        "prefix": "wp_generate_user_request_key",
        "body": "wp_generate_user_request_key( ${1:\\$request_id:integer} )",
        "description": "Returns a confirmation key for a user action and stores the hashed version for future comparison."
    },
    "Function: wp_generate_uuid4": {
        "prefix": "wp_generate_uuid4",
        "body": "wp_generate_uuid4(  )",
        "description": "Generate a random UUID (version 4)."
    },
    "Function: wp_generator": {
        "prefix": "wp_generator",
        "body": "wp_generator(  )",
        "description": "Displays the XHTML generator that is generated on the wp_head hook."
    },
    "Function: wp_get_active_and_valid_plugins": {
        "prefix": "wp_get_active_and_valid_plugins",
        "body": "wp_get_active_and_valid_plugins(  )",
        "description": "Retrieve an array of active and valid plugin files."
    },
    "Function: wp_get_active_network_plugins": {
        "prefix": "wp_get_active_network_plugins",
        "body": "wp_get_active_network_plugins(  )",
        "description": "Returns array of network plugin files to be included in global scope."
    },
    "Function: wp_get_additional_image_sizes": {
        "prefix": "wp_get_additional_image_sizes",
        "body": "wp_get_additional_image_sizes(  )",
        "description": "Retrieve additional image sizes."
    },
    "Function: wp_get_all_sessions": {
        "prefix": "wp_get_all_sessions",
        "body": "wp_get_all_sessions(  )",
        "description": "Retrieve a list of sessions for the current user."
    },
    "Function: wp_get_archives": {
        "prefix": "wp_get_archives",
        "body": "wp_get_archives( ${1:\\$args:string|array} )",
        "description": "Display archive links based on type and format."
    },
    "Function: wp_get_associated_nav_menu_items": {
        "prefix": "wp_get_associated_nav_menu_items",
        "body": "wp_get_associated_nav_menu_items( ${1:\\$object_id:integer}, ${2:\\$object_type:string}, ${3:\\$taxonomy:string} )",
        "description": "Get the menu items associated with a particular object."
    },
    "Function: wp_get_attachment_caption": {
        "prefix": "wp_get_attachment_caption",
        "body": "wp_get_attachment_caption( ${1:\\$post_id:integer} )",
        "description": "Retrieves the caption for an attachment."
    },
    "Function: wp_get_attachment_id3_keys": {
        "prefix": "wp_get_attachment_id3_keys",
        "body": "wp_get_attachment_id3_keys( ${1:\\$attachment:WP_Post}, ${2:\\$context:string} )",
        "description": "Returns useful keys to use to lookup data from an attachment&#039;s stored metadata."
    },
    "Function: wp_get_attachment_image": {
        "prefix": "wp_get_attachment_image",
        "body": "wp_get_attachment_image( ${1:\\$attachment_id:integer}, ${2:\\$size:string|array}, ${3:\\$icon:boolean}, ${4:\\$attr:string|array} )",
        "description": "Get an HTML img element representing an image attachment"
    },
    "Function: wp_get_attachment_image_sizes": {
        "prefix": "wp_get_attachment_image_sizes",
        "body": "wp_get_attachment_image_sizes( ${1:\\$attachment_id:integer}, ${2:\\$size:array|string}, ${3:\\$image_meta:array|null} )",
        "description": "Retrieves the value for an image attachment&#039;s &#039;sizes&#039; attribute."
    },
    "Function: wp_get_attachment_image_src": {
        "prefix": "wp_get_attachment_image_src",
        "body": "wp_get_attachment_image_src( ${1:\\$attachment_id:integer}, ${2:\\$size:string|array}, ${3:\\$icon:boolean} )",
        "description": "Retrieve an image to represent an attachment."
    },
    "Function: wp_get_attachment_image_srcset": {
        "prefix": "wp_get_attachment_image_srcset",
        "body": "wp_get_attachment_image_srcset( ${1:\\$attachment_id:integer}, ${2:\\$size:array|string}, ${3:\\$image_meta:array|null} )",
        "description": "Retrieves the value for an image attachment&#039;s &#039;srcset&#039; attribute."
    },
    "Function: wp_get_attachment_image_url": {
        "prefix": "wp_get_attachment_image_url",
        "body": "wp_get_attachment_image_url( ${1:\\$attachment_id:integer}, ${2:\\$size:string|array}, ${3:\\$icon:boolean} )",
        "description": "Get the URL of an image attachment."
    },
    "Function: wp_get_attachment_link": {
        "prefix": "wp_get_attachment_link",
        "body": "wp_get_attachment_link( ${1:\\$id:integer|WP_Post}, ${2:\\$size:string|array}, ${3:\\$permalink:boolean}, ${4:\\$icon:boolean}, ${5:\\$text:string|false}, ${6:\\$attr:array|string} )",
        "description": "Retrieve an attachment page link using an image or icon, if possible."
    },
    "Function: wp_get_attachment_metadata": {
        "prefix": "wp_get_attachment_metadata",
        "body": "wp_get_attachment_metadata( ${1:\\$attachment_id:integer}, ${2:\\$unfiltered:boolean} )",
        "description": "Retrieve attachment meta field for attachment ID."
    },
    "Function: wp_get_attachment_thumb_file": {
        "prefix": "wp_get_attachment_thumb_file",
        "body": "wp_get_attachment_thumb_file( ${1:\\$post_id:integer} )",
        "description": "Retrieve thumbnail for an attachment."
    },
    "Function: wp_get_attachment_thumb_url": {
        "prefix": "wp_get_attachment_thumb_url",
        "body": "wp_get_attachment_thumb_url( ${1:\\$post_id:integer} )",
        "description": "Retrieve URL for an attachment thumbnail."
    },
    "Function: wp_get_attachment_url": {
        "prefix": "wp_get_attachment_url",
        "body": "wp_get_attachment_url( ${1:\\$attachment_id:integer} )",
        "description": "Retrieve the URL for an attachment."
    },
    "Function: wp_get_audio_extensions": {
        "prefix": "wp_get_audio_extensions",
        "body": "wp_get_audio_extensions(  )",
        "description": "Returns a filtered list of WP-supported audio formats."
    },
    "Function: wp_get_available_translations": {
        "prefix": "wp_get_available_translations",
        "body": "wp_get_available_translations(  )",
        "description": "Get available translations from the WordPress.org API."
    },
    "Function: wp_get_canonical_url": {
        "prefix": "wp_get_canonical_url",
        "body": "wp_get_canonical_url( ${1:\\$post:integer|WP_Post|null} )",
        "description": "Returns the canonical URL for a post."
    },
    "Function: wp_get_comment_fields_max_lengths": {
        "prefix": "wp_get_comment_fields_max_lengths",
        "body": "wp_get_comment_fields_max_lengths(  )",
        "description": "Retrieves the maximum character lengths for the comment form fields."
    },
    "Function: wp_get_comment_status": {
        "prefix": "wp_get_comment_status",
        "body": "wp_get_comment_status( ${1:\\$comment_id:integer|WP_Comment} )",
        "description": "The status of a comment by ID."
    },
    "Function: wp_get_cookie_login": {
        "prefix": "wp_get_cookie_login",
        "body": "wp_get_cookie_login(  )",
        "description": "Gets the user cookie login. This function is deprecated."
    },
    "Function: wp_get_current_commenter": {
        "prefix": "wp_get_current_commenter",
        "body": "wp_get_current_commenter(  )",
        "description": "Get current commenter&#039;s name, email, and URL."
    },
    "Function: wp_get_current_user": {
        "prefix": "wp_get_current_user",
        "body": "wp_get_current_user(  )",
        "description": "Retrieve the current user object."
    },
    "Function: wp_get_custom_css": {
        "prefix": "wp_get_custom_css",
        "body": "wp_get_custom_css( ${1:\\$stylesheet:string} )",
        "description": "Fetch the saved Custom CSS content for rendering."
    },
    "Function: wp_get_custom_css_post": {
        "prefix": "wp_get_custom_css_post",
        "body": "wp_get_custom_css_post( ${1:\\$stylesheet:string} )",
        "description": "Fetch the `custom_css` post for a given theme."
    },
    "Function: wp_get_db_schema": {
        "prefix": "wp_get_db_schema",
        "body": "wp_get_db_schema( ${1:\\$scope:string}, ${2:\\$blog_id:integer|null} )",
        "description": "Retrieve the SQL for creating database tables."
    },
    "Function: wp_get_document_title": {
        "prefix": "wp_get_document_title",
        "body": "wp_get_document_title(  )",
        "description": "Returns document title for the current page."
    },
    "Function: wp_get_ext_types": {
        "prefix": "wp_get_ext_types",
        "body": "wp_get_ext_types(  )",
        "description": "Retrieves the list of common file extensions and their types."
    },
    "Function: wp_get_http": {
        "prefix": "wp_get_http",
        "body": "wp_get_http( ${1:\\$url:string}, ${2:\\$file_path:string|boolean}, ${3:\\$red:integer} )",
        "description": "Perform a HTTP HEAD or GET request."
    },
    "Function: wp_get_http_headers": {
        "prefix": "wp_get_http_headers",
        "body": "wp_get_http_headers( ${1:\\$url:string}, ${2:\\$deprecated:boolean} )",
        "description": "Retrieve HTTP Headers from URL."
    },
    "Function: wp_get_image_editor": {
        "prefix": "wp_get_image_editor",
        "body": "wp_get_image_editor( ${1:\\$path:string}, ${2:\\$args:array} )",
        "description": "Returns a WP_Image_Editor instance and loads file into it."
    },
    "Function: wp_get_image_mime": {
        "prefix": "wp_get_image_mime",
        "body": "wp_get_image_mime( ${1:\\$file:string} )",
        "description": "Returns the real mime type of an image file."
    },
    "Function: wp_get_installed_translations": {
        "prefix": "wp_get_installed_translations",
        "body": "wp_get_installed_translations( ${1:\\$type:string} )",
        "description": "Get installed translations."
    },
    "Function: wp_get_link_cats": {
        "prefix": "wp_get_link_cats",
        "body": "wp_get_link_cats( ${1:\\$link_id:integer} )",
        "description": "Retrieves the link categories associated with the link specified."
    },
    "Function: wp_get_links": {
        "prefix": "wp_get_links",
        "body": "wp_get_links( ${1:\\$args:string} )",
        "description": "Gets the links associated with category."
    },
    "Function: wp_get_linksbyname": {
        "prefix": "wp_get_linksbyname",
        "body": "wp_get_linksbyname( ${1:\\$category:string}, ${2:\\$args:string} )",
        "description": "Gets the links associated with the named category."
    },
    "Function: wp_get_media_creation_timestamp": {
        "prefix": "wp_get_media_creation_timestamp",
        "body": "wp_get_media_creation_timestamp( ${1:\\$metadata:array} )",
        "description": "Parse creation date from media metadata."
    },
    "Function: wp_get_mime_types": {
        "prefix": "wp_get_mime_types",
        "body": "wp_get_mime_types(  )",
        "description": "Retrieve list of mime types and file extensions."
    },
    "Function: wp_get_mu_plugins": {
        "prefix": "wp_get_mu_plugins",
        "body": "wp_get_mu_plugins(  )",
        "description": "Retrieve an array of must-use plugin files."
    },
    "Function: wp_get_nav_menu_items": {
        "prefix": "wp_get_nav_menu_items",
        "body": "wp_get_nav_menu_items( ${1:\\$menu:integer|string|WP_Term}, ${2:\\$args:array} )",
        "description": "Retrieves all menu items of a navigation menu."
    },
    "Function: wp_get_nav_menu_name": {
        "prefix": "wp_get_nav_menu_name",
        "body": "wp_get_nav_menu_name( ${1:\\$location:string} )",
        "description": "Returns the name of a navigation menu."
    },
    "Function: wp_get_nav_menu_object": {
        "prefix": "wp_get_nav_menu_object",
        "body": "wp_get_nav_menu_object( ${1:\\$menu:integer|string|WP_Term} )",
        "description": "Returns a navigation menu object."
    },
    "Function: wp_get_nav_menu_to_edit": {
        "prefix": "wp_get_nav_menu_to_edit",
        "body": "wp_get_nav_menu_to_edit( ${1:\\$menu_id:integer} )",
        "description": "Returns the menu formatted to edit."
    },
    "Function: wp_get_nav_menus": {
        "prefix": "wp_get_nav_menus",
        "body": "wp_get_nav_menus( ${1:\\$args:array} )",
        "description": "Returns all navigation menu objects."
    },
    "Function: wp_get_nocache_headers": {
        "prefix": "wp_get_nocache_headers",
        "body": "wp_get_nocache_headers(  )",
        "description": "Get the header information to prevent caching."
    },
    "Function: wp_get_object_terms": {
        "prefix": "wp_get_object_terms",
        "body": "wp_get_object_terms( ${1:\\$object_ids:integer|array}, ${2:\\$taxonomies:string|array}, ${3:\\$args:array|string} )",
        "description": "Retrieves the terms associated with the given object(s), in the supplied taxonomies."
    },
    "Function: wp_get_original_referer": {
        "prefix": "wp_get_original_referer",
        "body": "wp_get_original_referer(  )",
        "description": "Retrieve original referer that was posted, if it exists."
    },
    "Function: wp_get_password_hint": {
        "prefix": "wp_get_password_hint",
        "body": "wp_get_password_hint(  )",
        "description": "Gets the text suggesting how to create strong passwords."
    },
    "Function: wp_get_plugin_file_editable_extensions": {
        "prefix": "wp_get_plugin_file_editable_extensions",
        "body": "wp_get_plugin_file_editable_extensions( ${1:\\$plugin:string} )",
        "description": "Get list of file extensions that are editable in plugins."
    },
    "Function: wp_get_pomo_file_data": {
        "prefix": "wp_get_pomo_file_data",
        "body": "wp_get_pomo_file_data( ${1:\\$po_file:string} )",
        "description": "Extract headers from a PO file."
    },
    "Function: wp_get_popular_importers": {
        "prefix": "wp_get_popular_importers",
        "body": "wp_get_popular_importers(  )",
        "description": "Returns a list from WordPress.org of popular importer plugins."
    },
    "Function: wp_get_post_autosave": {
        "prefix": "wp_get_post_autosave",
        "body": "wp_get_post_autosave( ${1:\\$post_id:integer}, ${2:\\$user_id:integer} )",
        "description": "Retrieve the autosaved data of the specified post."
    },
    "Function: wp_get_post_categories": {
        "prefix": "wp_get_post_categories",
        "body": "wp_get_post_categories( ${1:\\$post_id:integer}, ${2:\\$args:array} )",
        "description": "Retrieve the list of categories for a post."
    },
    "Function: wp_get_post_cats": {
        "prefix": "wp_get_post_cats",
        "body": "wp_get_post_cats( ${1:\\$blogid:integer}, ${2:\\$post_ID:integer} )",
        "description": "Retrieves a list of post categories."
    },
    "Function: wp_get_post_parent_id": {
        "prefix": "wp_get_post_parent_id",
        "body": "wp_get_post_parent_id( ${1:\\$post_ID:integer} )",
        "description": "Return the post&#039;s parent&#039;s post_ID"
    },
    "Function: wp_get_post_revision": {
        "prefix": "wp_get_post_revision",
        "body": "wp_get_post_revision( ${1:\\$post:integer|WP_Post}, ${2:\\$output:string}, ${3:\\$filter:string} )",
        "description": "Gets a post revision."
    },
    "Function: wp_get_post_revisions": {
        "prefix": "wp_get_post_revisions",
        "body": "wp_get_post_revisions( ${1:\\$post_id:integer|WP_Post}, ${2:\\$args:array|null} )",
        "description": "Returns all revisions of specified post."
    },
    "Function: wp_get_post_tags": {
        "prefix": "wp_get_post_tags",
        "body": "wp_get_post_tags( ${1:\\$post_id:integer}, ${2:\\$args:array} )",
        "description": "Retrieve the tags for a post."
    },
    "Function: wp_get_post_terms": {
        "prefix": "wp_get_post_terms",
        "body": "wp_get_post_terms( ${1:\\$post_id:integer}, ${2:\\$taxonomy:string|array}, ${3:\\$args:array} )",
        "description": "Retrieves the terms for a post."
    },
    "Function: wp_get_raw_referer": {
        "prefix": "wp_get_raw_referer",
        "body": "wp_get_raw_referer(  )",
        "description": "Retrieves unvalidated referer from &#039;_wp_http_referer&#039; or HTTP referer."
    },
    "Function: wp_get_recent_posts": {
        "prefix": "wp_get_recent_posts",
        "body": "wp_get_recent_posts( ${1:\\$args:array}, ${2:\\$output:string} )",
        "description": "Retrieve a number of recent posts."
    },
    "Function: wp_get_referer": {
        "prefix": "wp_get_referer",
        "body": "wp_get_referer(  )",
        "description": "Retrieve referer from &#039;_wp_http_referer&#039; or HTTP referer."
    },
    "Function: wp_get_revision_ui_diff": {
        "prefix": "wp_get_revision_ui_diff",
        "body": "wp_get_revision_ui_diff( ${1:\\$post:object|integer}, ${2:\\$compare_from:integer}, ${3:\\$compare_to:integer} )",
        "description": "Get the revision UI diff."
    },
    "Function: wp_get_schedule": {
        "prefix": "wp_get_schedule",
        "body": "wp_get_schedule( ${1:\\$hook:string}, ${2:\\$args:array} )",
        "description": "Retrieve the recurrence schedule for an event."
    },
    "Function: wp_get_schedules": {
        "prefix": "wp_get_schedules",
        "body": "wp_get_schedules(  )",
        "description": "Retrieve supported event recurrence schedules."
    },
    "Function: wp_get_server_protocol": {
        "prefix": "wp_get_server_protocol",
        "body": "wp_get_server_protocol(  )",
        "description": "Return the HTTP protocol sent by the server."
    },
    "Function: wp_get_session_token": {
        "prefix": "wp_get_session_token",
        "body": "wp_get_session_token(  )",
        "description": "Retrieve the current session token from the logged_in cookie."
    },
    "Function: wp_get_shortlink": {
        "prefix": "wp_get_shortlink",
        "body": "wp_get_shortlink( ${1:\\$id:integer}, ${2:\\$context:string}, ${3:\\$allow_slugs:boolean} )",
        "description": "Returns a shortlink for a post, page, attachment, or site."
    },
    "Function: wp_get_sidebars_widgets": {
        "prefix": "wp_get_sidebars_widgets",
        "body": "wp_get_sidebars_widgets( ${1:\\$deprecated:boolean} )",
        "description": "Retrieve full list of sidebars and their widget instance IDs."
    },
    "Function: wp_get_single_post": {
        "prefix": "wp_get_single_post",
        "body": "wp_get_single_post( ${1:\\$postid:integer}, ${2:\\$mode:string} )",
        "description": "Retrieve a single post, based on post ID."
    },
    "Function: wp_get_sites": {
        "prefix": "wp_get_sites",
        "body": "wp_get_sites( ${1:\\$args:array} )",
        "description": "Return an array of sites for a network or networks."
    },
    "Function: wp_get_split_term": {
        "prefix": "wp_get_split_term",
        "body": "wp_get_split_term( ${1:\\$old_term_id:integer}, ${2:\\$taxonomy:string} )",
        "description": "Get the new term ID corresponding to a previously split term."
    },
    "Function: wp_get_split_terms": {
        "prefix": "wp_get_split_terms",
        "body": "wp_get_split_terms( ${1:\\$old_term_id:integer} )",
        "description": "Get data about terms that previously shared a single term_id, but have since been split."
    },
    "Function: wp_get_term_taxonomy_parent_id": {
        "prefix": "wp_get_term_taxonomy_parent_id",
        "body": "wp_get_term_taxonomy_parent_id( ${1:\\$term_id:integer}, ${2:\\$taxonomy:string} )",
        "description": "Returns the term&#039;s parent&#039;s term_ID."
    },
    "Function: wp_get_theme": {
        "prefix": "wp_get_theme",
        "body": "wp_get_theme( ${1:\\$stylesheet:string|null}, ${2:\\$theme_root:string|null} )",
        "description": "Gets a WP_Theme object for a theme."
    },
    "Function: wp_get_theme_file_editable_extensions": {
        "prefix": "wp_get_theme_file_editable_extensions",
        "body": "wp_get_theme_file_editable_extensions( ${1:\\$theme:WP_Theme} )",
        "description": "Get list of file extensions that are editable for a given theme."
    },
    "Function: wp_get_themes": {
        "prefix": "wp_get_themes",
        "body": "wp_get_themes( ${1:\\$args:array} )",
        "description": "Returns an array of WP_Theme objects based on the arguments."
    },
    "Function: wp_get_translation_updates": {
        "prefix": "wp_get_translation_updates",
        "body": "wp_get_translation_updates(  )",
        "description": "Retrieves a list of all language updates available."
    },
    "Function: wp_get_update_data": {
        "prefix": "wp_get_update_data",
        "body": "wp_get_update_data(  )",
        "description": "Collect counts and UI strings for available updates"
    },
    "Function: wp_get_upload_dir": {
        "prefix": "wp_get_upload_dir",
        "body": "wp_get_upload_dir(  )",
        "description": "Retrieves uploads directory information."
    },
    "Function: wp_get_user_contact_methods": {
        "prefix": "wp_get_user_contact_methods",
        "body": "wp_get_user_contact_methods( ${1:\\$user:WP_User|null} )",
        "description": "Set up the user contact methods."
    },
    "Function: wp_get_user_request_data": {
        "prefix": "wp_get_user_request_data",
        "body": "wp_get_user_request_data( ${1:\\$request_id:integer} )",
        "description": "Return data about a user request."
    },
    "Function: wp_get_users_with_no_role": {
        "prefix": "wp_get_users_with_no_role",
        "body": "wp_get_users_with_no_role( ${1:\\$site_id:integer|null} )",
        "description": "Get the user IDs of all users with no role on this site."
    },
    "Function: wp_get_video_extensions": {
        "prefix": "wp_get_video_extensions",
        "body": "wp_get_video_extensions(  )",
        "description": "Returns a filtered list of WP-supported video formats."
    },
    "Function: wp_get_widget_defaults": {
        "prefix": "wp_get_widget_defaults",
        "body": "wp_get_widget_defaults(  )",
        "description": "Retrieve default registered sidebars list."
    },
    "Function: wp_guess_url": {
        "prefix": "wp_guess_url",
        "body": "wp_guess_url(  )",
        "description": "Guess the URL for the site."
    },
    "Function: wp_handle_comment_submission": {
        "prefix": "wp_handle_comment_submission",
        "body": "wp_handle_comment_submission( ${1:\\$comment_data:array} )",
        "description": "Handles the submission of a comment, usually posted to wp-comments-post.php via a comment form."
    },
    "Function: wp_handle_sideload": {
        "prefix": "wp_handle_sideload",
        "body": "wp_handle_sideload( ${1:\\$file:array}, ${2:\\$overrides:array|boolean}, ${3:\\$time:string|null} )",
        "description": "Wrapper for _wp_handle_upload()."
    },
    "Function: wp_handle_upload": {
        "prefix": "wp_handle_upload",
        "body": "wp_handle_upload( ${1:\\$file:array}, ${2:\\$overrides:array|boolean}, ${3:\\$time:string|null} )",
        "description": "Wrapper for _wp_handle_upload()."
    },
    "Function: wp_handle_upload_error": {
        "prefix": "wp_handle_upload_error",
        "body": "wp_handle_upload_error( ${1:\\$file:}, ${2:\\$message:} )",
        "description": ""
    },
    "Function: wp_hash": {
        "prefix": "wp_hash",
        "body": "wp_hash( ${1:\\$data:string}, ${2:\\$scheme:string} )",
        "description": "Get hash of given string."
    },
    "Function: wp_hash_password": {
        "prefix": "wp_hash_password",
        "body": "wp_hash_password( ${1:\\$password:string} )",
        "description": "Create a hash (encrypt) of a plain text password."
    },
    "Function: wp_head": {
        "prefix": "wp_head",
        "body": "wp_head(  )",
        "description": "Fire the wp_head action."
    },
    "Function: wp_heartbeat_set_suspension": {
        "prefix": "wp_heartbeat_set_suspension",
        "body": "wp_heartbeat_set_suspension( ${1:\\$settings:array} )",
        "description": "Disable suspension of Heartbeat on the Add/Edit Post screens."
    },
    "Function: wp_heartbeat_settings": {
        "prefix": "wp_heartbeat_settings",
        "body": "wp_heartbeat_settings( ${1:\\$settings:array} )",
        "description": "Default settings for heartbeat"
    },
    "Function: wp_html_excerpt": {
        "prefix": "wp_html_excerpt",
        "body": "wp_html_excerpt( ${1:\\$str:string}, ${2:\\$count:integer}, ${3:\\$more:string|null} )",
        "description": "Safely extracts not more than the first $count characters from html string."
    },
    "Function: wp_html_split": {
        "prefix": "wp_html_split",
        "body": "wp_html_split( ${1:\\$input:string} )",
        "description": "Separate HTML elements and comments from the text."
    },
    "Function: wp_htmledit_pre": {
        "prefix": "wp_htmledit_pre",
        "body": "wp_htmledit_pre( ${1:\\$output:string} )",
        "description": "Formats text for the HTML editor."
    },
    "Function: wp_http_supports": {
        "prefix": "wp_http_supports",
        "body": "wp_http_supports( ${1:\\$capabilities:array}, ${2:\\$url:string|null} )",
        "description": "Determines if there is an HTTP Transport that can process this request."
    },
    "Function: wp_http_validate_url": {
        "prefix": "wp_http_validate_url",
        "body": "wp_http_validate_url( ${1:\\$url:string} )",
        "description": "Validate a URL for safe use in the HTTP API."
    },
    "Function: wp_iframe": {
        "prefix": "wp_iframe",
        "body": "wp_iframe( ${1:\\$content_func:string|callable} )",
        "description": "Adds the iframe to display content for the media upload page"
    },
    "Function: wp_image_add_srcset_and_sizes": {
        "prefix": "wp_image_add_srcset_and_sizes",
        "body": "wp_image_add_srcset_and_sizes( ${1:\\$image:string}, ${2:\\$image_meta:array}, ${3:\\$attachment_id:integer} )",
        "description": "Adds &#039;srcset&#039; and &#039;sizes&#039; attributes to an existing &#039;img&#039; element."
    },
    "Function: wp_image_editor": {
        "prefix": "wp_image_editor",
        "body": "wp_image_editor( ${1:\\$post_id:integer}, ${2:\\$msg:boolean|object} )",
        "description": "Loads the WP image-editing interface."
    },
    "Function: wp_image_editor_supports": {
        "prefix": "wp_image_editor_supports",
        "body": "wp_image_editor_supports( ${1:\\$args:string|array} )",
        "description": "Tests whether there is an editor that supports a given mime type or methods."
    },
    "Function: wp_image_matches_ratio": {
        "prefix": "wp_image_matches_ratio",
        "body": "wp_image_matches_ratio( ${1:\\$source_width:integer}, ${2:\\$source_height:integer}, ${3:\\$target_width:integer}, ${4:\\$target_height:integer} )",
        "description": "Helper function to test if aspect ratios for two images match."
    },
    "Function: wp_imagecreatetruecolor": {
        "prefix": "wp_imagecreatetruecolor",
        "body": "wp_imagecreatetruecolor( ${1:\\$width:integer}, ${2:\\$height:integer} )",
        "description": "Create new GD image resource with transparency support"
    },
    "Function: wp_import_cleanup": {
        "prefix": "wp_import_cleanup",
        "body": "wp_import_cleanup( ${1:\\$id:string} )",
        "description": "Cleanup importer."
    },
    "Function: wp_import_handle_upload": {
        "prefix": "wp_import_handle_upload",
        "body": "wp_import_handle_upload(  )",
        "description": "Handle importer uploading and add attachment."
    },
    "Function: wp_import_upload_form": {
        "prefix": "wp_import_upload_form",
        "body": "wp_import_upload_form( ${1:\\$action:string} )",
        "description": "Outputs the form used by the importers to accept the data to be imported"
    },
    "Function: wp_initial_constants": {
        "prefix": "wp_initial_constants",
        "body": "wp_initial_constants(  )",
        "description": "Defines initial WordPress constants"
    },
    "Function: wp_initial_nav_menu_meta_boxes": {
        "prefix": "wp_initial_nav_menu_meta_boxes",
        "body": "wp_initial_nav_menu_meta_boxes(  )",
        "description": "Limit the amount of meta boxes to pages, posts, links, and categories for first time users."
    },
    "Function: wp_insert_attachment": {
        "prefix": "wp_insert_attachment",
        "body": "wp_insert_attachment( ${1:\\$args:string|array}, ${2:\\$file:string}, ${3:\\$parent:integer}, ${4:\\$wp_error:boolean} )",
        "description": "Insert an attachment."
    },
    "Function: wp_insert_category": {
        "prefix": "wp_insert_category",
        "body": "wp_insert_category( ${1:\\$catarr:array}, ${2:\\$wp_error:boolean} )",
        "description": "Updates an existing Category or creates a new Category."
    },
    "Function: wp_insert_comment": {
        "prefix": "wp_insert_comment",
        "body": "wp_insert_comment( ${1:\\$commentdata:array} )",
        "description": "Inserts a comment into the database."
    },
    "Function: wp_insert_link": {
        "prefix": "wp_insert_link",
        "body": "wp_insert_link( ${1:\\$linkdata:array}, ${2:\\$wp_error:boolean} )",
        "description": "Inserts/updates links into/in the database."
    },
    "Function: wp_insert_post": {
        "prefix": "wp_insert_post",
        "body": "wp_insert_post( ${1:\\$postarr:array}, ${2:\\$wp_error:boolean} )",
        "description": "Insert or update a post."
    },
    "Function: wp_insert_term": {
        "prefix": "wp_insert_term",
        "body": "wp_insert_term( ${1:\\$term:string}, ${2:\\$taxonomy:string}, ${3:\\$args:array|string} )",
        "description": "Add a new term to the database."
    },
    "Function: wp_insert_user": {
        "prefix": "wp_insert_user",
        "body": "wp_insert_user( ${1:\\$userdata:array|object|WP_User} )",
        "description": "Insert a user into the database."
    },
    "Function: wp_install": {
        "prefix": "wp_install",
        "body": "wp_install( ${1:\\$blog_title:string}, ${2:\\$user_name:string}, ${3:\\$user_email:string}, ${4:\\$public:boolean}, ${5:\\$deprecated:string}, ${6:\\$user_password:string}, ${7:\\$language:string} )",
        "description": "Installs the site."
    },
    "Function: wp_install_defaults": {
        "prefix": "wp_install_defaults",
        "body": "wp_install_defaults( ${1:\\$user_id:integer} )",
        "description": "Creates the initial content for a newly-installed site."
    },
    "Function: wp_install_language_form": {
        "prefix": "wp_install_language_form",
        "body": "wp_install_language_form( ${1:\\$languages:array} )",
        "description": "Output the select form for the language selection on the installation screen."
    },
    "Function: wp_install_maybe_enable_pretty_permalinks": {
        "prefix": "wp_install_maybe_enable_pretty_permalinks",
        "body": "wp_install_maybe_enable_pretty_permalinks(  )",
        "description": "Maybe enable pretty permalinks on installation."
    },
    "Function: wp_installing": {
        "prefix": "wp_installing",
        "body": "wp_installing( ${1:\\$is_installing:boolean|null} )",
        "description": "Check or set whether WordPress is in &quot;installation&quot; mode."
    },
    "Function: wp_is_file_mod_allowed": {
        "prefix": "wp_is_file_mod_allowed",
        "body": "wp_is_file_mod_allowed( ${1:\\$context:string} )",
        "description": "Determines whether file modifications are allowed."
    },
    "Function: wp_is_ini_value_changeable": {
        "prefix": "wp_is_ini_value_changeable",
        "body": "wp_is_ini_value_changeable( ${1:\\$setting:string} )",
        "description": "Determines whether a PHP ini value is changeable at runtime."
    },
    "Function: wp_is_large_network": {
        "prefix": "wp_is_large_network",
        "body": "wp_is_large_network( ${1:\\$using:string}, ${2:\\$network_id:integer|null} )",
        "description": "Whether or not we have a large network."
    },
    "Function: wp_is_mobile": {
        "prefix": "wp_is_mobile",
        "body": "wp_is_mobile(  )",
        "description": "Test if the current browser runs on a mobile device (smart phone, tablet, etc.)"
    },
    "Function: wp_is_numeric_array": {
        "prefix": "wp_is_numeric_array",
        "body": "wp_is_numeric_array( ${1:\\$data:mixed} )",
        "description": "Determines if the variable is a numeric-indexed array."
    },
    "Function: wp_is_post_autosave": {
        "prefix": "wp_is_post_autosave",
        "body": "wp_is_post_autosave( ${1:\\$post:integer|WP_Post} )",
        "description": "Determines if the specified post is an autosave."
    },
    "Function: wp_is_post_revision": {
        "prefix": "wp_is_post_revision",
        "body": "wp_is_post_revision( ${1:\\$post:integer|WP_Post} )",
        "description": "Determines if the specified post is a revision."
    },
    "Function: wp_is_stream": {
        "prefix": "wp_is_stream",
        "body": "wp_is_stream( ${1:\\$path:string} )",
        "description": "Test if a given path is a stream URL"
    },
    "Function: wp_is_uuid": {
        "prefix": "wp_is_uuid",
        "body": "wp_is_uuid( ${1:\\$uuid:mixed}, ${2:\\$version:integer|null} )",
        "description": "Validates that a UUID is valid."
    },
    "Function: wp_is_writable": {
        "prefix": "wp_is_writable",
        "body": "wp_is_writable( ${1:\\$path:string} )",
        "description": "Determine if a directory is writable."
    },
    "Function: wp_iso_descrambler": {
        "prefix": "wp_iso_descrambler",
        "body": "wp_iso_descrambler( ${1:\\$string:string} )",
        "description": "Convert to ASCII from email subjects."
    },
    "Function: wp_json_encode": {
        "prefix": "wp_json_encode",
        "body": "wp_json_encode( ${1:\\$data:mixed}, ${2:\\$options:integer}, ${3:\\$depth:integer} )",
        "description": "Encode a variable into JSON, with some sanity checks."
    },
    "Function: wp_just_in_time_script_localization": {
        "prefix": "wp_just_in_time_script_localization",
        "body": "wp_just_in_time_script_localization(  )",
        "description": "Load localized data on print rather than initialization."
    },
    "Function: wp_kses": {
        "prefix": "wp_kses",
        "body": "wp_kses( ${1:\\$string:string}, ${2:\\$allowed_html:array}, ${3:\\$allowed_protocols:array} )",
        "description": "Filters content and keeps only allowable HTML elements."
    },
    "Function: wp_kses_allowed_html": {
        "prefix": "wp_kses_allowed_html",
        "body": "wp_kses_allowed_html( ${1:\\$context:string|array} )",
        "description": "Return a list of allowed tags and attributes for a given context."
    },
    "Function: wp_kses_array_lc": {
        "prefix": "wp_kses_array_lc",
        "body": "wp_kses_array_lc( ${1:\\$inarray:array} )",
        "description": "Goes through an array and changes the keys to all lower case."
    },
    "Function: wp_kses_attr": {
        "prefix": "wp_kses_attr",
        "body": "wp_kses_attr( ${1:\\$element:string}, ${2:\\$attr:string}, ${3:\\$allowed_html:array}, ${4:\\$allowed_protocols:array} )",
        "description": "Removes all attributes, if none are allowed for this element."
    },
    "Function: wp_kses_attr_check": {
        "prefix": "wp_kses_attr_check",
        "body": "wp_kses_attr_check( ${1:\\$name:string}, ${2:\\$value:string}, ${3:\\$whole:string}, ${4:\\$vless:string}, ${5:\\$element:string}, ${6:\\$allowed_html:array} )",
        "description": "Determine whether an attribute is allowed."
    },
    "Function: wp_kses_attr_parse": {
        "prefix": "wp_kses_attr_parse",
        "body": "wp_kses_attr_parse( ${1:\\$element:string} )",
        "description": "Finds all attributes of an HTML element."
    },
    "Function: wp_kses_bad_protocol": {
        "prefix": "wp_kses_bad_protocol",
        "body": "wp_kses_bad_protocol( ${1:\\$string:string}, ${2:\\$allowed_protocols:array} )",
        "description": "Sanitize string from bad protocols."
    },
    "Function: wp_kses_bad_protocol_once": {
        "prefix": "wp_kses_bad_protocol_once",
        "body": "wp_kses_bad_protocol_once( ${1:\\$string:string}, ${2:\\$allowed_protocols:string}, ${3:\\$count:} )",
        "description": "Sanitizes content from bad protocols and other characters."
    },
    "Function: wp_kses_bad_protocol_once2": {
        "prefix": "wp_kses_bad_protocol_once2",
        "body": "wp_kses_bad_protocol_once2( ${1:\\$string:string}, ${2:\\$allowed_protocols:string} )",
        "description": "Callback for wp_kses_bad_protocol_once() regular expression."
    },
    "Function: wp_kses_check_attr_val": {
        "prefix": "wp_kses_check_attr_val",
        "body": "wp_kses_check_attr_val( ${1:\\$value:string}, ${2:\\$vless:string}, ${3:\\$checkname:string}, ${4:\\$checkvalue:mixed} )",
        "description": "Performs different checks for attribute values."
    },
    "Function: wp_kses_data": {
        "prefix": "wp_kses_data",
        "body": "wp_kses_data( ${1:\\$data:string} )",
        "description": "Sanitize content with allowed HTML Kses rules."
    },
    "Function: wp_kses_decode_entities": {
        "prefix": "wp_kses_decode_entities",
        "body": "wp_kses_decode_entities( ${1:\\$string:string} )",
        "description": "Convert all entities to their character counterparts."
    },
    "Function: wp_kses_hair": {
        "prefix": "wp_kses_hair",
        "body": "wp_kses_hair( ${1:\\$attr:string}, ${2:\\$allowed_protocols:array} )",
        "description": "Builds an attribute list from string containing attributes."
    },
    "Function: wp_kses_hair_parse": {
        "prefix": "wp_kses_hair_parse",
        "body": "wp_kses_hair_parse( ${1:\\$attr:string} )",
        "description": "Builds an attribute list from string containing attributes."
    },
    "Function: wp_kses_hook": {
        "prefix": "wp_kses_hook",
        "body": "wp_kses_hook( ${1:\\$string:string}, ${2:\\$allowed_html:array}, ${3:\\$allowed_protocols:array} )",
        "description": "You add any kses hooks here."
    },
    "Function: wp_kses_html_error": {
        "prefix": "wp_kses_html_error",
        "body": "wp_kses_html_error( ${1:\\$string:string} )",
        "description": "Handles parsing errors in wp_kses_hair()."
    },
    "Function: wp_kses_js_entities": {
        "prefix": "wp_kses_js_entities",
        "body": "wp_kses_js_entities( ${1:\\$string:string} )",
        "description": "Removes the HTML JavaScript entities found in early versions of Netscape 4."
    },
    "Function: wp_kses_named_entities": {
        "prefix": "wp_kses_named_entities",
        "body": "wp_kses_named_entities( ${1:\\$matches:array} )",
        "description": "Callback for wp_kses_normalize_entities() regular expression."
    },
    "Function: wp_kses_no_null": {
        "prefix": "wp_kses_no_null",
        "body": "wp_kses_no_null( ${1:\\$string:string}, ${2:\\$options:array|null} )",
        "description": "Removes any invalid control characters in $string."
    },
    "Function: wp_kses_normalize_entities": {
        "prefix": "wp_kses_normalize_entities",
        "body": "wp_kses_normalize_entities( ${1:\\$string:string} )",
        "description": "Converts and fixes HTML entities."
    },
    "Function: wp_kses_normalize_entities2": {
        "prefix": "wp_kses_normalize_entities2",
        "body": "wp_kses_normalize_entities2( ${1:\\$matches:array} )",
        "description": "Callback for wp_kses_normalize_entities() regular expression."
    },
    "Function: wp_kses_normalize_entities3": {
        "prefix": "wp_kses_normalize_entities3",
        "body": "wp_kses_normalize_entities3( ${1:\\$matches:array} )",
        "description": "Callback for wp_kses_normalize_entities() for regular expression."
    },
    "Function: wp_kses_one_attr": {
        "prefix": "wp_kses_one_attr",
        "body": "wp_kses_one_attr( ${1:\\$string:string}, ${2:\\$element:string} )",
        "description": "Filters one attribute only and ensures its value is allowed."
    },
    "Function: wp_kses_post": {
        "prefix": "wp_kses_post",
        "body": "wp_kses_post( ${1:\\$data:string} )",
        "description": "Sanitize content for allowed HTML tags for post content."
    },
    "Function: wp_kses_post_deep": {
        "prefix": "wp_kses_post_deep",
        "body": "wp_kses_post_deep( ${1:\\$data:mixed} )",
        "description": "Navigates through an array, object, or scalar, and sanitizes content for allowed HTML tags for post content."
    },
    "Function: wp_kses_split": {
        "prefix": "wp_kses_split",
        "body": "wp_kses_split( ${1:\\$string:string}, ${2:\\$allowed_html:array}, ${3:\\$allowed_protocols:array} )",
        "description": "Searches for HTML tags, no matter how malformed."
    },
    "Function: wp_kses_split2": {
        "prefix": "wp_kses_split2",
        "body": "wp_kses_split2( ${1:\\$string:string}, ${2:\\$allowed_html:array}, ${3:\\$allowed_protocols:array} )",
        "description": "Callback for wp_kses_split for fixing malformed HTML tags."
    },
    "Function: wp_kses_stripslashes": {
        "prefix": "wp_kses_stripslashes",
        "body": "wp_kses_stripslashes( ${1:\\$string:string} )",
        "description": "Strips slashes from in front of quotes."
    },
    "Function: wp_kses_version": {
        "prefix": "wp_kses_version",
        "body": "wp_kses_version(  )",
        "description": "This function returns kses&#039; version number."
    },
    "Function: wp_link_category_checklist": {
        "prefix": "wp_link_category_checklist",
        "body": "wp_link_category_checklist( ${1:\\$link_id:integer} )",
        "description": "Outputs a link category checklist element."
    },
    "Function: wp_link_manager_disabled_message": {
        "prefix": "wp_link_manager_disabled_message",
        "body": "wp_link_manager_disabled_message(  )",
        "description": "Outputs the &#039;disabled&#039; message for the WordPress Link Manager."
    },
    "Function: wp_link_pages": {
        "prefix": "wp_link_pages",
        "body": "wp_link_pages( ${1:\\$args:string|array} )",
        "description": "The formatted output of a list of pages."
    },
    "Function: wp_list_authors": {
        "prefix": "wp_list_authors",
        "body": "wp_list_authors( ${1:\\$args:string|array} )",
        "description": "List all the authors of the site, with several options available."
    },
    "Function: wp_list_bookmarks": {
        "prefix": "wp_list_bookmarks",
        "body": "wp_list_bookmarks( ${1:\\$args:string|array} )",
        "description": "Retrieve or echo all of the bookmarks."
    },
    "Function: wp_list_categories": {
        "prefix": "wp_list_categories",
        "body": "wp_list_categories( ${1:\\$args:string|array} )",
        "description": "Display or retrieve the HTML list of categories."
    },
    "Function: wp_list_cats": {
        "prefix": "wp_list_cats",
        "body": "wp_list_cats( ${1:\\$args:string|array} )",
        "description": "Lists categories."
    },
    "Function: wp_list_comments": {
        "prefix": "wp_list_comments",
        "body": "wp_list_comments( ${1:\\$args:string|array}, ${2:\\$comments:array|null} )",
        "description": "List comments."
    },
    "Function: wp_list_filter": {
        "prefix": "wp_list_filter",
        "body": "wp_list_filter( ${1:\\$list:array}, ${2:\\$args:array}, ${3:\\$operator:string} )",
        "description": "Filters a list of objects, based on a set of key =&gt; value arguments."
    },
    "Function: wp_list_pages": {
        "prefix": "wp_list_pages",
        "body": "wp_list_pages( ${1:\\$args:array|string} )",
        "description": "Retrieve or display list of pages (or hierarchical post type items) in list (li) format."
    },
    "Function: wp_list_pluck": {
        "prefix": "wp_list_pluck",
        "body": "wp_list_pluck( ${1:\\$list:array}, ${2:\\$field:integer|string}, ${3:\\$index_key:integer|string|null} )",
        "description": "Pluck a certain field out of each object in a list."
    },
    "Function: wp_list_post_revisions": {
        "prefix": "wp_list_post_revisions",
        "body": "wp_list_post_revisions( ${1:\\$post_id:integer|WP_Post}, ${2:\\$type:string} )",
        "description": "Display list of a post&#039;s revisions."
    },
    "Function: wp_list_sort": {
        "prefix": "wp_list_sort",
        "body": "wp_list_sort( ${1:\\$list:array}, ${2:\\$orderby:string|array}, ${3:\\$order:string}, ${4:\\$preserve_keys:boolean} )",
        "description": "Sorts a list of objects, based on one or more orderby arguments."
    },
    "Function: wp_list_widget_controls": {
        "prefix": "wp_list_widget_controls",
        "body": "wp_list_widget_controls( ${1:\\$sidebar:string}, ${2:\\$sidebar_name:string} )",
        "description": "Show the widgets and their settings for a sidebar."
    },
    "Function: wp_list_widget_controls_dynamic_sidebar": {
        "prefix": "wp_list_widget_controls_dynamic_sidebar",
        "body": "wp_list_widget_controls_dynamic_sidebar( ${1:\\$params:array} )",
        "description": "Retrieves the widget control arguments."
    },
    "Function: wp_list_widgets": {
        "prefix": "wp_list_widgets",
        "body": "wp_list_widgets(  )",
        "description": "Display list of the available widgets."
    },
    "Function: wp_load_alloptions": {
        "prefix": "wp_load_alloptions",
        "body": "wp_load_alloptions(  )",
        "description": "Loads and caches all autoloaded options, if available or all options."
    },
    "Function: wp_load_core_site_options": {
        "prefix": "wp_load_core_site_options",
        "body": "wp_load_core_site_options( ${1:\\$network_id:integer|null} )",
        "description": "Loads and caches certain often requested site options if is_multisite() and a persistent cache is not being used."
    },
    "Function: wp_load_image": {
        "prefix": "wp_load_image",
        "body": "wp_load_image( ${1:\\$file:string} )",
        "description": "Load an image from a string, if PHP supports it."
    },
    "Function: wp_load_press_this": {
        "prefix": "wp_load_press_this",
        "body": "wp_load_press_this(  )",
        "description": ""
    },
    "Function: wp_load_translations_early": {
        "prefix": "wp_load_translations_early",
        "body": "wp_load_translations_early(  )",
        "description": "Attempt an early load of translations."
    },
    "Function: wp_localize_community_events": {
        "prefix": "wp_localize_community_events",
        "body": "wp_localize_community_events(  )",
        "description": "Localizes community events data that needs to be passed to dashboard.js."
    },
    "Function: wp_localize_jquery_ui_datepicker": {
        "prefix": "wp_localize_jquery_ui_datepicker",
        "body": "wp_localize_jquery_ui_datepicker(  )",
        "description": "Localizes the jQuery UI datepicker."
    },
    "Function: wp_localize_script": {
        "prefix": "wp_localize_script",
        "body": "wp_localize_script( ${1:\\$handle:string}, ${2:\\$object_name:string}, ${3:\\$l10n:array} )",
        "description": "Localize a script."
    },
    "Function: wp_login": {
        "prefix": "wp_login",
        "body": "wp_login( ${1:\\$username:string}, ${2:\\$password:string}, ${3:\\$deprecated:string} )",
        "description": "Checks a users login information and logs them in if it checks out. This function is deprecated."
    },
    "Function: wp_login_form": {
        "prefix": "wp_login_form",
        "body": "wp_login_form( ${1:\\$args:array} )",
        "description": "Provides a simple login form for use anywhere within WordPress."
    },
    "Function: wp_login_url": {
        "prefix": "wp_login_url",
        "body": "wp_login_url( ${1:\\$redirect:string}, ${2:\\$force_reauth:boolean} )",
        "description": "Retrieves the login URL."
    },
    "Function: wp_login_viewport_meta": {
        "prefix": "wp_login_viewport_meta",
        "body": "wp_login_viewport_meta(  )",
        "description": ""
    },
    "Function: wp_loginout": {
        "prefix": "wp_loginout",
        "body": "wp_loginout( ${1:\\$redirect:string}, ${2:\\$echo:boolean} )",
        "description": "Display the Log In/Out link."
    },
    "Function: wp_logout": {
        "prefix": "wp_logout",
        "body": "wp_logout(  )",
        "description": "Log the current user out."
    },
    "Function: wp_logout_url": {
        "prefix": "wp_logout_url",
        "body": "wp_logout_url( ${1:\\$redirect:string} )",
        "description": "Retrieves the logout URL."
    },
    "Function: wp_lostpassword_url": {
        "prefix": "wp_lostpassword_url",
        "body": "wp_lostpassword_url( ${1:\\$redirect:string} )",
        "description": "Returns the URL that allows the user to retrieve the lost password"
    },
    "Function: wp_magic_quotes": {
        "prefix": "wp_magic_quotes",
        "body": "wp_magic_quotes(  )",
        "description": "Add magic quotes to `$_GET`, `$_POST`, `$_COOKIE`, and `$_SERVER`."
    },
    "Function: wp_mail": {
        "prefix": "wp_mail",
        "body": "wp_mail( ${1:\\$to:string|array}, ${2:\\$subject:string}, ${3:\\$message:string}, ${4:\\$headers:string|array}, ${5:\\$attachments:string|array} )",
        "description": "Send mail, similar to PHP&#039;s mail"
    },
    "Function: wp_maintenance": {
        "prefix": "wp_maintenance",
        "body": "wp_maintenance(  )",
        "description": "Die with a maintenance message when conditions are met."
    },
    "Function: wp_make_content_images_responsive": {
        "prefix": "wp_make_content_images_responsive",
        "body": "wp_make_content_images_responsive( ${1:\\$content:string} )",
        "description": "Filters &#039;img&#039; elements in post content to add &#039;srcset&#039; and &#039;sizes&#039; attributes."
    },
    "Function: wp_make_link_relative": {
        "prefix": "wp_make_link_relative",
        "body": "wp_make_link_relative( ${1:\\$link:string} )",
        "description": "Convert full URL paths to absolute paths."
    },
    "Function: wp_make_plugin_file_tree": {
        "prefix": "wp_make_plugin_file_tree",
        "body": "wp_make_plugin_file_tree( ${1:\\$plugin_editable_files:string} )",
        "description": "Makes a tree structure for the Plugin Editor&#039;s file list."
    },
    "Function: wp_make_theme_file_tree": {
        "prefix": "wp_make_theme_file_tree",
        "body": "wp_make_theme_file_tree( ${1:\\$allowed_files:array} )",
        "description": "Makes a tree structure for the Theme Editor&#039;s file list."
    },
    "Function: wp_map_nav_menu_locations": {
        "prefix": "wp_map_nav_menu_locations",
        "body": "wp_map_nav_menu_locations( ${1:\\$new_nav_menu_locations:array}, ${2:\\$old_nav_menu_locations:array} )",
        "description": "Maps nav menu locations according to assignments in previously active theme."
    },
    "Function: wp_map_sidebars_widgets": {
        "prefix": "wp_map_sidebars_widgets",
        "body": "wp_map_sidebars_widgets( ${1:\\$existing_sidebars_widgets:array} )",
        "description": "Compares a list of sidebars with their widgets against a whitelist."
    },
    "Function: wp_match_mime_types": {
        "prefix": "wp_match_mime_types",
        "body": "wp_match_mime_types( ${1:\\$wildcard_mime_types:string|array}, ${2:\\$real_mime_types:string|array} )",
        "description": "Check a MIME-Type against a list."
    },
    "Function: wp_max_upload_size": {
        "prefix": "wp_max_upload_size",
        "body": "wp_max_upload_size(  )",
        "description": "Determines the maximum upload size allowed in php.ini."
    },
    "Function: wp_maybe_auto_update": {
        "prefix": "wp_maybe_auto_update",
        "body": "wp_maybe_auto_update(  )",
        "description": "Performs WordPress automatic background updates."
    },
    "Function: wp_maybe_decline_date": {
        "prefix": "wp_maybe_decline_date",
        "body": "wp_maybe_decline_date( ${1:\\$date:string} )",
        "description": "Determines if the date should be declined."
    },
    "Function: wp_maybe_generate_attachment_metadata": {
        "prefix": "wp_maybe_generate_attachment_metadata",
        "body": "wp_maybe_generate_attachment_metadata( ${1:\\$attachment:WP_Post} )",
        "description": "Maybe attempts to generate attachment metadata, if missing."
    },
    "Function: wp_maybe_grant_install_languages_cap": {
        "prefix": "wp_maybe_grant_install_languages_cap",
        "body": "wp_maybe_grant_install_languages_cap( ${1:\\$allcaps:array} )",
        "description": "Filters the user capabilities to grant the &#039;install_languages&#039; capability as necessary."
    },
    "Function: wp_maybe_load_embeds": {
        "prefix": "wp_maybe_load_embeds",
        "body": "wp_maybe_load_embeds(  )",
        "description": "Determines if default embed handlers should be loaded."
    },
    "Function: wp_maybe_load_widgets": {
        "prefix": "wp_maybe_load_widgets",
        "body": "wp_maybe_load_widgets(  )",
        "description": "Determines if Widgets library should be loaded."
    },
    "Function: wp_maybe_update_network_site_counts": {
        "prefix": "wp_maybe_update_network_site_counts",
        "body": "wp_maybe_update_network_site_counts( ${1:\\$network_id:integer|null} )",
        "description": "Update the count of sites for the current network."
    },
    "Function: wp_maybe_update_network_user_counts": {
        "prefix": "wp_maybe_update_network_user_counts",
        "body": "wp_maybe_update_network_user_counts( ${1:\\$network_id:integer|null} )",
        "description": "Update the network-wide users count."
    },
    "Function: wp_media_attach_action": {
        "prefix": "wp_media_attach_action",
        "body": "wp_media_attach_action( ${1:\\$parent_id:integer}, ${2:\\$action:string} )",
        "description": "Encapsulate logic for Attach/Detach actions"
    },
    "Function: wp_media_insert_url_form": {
        "prefix": "wp_media_insert_url_form",
        "body": "wp_media_insert_url_form( ${1:\\$default_view:string} )",
        "description": "Creates the form for external url"
    },
    "Function: wp_media_personal_data_exporter": {
        "prefix": "wp_media_personal_data_exporter",
        "body": "wp_media_personal_data_exporter( ${1:\\$email_address:string}, ${2:\\$page:integer} )",
        "description": "Finds and exports attachments associated with an email address."
    },
    "Function: wp_media_upload_handler": {
        "prefix": "wp_media_upload_handler",
        "body": "wp_media_upload_handler(  )",
        "description": "Handles the process of uploading media."
    },
    "Function: wp_mediaelement_fallback": {
        "prefix": "wp_mediaelement_fallback",
        "body": "wp_mediaelement_fallback( ${1:\\$url:string} )",
        "description": "Provides a No-JS Flash fallback as a last resort for audio / video."
    },
    "Function: wp_meta": {
        "prefix": "wp_meta",
        "body": "wp_meta(  )",
        "description": "Theme container function for the &#039;wp_meta&#039; action."
    },
    "Function: wp_metadata_lazyloader": {
        "prefix": "wp_metadata_lazyloader",
        "body": "wp_metadata_lazyloader(  )",
        "description": "Retrieves the queue for lazy-loading metadata."
    },
    "Function: wp_mime_type_icon": {
        "prefix": "wp_mime_type_icon",
        "body": "wp_mime_type_icon( ${1:\\$mime:string|integer} )",
        "description": "Retrieve the icon for a MIME type."
    },
    "Function: wp_mkdir_p": {
        "prefix": "wp_mkdir_p",
        "body": "wp_mkdir_p( ${1:\\$target:string} )",
        "description": "Recursive directory creation based on full path."
    },
    "Function: wp_nav_menu": {
        "prefix": "wp_nav_menu",
        "body": "wp_nav_menu( ${1:\\$args:array} )",
        "description": "Displays a navigation menu."
    },
    "Function: wp_nav_menu_disabled_check": {
        "prefix": "wp_nav_menu_disabled_check",
        "body": "wp_nav_menu_disabled_check( ${1:\\$nav_menu_selected_id:integer|string} )",
        "description": "Check whether to disable the Menu Locations meta box submit button"
    },
    "Function: wp_nav_menu_item_link_meta_box": {
        "prefix": "wp_nav_menu_item_link_meta_box",
        "body": "wp_nav_menu_item_link_meta_box(  )",
        "description": "Displays a meta box for the custom links menu item."
    },
    "Function: wp_nav_menu_item_post_type_meta_box": {
        "prefix": "wp_nav_menu_item_post_type_meta_box",
        "body": "wp_nav_menu_item_post_type_meta_box( ${1:\\$object:string}, ${2:\\$box:array} )",
        "description": "Displays a meta box for a post type menu item."
    },
    "Function: wp_nav_menu_item_taxonomy_meta_box": {
        "prefix": "wp_nav_menu_item_taxonomy_meta_box",
        "body": "wp_nav_menu_item_taxonomy_meta_box( ${1:\\$object:string}, ${2:\\$box:array} )",
        "description": "Displays a meta box for a taxonomy menu item."
    },
    "Function: wp_nav_menu_locations_meta_box": {
        "prefix": "wp_nav_menu_locations_meta_box",
        "body": "wp_nav_menu_locations_meta_box(  )",
        "description": "This was once used to display a meta box for the nav menu theme locations."
    },
    "Function: wp_nav_menu_manage_columns": {
        "prefix": "wp_nav_menu_manage_columns",
        "body": "wp_nav_menu_manage_columns(  )",
        "description": "Returns the columns for the nav menus page."
    },
    "Function: wp_nav_menu_max_depth": {
        "prefix": "wp_nav_menu_max_depth",
        "body": "wp_nav_menu_max_depth( ${1:\\$classes:string} )",
        "description": ""
    },
    "Function: wp_nav_menu_post_type_meta_boxes": {
        "prefix": "wp_nav_menu_post_type_meta_boxes",
        "body": "wp_nav_menu_post_type_meta_boxes(  )",
        "description": "Creates meta boxes for any post type menu item."
    },
    "Function: wp_nav_menu_setup": {
        "prefix": "wp_nav_menu_setup",
        "body": "wp_nav_menu_setup(  )",
        "description": "Register nav menu meta boxes and advanced menu items."
    },
    "Function: wp_nav_menu_taxonomy_meta_boxes": {
        "prefix": "wp_nav_menu_taxonomy_meta_boxes",
        "body": "wp_nav_menu_taxonomy_meta_boxes(  )",
        "description": "Creates meta boxes for any taxonomy menu item."
    },
    "Function: wp_nav_menu_update_menu_items": {
        "prefix": "wp_nav_menu_update_menu_items",
        "body": "wp_nav_menu_update_menu_items( ${1:\\$nav_menu_selected_id:integer|string}, ${2:\\$nav_menu_selected_title:string} )",
        "description": "Saves nav menu items"
    },
    "Function: wp_network_admin_email_change_notification": {
        "prefix": "wp_network_admin_email_change_notification",
        "body": "wp_network_admin_email_change_notification( ${1:\\$option_name:string}, ${2:\\$new_email:string}, ${3:\\$old_email:string}, ${4:\\$network_id:integer} )",
        "description": "Send an email to the old network admin email address when the network admin email address changes."
    },
    "Function: wp_network_dashboard_right_now": {
        "prefix": "wp_network_dashboard_right_now",
        "body": "wp_network_dashboard_right_now(  )",
        "description": ""
    },
    "Function: wp_new_blog_notification": {
        "prefix": "wp_new_blog_notification",
        "body": "wp_new_blog_notification( ${1:\\$blog_title:string}, ${2:\\$blog_url:string}, ${3:\\$user_id:integer}, ${4:\\$password:string} )",
        "description": "Notifies the site admin that the setup is complete."
    },
    "Function: wp_new_comment": {
        "prefix": "wp_new_comment",
        "body": "wp_new_comment( ${1:\\$commentdata:array}, ${2:\\$avoid_die:boolean} )",
        "description": "Adds a new comment to the database."
    },
    "Function: wp_new_comment_notify_moderator": {
        "prefix": "wp_new_comment_notify_moderator",
        "body": "wp_new_comment_notify_moderator( ${1:\\$comment_ID:integer} )",
        "description": "Send a comment moderation notification to the comment moderator."
    },
    "Function: wp_new_comment_notify_postauthor": {
        "prefix": "wp_new_comment_notify_postauthor",
        "body": "wp_new_comment_notify_postauthor( ${1:\\$comment_ID:integer} )",
        "description": "Send a notification of a new comment to the post author."
    },
    "Function: wp_new_user_notification": {
        "prefix": "wp_new_user_notification",
        "body": "wp_new_user_notification( ${1:\\$user_id:integer}, ${2:\\$deprecated:null}, ${3:\\$notify:string} )",
        "description": "Email login credentials to a newly-registered user."
    },
    "Function: wp_next_scheduled": {
        "prefix": "wp_next_scheduled",
        "body": "wp_next_scheduled( ${1:\\$hook:string}, ${2:\\$args:array} )",
        "description": "Retrieve the next timestamp for an event."
    },
    "Function: wp_no_robots": {
        "prefix": "wp_no_robots",
        "body": "wp_no_robots(  )",
        "description": "Display a noindex meta tag."
    },
    "Function: wp_nonce_ays": {
        "prefix": "wp_nonce_ays",
        "body": "wp_nonce_ays( ${1:\\$action:string} )",
        "description": "Display &quot;Are You Sure&quot; message to confirm the action being taken."
    },
    "Function: wp_nonce_field": {
        "prefix": "wp_nonce_field",
        "body": "wp_nonce_field( ${1:\\$action:integer|string}, ${2:\\$name:string}, ${3:\\$referer:boolean}, ${4:\\$echo:boolean} )",
        "description": "Retrieve or display nonce hidden field for forms."
    },
    "Function: wp_nonce_tick": {
        "prefix": "wp_nonce_tick",
        "body": "wp_nonce_tick(  )",
        "description": "Get the time-dependent variable for nonce creation."
    },
    "Function: wp_nonce_url": {
        "prefix": "wp_nonce_url",
        "body": "wp_nonce_url( ${1:\\$actionurl:string}, ${2:\\$action:integer|string}, ${3:\\$name:string} )",
        "description": "Retrieve URL with nonce added to URL query."
    },
    "Function: wp_normalize_path": {
        "prefix": "wp_normalize_path",
        "body": "wp_normalize_path( ${1:\\$path:string} )",
        "description": "Normalize a filesystem path."
    },
    "Function: wp_not_installed": {
        "prefix": "wp_not_installed",
        "body": "wp_not_installed(  )",
        "description": "Redirect to the installer if WordPress is not installed."
    },
    "Function: wp_notify_moderator": {
        "prefix": "wp_notify_moderator",
        "body": "wp_notify_moderator( ${1:\\$comment_id:integer} )",
        "description": "Notifies the moderator of the site about a new comment that is awaiting approval."
    },
    "Function: wp_notify_postauthor": {
        "prefix": "wp_notify_postauthor",
        "body": "wp_notify_postauthor( ${1:\\$comment_id:integer|WP_Comment}, ${2:\\$deprecated:string|null} )",
        "description": "Notify an author (and/or others) of a comment/trackback/pingback on a post."
    },
    "Function: wp_ob_end_flush_all": {
        "prefix": "wp_ob_end_flush_all",
        "body": "wp_ob_end_flush_all(  )",
        "description": "Flush all output buffers for PHP 5.2."
    },
    "Function: wp_oembed_add_discovery_links": {
        "prefix": "wp_oembed_add_discovery_links",
        "body": "wp_oembed_add_discovery_links(  )",
        "description": "Adds oEmbed discovery links in the website &lt;head&gt;."
    },
    "Function: wp_oembed_add_host_js": {
        "prefix": "wp_oembed_add_host_js",
        "body": "wp_oembed_add_host_js(  )",
        "description": "Adds the necessary JavaScript to communicate with the embedded iframes."
    },
    "Function: wp_oembed_add_provider": {
        "prefix": "wp_oembed_add_provider",
        "body": "wp_oembed_add_provider( ${1:\\$format:string}, ${2:\\$provider:string}, ${3:\\$regex:boolean} )",
        "description": "Adds a URL format and oEmbed provider URL pair."
    },
    "Function: wp_oembed_ensure_format": {
        "prefix": "wp_oembed_ensure_format",
        "body": "wp_oembed_ensure_format( ${1:\\$format:string} )",
        "description": "Ensures that the specified format is either &#039;json&#039; or &#039;xml&#039;."
    },
    "Function: wp_oembed_get": {
        "prefix": "wp_oembed_get",
        "body": "wp_oembed_get( ${1:\\$url:string}, ${2:\\$args:array} )",
        "description": "Attempts to fetch the embed HTML for a provided URL using oEmbed."
    },
    "Function: wp_oembed_register_route": {
        "prefix": "wp_oembed_register_route",
        "body": "wp_oembed_register_route(  )",
        "description": "Registers the oEmbed REST API route."
    },
    "Function: wp_oembed_remove_provider": {
        "prefix": "wp_oembed_remove_provider",
        "body": "wp_oembed_remove_provider( ${1:\\$format:string} )",
        "description": "Removes an oEmbed provider."
    },
    "Function: wp_old_slug_redirect": {
        "prefix": "wp_old_slug_redirect",
        "body": "wp_old_slug_redirect(  )",
        "description": "Redirect old slugs to the correct permalink."
    },
    "Function: wp_original_referer_field": {
        "prefix": "wp_original_referer_field",
        "body": "wp_original_referer_field( ${1:\\$echo:boolean}, ${2:\\$jump_back_to:string} )",
        "description": "Retrieve or display original referer hidden field for forms."
    },
    "Function: wp_page_menu": {
        "prefix": "wp_page_menu",
        "body": "wp_page_menu( ${1:\\$args:array|string} )",
        "description": "Displays or retrieves a list of pages with an optional home link."
    },
    "Function: wp_page_reload_on_back_button_js": {
        "prefix": "wp_page_reload_on_back_button_js",
        "body": "wp_page_reload_on_back_button_js(  )",
        "description": "Outputs JS that reloads the page if the user navigated to it with the Back or Forward button."
    },
    "Function: wp_parse_args": {
        "prefix": "wp_parse_args",
        "body": "wp_parse_args( ${1:\\$args:string|array|object}, ${2:\\$defaults:array} )",
        "description": "Merge user defined arguments into defaults array."
    },
    "Function: wp_parse_auth_cookie": {
        "prefix": "wp_parse_auth_cookie",
        "body": "wp_parse_auth_cookie( ${1:\\$cookie:string}, ${2:\\$scheme:string} )",
        "description": "Parse a cookie into its components"
    },
    "Function: wp_parse_id_list": {
        "prefix": "wp_parse_id_list",
        "body": "wp_parse_id_list( ${1:\\$list:array|string} )",
        "description": "Clean up an array, comma- or space-separated list of IDs."
    },
    "Function: wp_parse_slug_list": {
        "prefix": "wp_parse_slug_list",
        "body": "wp_parse_slug_list( ${1:\\$list:array|string} )",
        "description": "Clean up an array, comma- or space-separated list of slugs."
    },
    "Function: wp_parse_str": {
        "prefix": "wp_parse_str",
        "body": "wp_parse_str( ${1:\\$string:string}, ${2:\\$array:array} )",
        "description": "Parses a string into variables to be stored in an array."
    },
    "Function: wp_parse_url": {
        "prefix": "wp_parse_url",
        "body": "wp_parse_url( ${1:\\$url:string}, ${2:\\$component:integer} )",
        "description": "A wrapper for PHP&#039;s parse_url() function that handles consistency in the return values across PHP versions."
    },
    "Function: wp_password_change_notification": {
        "prefix": "wp_password_change_notification",
        "body": "wp_password_change_notification( ${1:\\$user:WP_User} )",
        "description": "Notify the blog admin of a user changing password, normally via email."
    },
    "Function: wp_playlist_scripts": {
        "prefix": "wp_playlist_scripts",
        "body": "wp_playlist_scripts( ${1:\\$type:string} )",
        "description": "Outputs and enqueue default scripts and styles for playlists."
    },
    "Function: wp_playlist_shortcode": {
        "prefix": "wp_playlist_shortcode",
        "body": "wp_playlist_shortcode( ${1:\\$attr:array} )",
        "description": "Builds the Playlist shortcode output."
    },
    "Function: wp_plugin_directory_constants": {
        "prefix": "wp_plugin_directory_constants",
        "body": "wp_plugin_directory_constants(  )",
        "description": "Defines plugin directory WordPress constants"
    },
    "Function: wp_plugin_update_row": {
        "prefix": "wp_plugin_update_row",
        "body": "wp_plugin_update_row( ${1:\\$file:string}, ${2:\\$plugin_data:array} )",
        "description": "Displays update information for a plugin."
    },
    "Function: wp_plugin_update_rows": {
        "prefix": "wp_plugin_update_rows",
        "body": "wp_plugin_update_rows(  )",
        "description": ""
    },
    "Function: wp_plupload_default_settings": {
        "prefix": "wp_plupload_default_settings",
        "body": "wp_plupload_default_settings(  )",
        "description": "Prints default Plupload arguments."
    },
    "Function: wp_popular_terms_checklist": {
        "prefix": "wp_popular_terms_checklist",
        "body": "wp_popular_terms_checklist( ${1:\\$taxonomy:string}, ${2:\\$default:integer}, ${3:\\$number:integer}, ${4:\\$echo:boolean} )",
        "description": "Retrieve a list of the most popular terms from the specified taxonomy."
    },
    "Function: wp_post_mime_type_where": {
        "prefix": "wp_post_mime_type_where",
        "body": "wp_post_mime_type_where( ${1:\\$post_mime_types:string|array}, ${2:\\$table_alias:string} )",
        "description": "Convert MIME types into SQL."
    },
    "Function: wp_post_preview_js": {
        "prefix": "wp_post_preview_js",
        "body": "wp_post_preview_js(  )",
        "description": "Outputs a small JS snippet on preview tabs/windows to remove `window.name` on unload."
    },
    "Function: wp_post_revision_title": {
        "prefix": "wp_post_revision_title",
        "body": "wp_post_revision_title( ${1:\\$revision:integer|object}, ${2:\\$link:boolean} )",
        "description": "Retrieve formatted date timestamp of a revision (linked to that revisions&#039;s page)."
    },
    "Function: wp_post_revision_title_expanded": {
        "prefix": "wp_post_revision_title_expanded",
        "body": "wp_post_revision_title_expanded( ${1:\\$revision:integer|object}, ${2:\\$link:boolean} )",
        "description": "Retrieve formatted date timestamp of a revision (linked to that revisions&#039;s page)."
    },
    "Function: wp_pre_kses_less_than": {
        "prefix": "wp_pre_kses_less_than",
        "body": "wp_pre_kses_less_than( ${1:\\$text:string} )",
        "description": "Convert lone less than signs."
    },
    "Function: wp_pre_kses_less_than_callback": {
        "prefix": "wp_pre_kses_less_than_callback",
        "body": "wp_pre_kses_less_than_callback( ${1:\\$matches:array} )",
        "description": "Callback function used by preg_replace."
    },
    "Function: wp_preload_dialogs": {
        "prefix": "wp_preload_dialogs",
        "body": "wp_preload_dialogs(  )",
        "description": "Preloads TinyMCE dialogs."
    },
    "Function: wp_prepare_attachment_for_js": {
        "prefix": "wp_prepare_attachment_for_js",
        "body": "wp_prepare_attachment_for_js( ${1:\\$attachment:mixed} )",
        "description": "Prepares an attachment post object for JS, where it is expected to be JSON-encoded and fit into an Attachment model."
    },
    "Function: wp_prepare_revisions_for_js": {
        "prefix": "wp_prepare_revisions_for_js",
        "body": "wp_prepare_revisions_for_js( ${1:\\$post:object|integer}, ${2:\\$selected_revision_id:integer}, ${3:\\$from:integer|null} )",
        "description": "Prepare revisions for JavaScript."
    },
    "Function: wp_prepare_themes_for_js": {
        "prefix": "wp_prepare_themes_for_js",
        "body": "wp_prepare_themes_for_js( ${1:\\$themes:array|null} )",
        "description": "Prepare themes for JavaScript."
    },
    "Function: wp_print_admin_notice_templates": {
        "prefix": "wp_print_admin_notice_templates",
        "body": "wp_print_admin_notice_templates(  )",
        "description": "Prints the JavaScript templates for update admin notices."
    },
    "Function: wp_print_community_events_markup": {
        "prefix": "wp_print_community_events_markup",
        "body": "wp_print_community_events_markup(  )",
        "description": "Prints the markup for the Community Events section of the Events and News Dashboard widget."
    },
    "Function: wp_print_community_events_templates": {
        "prefix": "wp_print_community_events_templates",
        "body": "wp_print_community_events_templates(  )",
        "description": "Renders the events templates for the Event and News widget."
    },
    "Function: wp_print_editor_js": {
        "prefix": "wp_print_editor_js",
        "body": "wp_print_editor_js(  )",
        "description": "Prints TinyMCE editor JS."
    },
    "Function: wp_print_file_editor_templates": {
        "prefix": "wp_print_file_editor_templates",
        "body": "wp_print_file_editor_templates(  )",
        "description": "Print file editor templates (for plugins and themes)."
    },
    "Function: wp_print_footer_scripts": {
        "prefix": "wp_print_footer_scripts",
        "body": "wp_print_footer_scripts(  )",
        "description": "Hooks to print the scripts and styles in the footer."
    },
    "Function: wp_print_head_scripts": {
        "prefix": "wp_print_head_scripts",
        "body": "wp_print_head_scripts(  )",
        "description": "Prints the script queue in the HTML head on the front end."
    },
    "Function: wp_print_media_templates": {
        "prefix": "wp_print_media_templates",
        "body": "wp_print_media_templates(  )",
        "description": "Prints the templates used in the media manager."
    },
    "Function: wp_print_plugin_file_tree": {
        "prefix": "wp_print_plugin_file_tree",
        "body": "wp_print_plugin_file_tree( ${1:\\$tree:array|string}, ${2:\\$label:string}, ${3:\\$level:integer}, ${4:\\$size:integer}, ${5:\\$index:integer} )",
        "description": "Outputs the formatted file list for the Plugin Editor."
    },
    "Function: wp_print_request_filesystem_credentials_modal": {
        "prefix": "wp_print_request_filesystem_credentials_modal",
        "body": "wp_print_request_filesystem_credentials_modal(  )",
        "description": "Print the filesystem credentials modal when needed."
    },
    "Function: wp_print_revision_templates": {
        "prefix": "wp_print_revision_templates",
        "body": "wp_print_revision_templates(  )",
        "description": "Print JavaScript templates required for the revisions experience."
    },
    "Function: wp_print_scripts": {
        "prefix": "wp_print_scripts",
        "body": "wp_print_scripts( ${1:\\$handles:string|boolean|array} )",
        "description": "Prints scripts in document head that are in the $handles queue."
    },
    "Function: wp_print_styles": {
        "prefix": "wp_print_styles",
        "body": "wp_print_styles( ${1:\\$handles:string|boolean|array} )",
        "description": "Display styles that are in the $handles queue."
    },
    "Function: wp_print_theme_file_tree": {
        "prefix": "wp_print_theme_file_tree",
        "body": "wp_print_theme_file_tree( ${1:\\$tree:array|string}, ${2:\\$level:integer}, ${3:\\$size:integer}, ${4:\\$index:integer} )",
        "description": "Outputs the formatted file list for the Theme Editor."
    },
    "Function: wp_print_update_row_templates": {
        "prefix": "wp_print_update_row_templates",
        "body": "wp_print_update_row_templates(  )",
        "description": "Prints the JavaScript templates for update and deletion rows in list tables."
    },
    "Function: wp_privacy_anonymize_data": {
        "prefix": "wp_privacy_anonymize_data",
        "body": "wp_privacy_anonymize_data( ${1:\\$type:string}, ${2:\\$data:string} )",
        "description": "Return uniform &quot;anonymous&quot; data by type."
    },
    "Function: wp_privacy_anonymize_ip": {
        "prefix": "wp_privacy_anonymize_ip",
        "body": "wp_privacy_anonymize_ip( ${1:\\$ip_addr:string}, ${2:\\$ipv6_fallback:boolean} )",
        "description": "Return an anonymized IPv4 or IPv6 address."
    },
    "Function: wp_privacy_delete_old_export_files": {
        "prefix": "wp_privacy_delete_old_export_files",
        "body": "wp_privacy_delete_old_export_files(  )",
        "description": "Cleans up export files older than three days old."
    },
    "Function: wp_privacy_exports_dir": {
        "prefix": "wp_privacy_exports_dir",
        "body": "wp_privacy_exports_dir(  )",
        "description": "Returns the directory used to store personal data export files."
    },
    "Function: wp_privacy_exports_url": {
        "prefix": "wp_privacy_exports_url",
        "body": "wp_privacy_exports_url(  )",
        "description": "Returns the URL of the directory used to store personal data export files."
    },
    "Function: wp_privacy_generate_personal_data_export_file": {
        "prefix": "wp_privacy_generate_personal_data_export_file",
        "body": "wp_privacy_generate_personal_data_export_file( ${1:\\$request_id:integer} )",
        "description": "Generate the personal data export file."
    },
    "Function: wp_privacy_generate_personal_data_export_group_html": {
        "prefix": "wp_privacy_generate_personal_data_export_group_html",
        "body": "wp_privacy_generate_personal_data_export_group_html( ${1:\\$group_data:array} )",
        "description": "Generate a single group for the personal data export report."
    },
    "Function: wp_privacy_process_personal_data_erasure_page": {
        "prefix": "wp_privacy_process_personal_data_erasure_page",
        "body": "wp_privacy_process_personal_data_erasure_page( ${1:\\$response:array}, ${2:\\$eraser_index:integer}, ${3:\\$email_address:string}, ${4:\\$page:integer}, ${5:\\$request_id:integer} )",
        "description": "Mark erasure requests as completed after processing is finished."
    },
    "Function: wp_privacy_process_personal_data_export_page": {
        "prefix": "wp_privacy_process_personal_data_export_page",
        "body": "wp_privacy_process_personal_data_export_page( ${1:\\$response:array}, ${2:\\$exporter_index:integer}, ${3:\\$email_address:string}, ${4:\\$page:integer}, ${5:\\$request_id:integer}, ${6:\\$send_as_email:boolean}, ${7:\\$exporter_key:string} )",
        "description": "Intercept personal data exporter page ajax responses in order to assemble the personal data export file."
    },
    "Function: wp_privacy_send_personal_data_export_email": {
        "prefix": "wp_privacy_send_personal_data_export_email",
        "body": "wp_privacy_send_personal_data_export_email( ${1:\\$request_id:integer} )",
        "description": "Send an email to the user with a link to the personal data export file"
    },
    "Function: wp_protect_special_option": {
        "prefix": "wp_protect_special_option",
        "body": "wp_protect_special_option( ${1:\\$option:string} )",
        "description": "Protect WordPress special option from being modified."
    },
    "Function: wp_prototype_before_jquery": {
        "prefix": "wp_prototype_before_jquery",
        "body": "wp_prototype_before_jquery( ${1:\\$js_array:array} )",
        "description": "Reorder JavaScript scripts array to place prototype before jQuery."
    },
    "Function: wp_publish_post": {
        "prefix": "wp_publish_post",
        "body": "wp_publish_post( ${1:\\$post:integer|WP_Post} )",
        "description": "Publish a post by transitioning the post status."
    },
    "Function: wp_queue_comments_for_comment_meta_lazyload": {
        "prefix": "wp_queue_comments_for_comment_meta_lazyload",
        "body": "wp_queue_comments_for_comment_meta_lazyload( ${1:\\$comments:array} )",
        "description": "Queues comments for metadata lazy-loading."
    },
    "Function: wp_queue_posts_for_term_meta_lazyload": {
        "prefix": "wp_queue_posts_for_term_meta_lazyload",
        "body": "wp_queue_posts_for_term_meta_lazyload( ${1:\\$posts:array} )",
        "description": "Queues posts for lazy-loading of term meta."
    },
    "Function: wp_quicktags": {
        "prefix": "wp_quicktags",
        "body": "wp_quicktags(  )",
        "description": "Handles quicktags."
    },
    "Function: wp_raise_memory_limit": {
        "prefix": "wp_raise_memory_limit",
        "body": "wp_raise_memory_limit( ${1:\\$context:string} )",
        "description": "Attempts to raise the PHP memory limit for memory intensive processes."
    },
    "Function: wp_rand": {
        "prefix": "wp_rand",
        "body": "wp_rand( ${1:\\$min:integer}, ${2:\\$max:integer} )",
        "description": "Generates a random number"
    },
    "Function: wp_read_audio_metadata": {
        "prefix": "wp_read_audio_metadata",
        "body": "wp_read_audio_metadata( ${1:\\$file:string} )",
        "description": "Retrieve metadata from a audio file&#039;s ID3 tags"
    },
    "Function: wp_read_image_metadata": {
        "prefix": "wp_read_image_metadata",
        "body": "wp_read_image_metadata( ${1:\\$file:string} )",
        "description": "Get extended image metadata, exif or iptc as available."
    },
    "Function: wp_read_video_metadata": {
        "prefix": "wp_read_video_metadata",
        "body": "wp_read_video_metadata( ${1:\\$file:string} )",
        "description": "Retrieve metadata from a video file&#039;s ID3 tags"
    },
    "Function: wp_redirect": {
        "prefix": "wp_redirect",
        "body": "wp_redirect( ${1:\\$location:string}, ${2:\\$status:integer} )",
        "description": "Redirects to another page."
    },
    "Function: wp_redirect_admin_locations": {
        "prefix": "wp_redirect_admin_locations",
        "body": "wp_redirect_admin_locations(  )",
        "description": "Redirects a variety of shorthand URLs to the admin."
    },
    "Function: wp_referer_field": {
        "prefix": "wp_referer_field",
        "body": "wp_referer_field( ${1:\\$echo:boolean} )",
        "description": "Retrieve or display referer hidden field for forms."
    },
    "Function: wp_refresh_post_lock": {
        "prefix": "wp_refresh_post_lock",
        "body": "wp_refresh_post_lock( ${1:\\$response:array}, ${2:\\$data:array}, ${3:\\$screen_id:string} )",
        "description": "Check lock status on the New/Edit Post screen and refresh the lock"
    },
    "Function: wp_refresh_post_nonces": {
        "prefix": "wp_refresh_post_nonces",
        "body": "wp_refresh_post_nonces( ${1:\\$response:array}, ${2:\\$data:array}, ${3:\\$screen_id:string} )",
        "description": "Check nonce expiration on the New/Edit Post screen and refresh if needed"
    },
    "Function: wp_register": {
        "prefix": "wp_register",
        "body": "wp_register( ${1:\\$before:string}, ${2:\\$after:string}, ${3:\\$echo:boolean} )",
        "description": "Display the Registration or Admin link."
    },
    "Function: wp_register_comment_personal_data_eraser": {
        "prefix": "wp_register_comment_personal_data_eraser",
        "body": "wp_register_comment_personal_data_eraser( ${1:\\$erasers:array} )",
        "description": "Registers the personal data eraser for comments."
    },
    "Function: wp_register_comment_personal_data_exporter": {
        "prefix": "wp_register_comment_personal_data_exporter",
        "body": "wp_register_comment_personal_data_exporter( ${1:\\$exporters:array} )",
        "description": "Registers the personal data exporter for comments."
    },
    "Function: wp_register_media_personal_data_exporter": {
        "prefix": "wp_register_media_personal_data_exporter",
        "body": "wp_register_media_personal_data_exporter( ${1:\\$exporters:array} )",
        "description": "Registers the personal data exporter for media"
    },
    "Function: wp_register_plugin_realpath": {
        "prefix": "wp_register_plugin_realpath",
        "body": "wp_register_plugin_realpath( ${1:\\$file:string} )",
        "description": "Register a plugin&#039;s real path."
    },
    "Function: wp_register_script": {
        "prefix": "wp_register_script",
        "body": "wp_register_script( ${1:\\$handle:string}, ${2:\\$src:string}, ${3:\\$deps:array}, ${4:\\$ver:string|boolean|null}, ${5:\\$in_footer:boolean} )",
        "description": "Register a new script."
    },
    "Function: wp_register_sidebar_widget": {
        "prefix": "wp_register_sidebar_widget",
        "body": "wp_register_sidebar_widget( ${1:\\$id:integer|string}, ${2:\\$name:string}, ${3:\\$output_callback:callable}, ${4:\\$options:array} )",
        "description": "Register an instance of a widget."
    },
    "Function: wp_register_style": {
        "prefix": "wp_register_style",
        "body": "wp_register_style( ${1:\\$handle:string}, ${2:\\$src:string}, ${3:\\$deps:array}, ${4:\\$ver:string|boolean|null}, ${5:\\$media:string} )",
        "description": "Register a CSS stylesheet."
    },
    "Function: wp_register_user_personal_data_exporter": {
        "prefix": "wp_register_user_personal_data_exporter",
        "body": "wp_register_user_personal_data_exporter( ${1:\\$exporters:array} )",
        "description": "Registers the personal data exporter for users."
    },
    "Function: wp_register_widget_control": {
        "prefix": "wp_register_widget_control",
        "body": "wp_register_widget_control( ${1:\\$id:integer|string}, ${2:\\$name:string}, ${3:\\$control_callback:callable}, ${4:\\$options:array} )",
        "description": "Registers widget control callback for customizing options."
    },
    "Function: wp_registration_url": {
        "prefix": "wp_registration_url",
        "body": "wp_registration_url(  )",
        "description": "Returns the URL that allows the user to register on the site."
    },
    "Function: wp_rel_nofollow": {
        "prefix": "wp_rel_nofollow",
        "body": "wp_rel_nofollow( ${1:\\$text:string} )",
        "description": "Adds rel nofollow string to all HTML A elements in content."
    },
    "Function: wp_rel_nofollow_callback": {
        "prefix": "wp_rel_nofollow_callback",
        "body": "wp_rel_nofollow_callback( ${1:\\$matches:array} )",
        "description": "Callback to add rel=nofollow string to HTML A element."
    },
    "Function: wp_remote_fopen": {
        "prefix": "wp_remote_fopen",
        "body": "wp_remote_fopen( ${1:\\$uri:string} )",
        "description": "HTTP request for URI to retrieve content."
    },
    "Function: wp_remote_get": {
        "prefix": "wp_remote_get",
        "body": "wp_remote_get( ${1:\\$url:string}, ${2:\\$args:array} )",
        "description": "Retrieve the raw response from the HTTP request using the GET method."
    },
    "Function: wp_remote_head": {
        "prefix": "wp_remote_head",
        "body": "wp_remote_head( ${1:\\$url:string}, ${2:\\$args:array} )",
        "description": "Retrieve the raw response from the HTTP request using the HEAD method."
    },
    "Function: wp_remote_post": {
        "prefix": "wp_remote_post",
        "body": "wp_remote_post( ${1:\\$url:string}, ${2:\\$args:array} )",
        "description": "Retrieve the raw response from the HTTP request using the POST method."
    },
    "Function: wp_remote_request": {
        "prefix": "wp_remote_request",
        "body": "wp_remote_request( ${1:\\$url:string}, ${2:\\$args:array} )",
        "description": "Retrieve the raw response from the HTTP request."
    },
    "Function: wp_remote_retrieve_body": {
        "prefix": "wp_remote_retrieve_body",
        "body": "wp_remote_retrieve_body( ${1:\\$response:array} )",
        "description": "Retrieve only the body from the raw response."
    },
    "Function: wp_remote_retrieve_cookie": {
        "prefix": "wp_remote_retrieve_cookie",
        "body": "wp_remote_retrieve_cookie( ${1:\\$response:array}, ${2:\\$name:string} )",
        "description": "Retrieve a single cookie by name from the raw response."
    },
    "Function: wp_remote_retrieve_cookie_value": {
        "prefix": "wp_remote_retrieve_cookie_value",
        "body": "wp_remote_retrieve_cookie_value( ${1:\\$response:array}, ${2:\\$name:string} )",
        "description": "Retrieve a single cookie&#039;s value by name from the raw response."
    },
    "Function: wp_remote_retrieve_cookies": {
        "prefix": "wp_remote_retrieve_cookies",
        "body": "wp_remote_retrieve_cookies( ${1:\\$response:array} )",
        "description": "Retrieve only the cookies from the raw response."
    },
    "Function: wp_remote_retrieve_header": {
        "prefix": "wp_remote_retrieve_header",
        "body": "wp_remote_retrieve_header( ${1:\\$response:array}, ${2:\\$header:string} )",
        "description": "Retrieve a single header by name from the raw response."
    },
    "Function: wp_remote_retrieve_headers": {
        "prefix": "wp_remote_retrieve_headers",
        "body": "wp_remote_retrieve_headers( ${1:\\$response:array} )",
        "description": "Retrieve only the headers from the raw response."
    },
    "Function: wp_remote_retrieve_response_code": {
        "prefix": "wp_remote_retrieve_response_code",
        "body": "wp_remote_retrieve_response_code( ${1:\\$response:array} )",
        "description": "Retrieve only the response code from the raw response."
    },
    "Function: wp_remote_retrieve_response_message": {
        "prefix": "wp_remote_retrieve_response_message",
        "body": "wp_remote_retrieve_response_message( ${1:\\$response:array} )",
        "description": "Retrieve only the response message from the raw response."
    },
    "Function: wp_removable_query_args": {
        "prefix": "wp_removable_query_args",
        "body": "wp_removable_query_args(  )",
        "description": "Returns an array of single-use query variable names that can be removed from a URL."
    },
    "Function: wp_remove_object_terms": {
        "prefix": "wp_remove_object_terms",
        "body": "wp_remove_object_terms( ${1:\\$object_id:integer}, ${2:\\$terms:string|integer|array}, ${3:\\$taxonomy:array|string} )",
        "description": "Remove term(s) associated with a given object."
    },
    "Function: wp_replace_in_html_tags": {
        "prefix": "wp_replace_in_html_tags",
        "body": "wp_replace_in_html_tags( ${1:\\$haystack:string}, ${2:\\$replace_pairs:array} )",
        "description": "Replace characters or phrases within HTML elements only."
    },
    "Function: wp_reschedule_event": {
        "prefix": "wp_reschedule_event",
        "body": "wp_reschedule_event( ${1:\\$timestamp:integer}, ${2:\\$recurrence:string}, ${3:\\$hook:string}, ${4:\\$args:array} )",
        "description": "Reschedule a recurring event."
    },
    "Function: wp_reset_postdata": {
        "prefix": "wp_reset_postdata",
        "body": "wp_reset_postdata(  )",
        "description": "After looping through a separate query, this function restores the $post global to the current post in the main query."
    },
    "Function: wp_reset_query": {
        "prefix": "wp_reset_query",
        "body": "wp_reset_query(  )",
        "description": "Destroys the previous query and sets up a new query."
    },
    "Function: wp_reset_vars": {
        "prefix": "wp_reset_vars",
        "body": "wp_reset_vars( ${1:\\$vars:array} )",
        "description": "Resets global variables based on $_GET and $_POST"
    },
    "Function: wp_resolve_numeric_slug_conflicts": {
        "prefix": "wp_resolve_numeric_slug_conflicts",
        "body": "wp_resolve_numeric_slug_conflicts( ${1:\\$query_vars:array} )",
        "description": "Resolve numeric slugs that collide with date permalinks."
    },
    "Function: wp_resource_hints": {
        "prefix": "wp_resource_hints",
        "body": "wp_resource_hints(  )",
        "description": "Prints resource hints to browsers for pre-fetching, pre-rendering and pre-connecting to web sites."
    },
    "Function: wp_restore_image": {
        "prefix": "wp_restore_image",
        "body": "wp_restore_image( ${1:\\$post_id:integer} )",
        "description": "Restores the metadata for a given attachment."
    },
    "Function: wp_restore_post_revision": {
        "prefix": "wp_restore_post_revision",
        "body": "wp_restore_post_revision( ${1:\\$revision_id:integer|WP_Post}, ${2:\\$fields:array|null} )",
        "description": "Restores a post to the specified revision."
    },
    "Function: wp_revisions_enabled": {
        "prefix": "wp_revisions_enabled",
        "body": "wp_revisions_enabled( ${1:\\$post:WP_Post} )",
        "description": "Determine if revisions are enabled for a given post."
    },
    "Function: wp_revisions_to_keep": {
        "prefix": "wp_revisions_to_keep",
        "body": "wp_revisions_to_keep( ${1:\\$post:WP_Post} )",
        "description": "Determine how many revisions to retain for a given post."
    },
    "Function: wp_revoke_user": {
        "prefix": "wp_revoke_user",
        "body": "wp_revoke_user( ${1:\\$id:integer} )",
        "description": "Remove all capabilities from user."
    },
    "Function: wp_richedit_pre": {
        "prefix": "wp_richedit_pre",
        "body": "wp_richedit_pre( ${1:\\$text:string} )",
        "description": "Formats text for the rich text editor."
    },
    "Function: wp_roles": {
        "prefix": "wp_roles",
        "body": "wp_roles(  )",
        "description": "Retrieves the global WP_Roles instance and instantiates it if necessary."
    },
    "Function: wp_rss": {
        "prefix": "wp_rss",
        "body": "wp_rss( ${1:\\$url:string}, ${2:\\$num_items:integer} )",
        "description": "Display all RSS items in a HTML ordered list."
    },
    "Function: wp_safe_redirect": {
        "prefix": "wp_safe_redirect",
        "body": "wp_safe_redirect( ${1:\\$location:string}, ${2:\\$status:integer} )",
        "description": "Performs a safe (local) redirect, using wp_redirect()."
    },
    "Function: wp_safe_remote_get": {
        "prefix": "wp_safe_remote_get",
        "body": "wp_safe_remote_get( ${1:\\$url:string}, ${2:\\$args:array} )",
        "description": "Retrieve the raw response from a safe HTTP request using the GET method."
    },
    "Function: wp_safe_remote_head": {
        "prefix": "wp_safe_remote_head",
        "body": "wp_safe_remote_head( ${1:\\$url:string}, ${2:\\$args:array} )",
        "description": "Retrieve the raw response from a safe HTTP request using the HEAD method."
    },
    "Function: wp_safe_remote_post": {
        "prefix": "wp_safe_remote_post",
        "body": "wp_safe_remote_post( ${1:\\$url:string}, ${2:\\$args:array} )",
        "description": "Retrieve the raw response from a safe HTTP request using the POST method."
    },
    "Function: wp_safe_remote_request": {
        "prefix": "wp_safe_remote_request",
        "body": "wp_safe_remote_request( ${1:\\$url:string}, ${2:\\$args:array} )",
        "description": "Retrieve the raw response from a safe HTTP request."
    },
    "Function: wp_salt": {
        "prefix": "wp_salt",
        "body": "wp_salt( ${1:\\$scheme:string} )",
        "description": "Get salt to add to hashes."
    },
    "Function: wp_sanitize_redirect": {
        "prefix": "wp_sanitize_redirect",
        "body": "wp_sanitize_redirect( ${1:\\$location:string} )",
        "description": "Sanitizes a URL for use in a redirect."
    },
    "Function: wp_save_image": {
        "prefix": "wp_save_image",
        "body": "wp_save_image( ${1:\\$post_id:integer} )",
        "description": "Saves image to post along with enqueued changes in $_REQUEST[&#039;history&#039;]"
    },
    "Function: wp_save_image_file": {
        "prefix": "wp_save_image_file",
        "body": "wp_save_image_file( ${1:\\$filename:string}, ${2:\\$image:WP_Image_Editor}, ${3:\\$mime_type:string}, ${4:\\$post_id:integer} )",
        "description": "Saves Image to File"
    },
    "Function: wp_save_nav_menu_items": {
        "prefix": "wp_save_nav_menu_items",
        "body": "wp_save_nav_menu_items( ${1:\\$menu_id:integer}, ${2:\\$menu_data:array} )",
        "description": "Save posted nav menu item data."
    },
    "Function: wp_save_post_revision": {
        "prefix": "wp_save_post_revision",
        "body": "wp_save_post_revision( ${1:\\$post_id:integer} )",
        "description": "Creates a revision for the current version of a post."
    },
    "Function: wp_schedule_delete_old_privacy_export_files": {
        "prefix": "wp_schedule_delete_old_privacy_export_files",
        "body": "wp_schedule_delete_old_privacy_export_files(  )",
        "description": "Schedule a `WP_Cron` job to delete expired export files."
    },
    "Function: wp_schedule_event": {
        "prefix": "wp_schedule_event",
        "body": "wp_schedule_event( ${1:\\$timestamp:integer}, ${2:\\$recurrence:string}, ${3:\\$hook:string}, ${4:\\$args:array} )",
        "description": "Schedule a recurring event."
    },
    "Function: wp_schedule_single_event": {
        "prefix": "wp_schedule_single_event",
        "body": "wp_schedule_single_event( ${1:\\$timestamp:integer}, ${2:\\$hook:string}, ${3:\\$args:array} )",
        "description": "Schedules an event to run only once."
    },
    "Function: wp_schedule_update_checks": {
        "prefix": "wp_schedule_update_checks",
        "body": "wp_schedule_update_checks(  )",
        "description": "Schedule core, theme, and plugin update checks."
    },
    "Function: wp_schedule_update_network_counts": {
        "prefix": "wp_schedule_update_network_counts",
        "body": "wp_schedule_update_network_counts(  )",
        "description": "Schedule update of the network-wide counts for the current network."
    },
    "Function: wp_scheduled_delete": {
        "prefix": "wp_scheduled_delete",
        "body": "wp_scheduled_delete(  )",
        "description": "Permanently delete comments or posts of any type that have held a status of &#039;trash&#039; for the number of days defined in EMPTY_TRASH_DAYS."
    },
    "Function: wp_script_add_data": {
        "prefix": "wp_script_add_data",
        "body": "wp_script_add_data( ${1:\\$handle:string}, ${2:\\$key:string}, ${3:\\$value:mixed} )",
        "description": "Add metadata to a script."
    },
    "Function: wp_script_is": {
        "prefix": "wp_script_is",
        "body": "wp_script_is( ${1:\\$handle:string}, ${2:\\$list:string} )",
        "description": "Check whether a script has been added to the queue."
    },
    "Function: wp_scripts": {
        "prefix": "wp_scripts",
        "body": "wp_scripts(  )",
        "description": "Initialize $wp_scripts if it has not been set."
    },
    "Function: wp_send_json": {
        "prefix": "wp_send_json",
        "body": "wp_send_json( ${1:\\$response:mixed}, ${2:\\$status_code:integer|null} )",
        "description": "Send a JSON response back to an Ajax request."
    },
    "Function: wp_send_json_error": {
        "prefix": "wp_send_json_error",
        "body": "wp_send_json_error( ${1:\\$data:mixed|null}, ${2:\\$status_code:integer|null} )",
        "description": "Send a JSON response back to an Ajax request, indicating failure."
    },
    "Function: wp_send_json_success": {
        "prefix": "wp_send_json_success",
        "body": "wp_send_json_success( ${1:\\$data:mixed|null}, ${2:\\$status_code:integer|null} )",
        "description": "Send a JSON response back to an Ajax request, indicating success."
    },
    "Function: wp_send_new_user_notifications": {
        "prefix": "wp_send_new_user_notifications",
        "body": "wp_send_new_user_notifications( ${1:\\$user_id:integer}, ${2:\\$notify:string} )",
        "description": "Initiates email notifications related to the creation of new users."
    },
    "Function: wp_send_user_request": {
        "prefix": "wp_send_user_request",
        "body": "wp_send_user_request( ${1:\\$request_id:string} )",
        "description": "Send a confirmation request email to confirm an action."
    },
    "Function: wp_set_all_user_settings": {
        "prefix": "wp_set_all_user_settings",
        "body": "wp_set_all_user_settings( ${1:\\$user_settings:array} )",
        "description": "Private. Set all user interface settings."
    },
    "Function: wp_set_auth_cookie": {
        "prefix": "wp_set_auth_cookie",
        "body": "wp_set_auth_cookie( ${1:\\$user_id:integer}, ${2:\\$remember:boolean}, ${3:\\$secure:mixed}, ${4:\\$token:string} )",
        "description": "Log in a user by setting authentication cookies."
    },
    "Function: wp_set_comment_cookies": {
        "prefix": "wp_set_comment_cookies",
        "body": "wp_set_comment_cookies( ${1:\\$comment:WP_Comment}, ${2:\\$user:WP_User}, ${3:\\$cookies_consent:boolean} )",
        "description": "Sets the cookies used to store an unauthenticated commentator&#039;s identity. Typically used to recall previous comments by this commentator that are still held in moderation."
    },
    "Function: wp_set_comment_status": {
        "prefix": "wp_set_comment_status",
        "body": "wp_set_comment_status( ${1:\\$comment_id:integer|WP_Comment}, ${2:\\$comment_status:string}, ${3:\\$wp_error:boolean} )",
        "description": "Sets the status of a comment."
    },
    "Function: wp_set_current_user": {
        "prefix": "wp_set_current_user",
        "body": "wp_set_current_user( ${1:\\$id:integer}, ${2:\\$name:string} )",
        "description": "Changes the current user by ID or name."
    },
    "Function: wp_set_internal_encoding": {
        "prefix": "wp_set_internal_encoding",
        "body": "wp_set_internal_encoding(  )",
        "description": "Set internal encoding."
    },
    "Function: wp_set_lang_dir": {
        "prefix": "wp_set_lang_dir",
        "body": "wp_set_lang_dir(  )",
        "description": "Set the location of the language directory."
    },
    "Function: wp_set_link_cats": {
        "prefix": "wp_set_link_cats",
        "body": "wp_set_link_cats( ${1:\\$link_id:integer}, ${2:\\$link_categories:array} )",
        "description": "Update link with the specified link categories."
    },
    "Function: wp_set_object_terms": {
        "prefix": "wp_set_object_terms",
        "body": "wp_set_object_terms( ${1:\\$object_id:integer}, ${2:\\$terms:string|integer|array}, ${3:\\$taxonomy:string}, ${4:\\$append:boolean} )",
        "description": "Create Term and Taxonomy Relationships."
    },
    "Function: wp_set_password": {
        "prefix": "wp_set_password",
        "body": "wp_set_password( ${1:\\$password:string}, ${2:\\$user_id:integer} )",
        "description": "Updates the user&#039;s password with a new encrypted one."
    },
    "Function: wp_set_post_categories": {
        "prefix": "wp_set_post_categories",
        "body": "wp_set_post_categories( ${1:\\$post_ID:integer}, ${2:\\$post_categories:array|integer}, ${3:\\$append:boolean} )",
        "description": "Set categories for a post."
    },
    "Function: wp_set_post_cats": {
        "prefix": "wp_set_post_cats",
        "body": "wp_set_post_cats( ${1:\\$blogid:integer}, ${2:\\$post_ID:integer}, ${3:\\$post_categories:array} )",
        "description": "Sets the categories that the post id belongs to."
    },
    "Function: wp_set_post_lock": {
        "prefix": "wp_set_post_lock",
        "body": "wp_set_post_lock( ${1:\\$post_id:integer} )",
        "description": "Mark the post as currently being edited by the current user"
    },
    "Function: wp_set_post_tags": {
        "prefix": "wp_set_post_tags",
        "body": "wp_set_post_tags( ${1:\\$post_id:integer}, ${2:\\$tags:string|array}, ${3:\\$append:boolean} )",
        "description": "Set the tags for a post."
    },
    "Function: wp_set_post_terms": {
        "prefix": "wp_set_post_terms",
        "body": "wp_set_post_terms( ${1:\\$post_id:integer}, ${2:\\$tags:string|array}, ${3:\\$taxonomy:string}, ${4:\\$append:boolean} )",
        "description": "Set the terms for a post."
    },
    "Function: wp_set_sidebars_widgets": {
        "prefix": "wp_set_sidebars_widgets",
        "body": "wp_set_sidebars_widgets( ${1:\\$sidebars_widgets:array} )",
        "description": "Set the sidebar widget option to update sidebars."
    },
    "Function: wp_set_wpdb_vars": {
        "prefix": "wp_set_wpdb_vars",
        "body": "wp_set_wpdb_vars(  )",
        "description": "Set the database table prefix and the format specifiers for database table columns."
    },
    "Function: wp_setcookie": {
        "prefix": "wp_setcookie",
        "body": "wp_setcookie( ${1:\\$username:string}, ${2:\\$password:string}, ${3:\\$already_md5:boolean}, ${4:\\$home:string}, ${5:\\$siteurl:string}, ${6:\\$remember:boolean} )",
        "description": "Sets a cookie for a user who just logged in. This function is deprecated."
    },
    "Function: wp_setup_nav_menu_item": {
        "prefix": "wp_setup_nav_menu_item",
        "body": "wp_setup_nav_menu_item( ${1:\\$menu_item:object} )",
        "description": "Decorates a menu item object with the shared navigation menu item properties."
    },
    "Function: wp_shake_js": {
        "prefix": "wp_shake_js",
        "body": "wp_shake_js(  )",
        "description": ""
    },
    "Function: wp_shortlink_header": {
        "prefix": "wp_shortlink_header",
        "body": "wp_shortlink_header(  )",
        "description": "Sends a Link: rel=shortlink header if a shortlink is defined for the current page."
    },
    "Function: wp_shortlink_wp_head": {
        "prefix": "wp_shortlink_wp_head",
        "body": "wp_shortlink_wp_head(  )",
        "description": "Injects rel=shortlink into the head if a shortlink is defined for the current page."
    },
    "Function: wp_should_upgrade_global_tables": {
        "prefix": "wp_should_upgrade_global_tables",
        "body": "wp_should_upgrade_global_tables(  )",
        "description": "Determine if global tables should be upgraded."
    },
    "Function: wp_shrink_dimensions": {
        "prefix": "wp_shrink_dimensions",
        "body": "wp_shrink_dimensions( ${1:\\$width:integer}, ${2:\\$height:integer}, ${3:\\$wmax:integer}, ${4:\\$hmax:integer} )",
        "description": "Calculates the new dimensions for a downsampled image."
    },
    "Function: wp_sidebar_description": {
        "prefix": "wp_sidebar_description",
        "body": "wp_sidebar_description( ${1:\\$id:string} )",
        "description": "Retrieve description for a sidebar."
    },
    "Function: wp_signon": {
        "prefix": "wp_signon",
        "body": "wp_signon( ${1:\\$credentials:array}, ${2:\\$secure_cookie:string|boolean} )",
        "description": "Authenticates and logs a user in with &#039;remember&#039; capability."
    },
    "Function: wp_simplepie_autoload": {
        "prefix": "wp_simplepie_autoload",
        "body": "wp_simplepie_autoload( ${1:\\$class:} )",
        "description": "WordPress autoloader for SimplePie."
    },
    "Function: wp_site_admin_email_change_notification": {
        "prefix": "wp_site_admin_email_change_notification",
        "body": "wp_site_admin_email_change_notification( ${1:\\$old_email:string}, ${2:\\$new_email:string}, ${3:\\$option_name:string} )",
        "description": "Send an email to the old site admin email address when the site admin email address changes."
    },
    "Function: wp_site_icon": {
        "prefix": "wp_site_icon",
        "body": "wp_site_icon(  )",
        "description": "Display site icon meta tags."
    },
    "Function: wp_slash": {
        "prefix": "wp_slash",
        "body": "wp_slash( ${1:\\$value:string|array} )",
        "description": "Add slashes to a string or array of strings."
    },
    "Function: wp_spaces_regexp": {
        "prefix": "wp_spaces_regexp",
        "body": "wp_spaces_regexp(  )",
        "description": "Returns the regexp for common whitespace characters."
    },
    "Function: wp_spam_comment": {
        "prefix": "wp_spam_comment",
        "body": "wp_spam_comment( ${1:\\$comment_id:integer|WP_Comment} )",
        "description": "Marks a comment as Spam"
    },
    "Function: wp_specialchars": {
        "prefix": "wp_specialchars",
        "body": "wp_specialchars( ${1:\\$string:string}, ${2:\\$quote_style:string}, ${3:\\$charset:false|string}, ${4:\\$double_encode:false} )",
        "description": "Legacy escaping for HTML blocks."
    },
    "Function: wp_specialchars_decode": {
        "prefix": "wp_specialchars_decode",
        "body": "wp_specialchars_decode( ${1:\\$string:string}, ${2:\\$quote_style:string|integer} )",
        "description": "Converts a number of HTML entities into their special characters."
    },
    "Function: wp_sprintf": {
        "prefix": "wp_sprintf",
        "body": "wp_sprintf( ${1:\\$pattern:string} )",
        "description": "WordPress implementation of PHP sprintf() with filters."
    },
    "Function: wp_sprintf_l": {
        "prefix": "wp_sprintf_l",
        "body": "wp_sprintf_l( ${1:\\$pattern:string}, ${2:\\$args:array} )",
        "description": "Localize list items before the rest of the content."
    },
    "Function: wp_ssl_constants": {
        "prefix": "wp_ssl_constants",
        "body": "wp_ssl_constants(  )",
        "description": "Defines cookie related WordPress constants"
    },
    "Function: wp_star_rating": {
        "prefix": "wp_star_rating",
        "body": "wp_star_rating( ${1:\\$args:array} )",
        "description": "Output a HTML element with a star rating for a given rating."
    },
    "Function: wp_start_object_cache": {
        "prefix": "wp_start_object_cache",
        "body": "wp_start_object_cache(  )",
        "description": "Start the WordPress object cache."
    },
    "Function: wp_start_scraping_edited_file_errors": {
        "prefix": "wp_start_scraping_edited_file_errors",
        "body": "wp_start_scraping_edited_file_errors(  )",
        "description": "Start scraping edited file errors."
    },
    "Function: wp_staticize_emoji": {
        "prefix": "wp_staticize_emoji",
        "body": "wp_staticize_emoji( ${1:\\$text:string} )",
        "description": "Convert emoji to a static img element."
    },
    "Function: wp_staticize_emoji_for_email": {
        "prefix": "wp_staticize_emoji_for_email",
        "body": "wp_staticize_emoji_for_email( ${1:\\$mail:array} )",
        "description": "Convert emoji in emails into static images."
    },
    "Function: wp_stream_image": {
        "prefix": "wp_stream_image",
        "body": "wp_stream_image( ${1:\\$image:WP_Image_Editor}, ${2:\\$mime_type:string}, ${3:\\$attachment_id:integer} )",
        "description": "Streams image in WP_Image_Editor to browser."
    },
    "Function: wp_strip_all_tags": {
        "prefix": "wp_strip_all_tags",
        "body": "wp_strip_all_tags( ${1:\\$string:string}, ${2:\\$remove_breaks:boolean} )",
        "description": "Properly strip all HTML tags including script and style"
    },
    "Function: wp_style_add_data": {
        "prefix": "wp_style_add_data",
        "body": "wp_style_add_data( ${1:\\$handle:string}, ${2:\\$key:string}, ${3:\\$value:mixed} )",
        "description": "Add metadata to a CSS stylesheet."
    },
    "Function: wp_style_is": {
        "prefix": "wp_style_is",
        "body": "wp_style_is( ${1:\\$handle:string}, ${2:\\$list:string} )",
        "description": "Check whether a CSS stylesheet has been added to the queue."
    },
    "Function: wp_style_loader_src": {
        "prefix": "wp_style_loader_src",
        "body": "wp_style_loader_src( ${1:\\$src:string}, ${2:\\$handle:string} )",
        "description": "Administration Screen CSS for changing the styles."
    },
    "Function: wp_styles": {
        "prefix": "wp_styles",
        "body": "wp_styles(  )",
        "description": "Initialize $wp_styles if it has not been set."
    },
    "Function: wp_suspend_cache_addition": {
        "prefix": "wp_suspend_cache_addition",
        "body": "wp_suspend_cache_addition( ${1:\\$suspend:boolean|null} )",
        "description": "Temporarily suspend cache additions."
    },
    "Function: wp_suspend_cache_invalidation": {
        "prefix": "wp_suspend_cache_invalidation",
        "body": "wp_suspend_cache_invalidation( ${1:\\$suspend:boolean} )",
        "description": "Suspend cache invalidation."
    },
    "Function: wp_switch_roles_and_user": {
        "prefix": "wp_switch_roles_and_user",
        "body": "wp_switch_roles_and_user( ${1:\\$new_site_id:integer}, ${2:\\$old_site_id:integer} )",
        "description": "Switches the initialized roles and current user capabilities to another site."
    },
    "Function: wp_tag_cloud": {
        "prefix": "wp_tag_cloud",
        "body": "wp_tag_cloud( ${1:\\$args:array|string|null} )",
        "description": "Display tag cloud."
    },
    "Function: wp_templating_constants": {
        "prefix": "wp_templating_constants",
        "body": "wp_templating_constants(  )",
        "description": "Defines templating related WordPress constants"
    },
    "Function: wp_tempnam": {
        "prefix": "wp_tempnam",
        "body": "wp_tempnam( ${1:\\$filename:string}, ${2:\\$dir:string} )",
        "description": "Returns a filename of a Temporary unique file."
    },
    "Function: wp_term_is_shared": {
        "prefix": "wp_term_is_shared",
        "body": "wp_term_is_shared( ${1:\\$term_id:integer} )",
        "description": "Determine whether a term is shared between multiple taxonomies."
    },
    "Function: wp_terms_checklist": {
        "prefix": "wp_terms_checklist",
        "body": "wp_terms_checklist( ${1:\\$post_id:integer}, ${2:\\$args:array|string} )",
        "description": "Output an unordered list of checkbox input elements labelled with term names."
    },
    "Function: wp_text_diff": {
        "prefix": "wp_text_diff",
        "body": "wp_text_diff( ${1:\\$left_string:string}, ${2:\\$right_string:string}, ${3:\\$args:string|array|null} )",
        "description": "Displays a human readable HTML representation of the difference between two strings."
    },
    "Function: wp_theme_update_row": {
        "prefix": "wp_theme_update_row",
        "body": "wp_theme_update_row( ${1:\\$theme_key:string}, ${2:\\$theme:WP_Theme} )",
        "description": "Displays update information for a theme."
    },
    "Function: wp_theme_update_rows": {
        "prefix": "wp_theme_update_rows",
        "body": "wp_theme_update_rows(  )",
        "description": ""
    },
    "Function: wp_throttle_comment_flood": {
        "prefix": "wp_throttle_comment_flood",
        "body": "wp_throttle_comment_flood( ${1:\\$block:boolean}, ${2:\\$time_lastcomment:integer}, ${3:\\$time_newcomment:integer} )",
        "description": "Whether a comment should be blocked because of comment flood."
    },
    "Function: wp_timezone_choice": {
        "prefix": "wp_timezone_choice",
        "body": "wp_timezone_choice( ${1:\\$selected_zone:string}, ${2:\\$locale:string|null} )",
        "description": "Gives a nicely-formatted list of timezone strings."
    },
    "Function: wp_timezone_override_offset": {
        "prefix": "wp_timezone_override_offset",
        "body": "wp_timezone_override_offset(  )",
        "description": "gmt_offset modification for smart timezone handling."
    },
    "Function: wp_timezone_supported": {
        "prefix": "wp_timezone_supported",
        "body": "wp_timezone_supported(  )",
        "description": "Check for PHP timezone support"
    },
    "Function: wp_tiny_mce": {
        "prefix": "wp_tiny_mce",
        "body": "wp_tiny_mce( ${1:\\$teeny:}, ${2:\\$settings:} )",
        "description": "Outputs the TinyMCE editor."
    },
    "Function: wp_title": {
        "prefix": "wp_title",
        "body": "wp_title( ${1:\\$sep:string}, ${2:\\$display:boolean}, ${3:\\$seplocation:string} )",
        "description": "Display or retrieve page title for all areas of blog."
    },
    "Function: wp_title_rss": {
        "prefix": "wp_title_rss",
        "body": "wp_title_rss( ${1:\\$deprecated:string} )",
        "description": "Display the blog title for display of the feed title."
    },
    "Function: wp_transition_comment_status": {
        "prefix": "wp_transition_comment_status",
        "body": "wp_transition_comment_status( ${1:\\$new_status:string}, ${2:\\$old_status:string}, ${3:\\$comment:object} )",
        "description": "Call hooks for when a comment status transition occurs."
    },
    "Function: wp_transition_post_status": {
        "prefix": "wp_transition_post_status",
        "body": "wp_transition_post_status( ${1:\\$new_status:string}, ${2:\\$old_status:string}, ${3:\\$post:WP_Post} )",
        "description": "Fires actions related to the transitioning of a post&#039;s status."
    },
    "Function: wp_trash_comment": {
        "prefix": "wp_trash_comment",
        "body": "wp_trash_comment( ${1:\\$comment_id:integer|WP_Comment} )",
        "description": "Moves a comment to the Trash"
    },
    "Function: wp_trash_post": {
        "prefix": "wp_trash_post",
        "body": "wp_trash_post( ${1:\\$post_id:integer} )",
        "description": "Move a post or page to the Trash"
    },
    "Function: wp_trash_post_comments": {
        "prefix": "wp_trash_post_comments",
        "body": "wp_trash_post_comments( ${1:\\$post:integer|WP_Post|null} )",
        "description": "Moves comments for a post to the trash."
    },
    "Function: wp_trim_excerpt": {
        "prefix": "wp_trim_excerpt",
        "body": "wp_trim_excerpt( ${1:\\$text:string} )",
        "description": "Generates an excerpt from the content, if needed."
    },
    "Function: wp_trim_words": {
        "prefix": "wp_trim_words",
        "body": "wp_trim_words( ${1:\\$text:string}, ${2:\\$num_words:integer}, ${3:\\$more:string|null} )",
        "description": "Trims text to a certain number of words."
    },
    "Function: wp_underscore_audio_template": {
        "prefix": "wp_underscore_audio_template",
        "body": "wp_underscore_audio_template(  )",
        "description": "Output the markup for a audio tag to be used in an Underscore template when data.model is passed."
    },
    "Function: wp_underscore_playlist_templates": {
        "prefix": "wp_underscore_playlist_templates",
        "body": "wp_underscore_playlist_templates(  )",
        "description": "Outputs the templates used by playlists."
    },
    "Function: wp_underscore_video_template": {
        "prefix": "wp_underscore_video_template",
        "body": "wp_underscore_video_template(  )",
        "description": "Output the markup for a video tag to be used in an Underscore template when data.model is passed."
    },
    "Function: wp_unique_filename": {
        "prefix": "wp_unique_filename",
        "body": "wp_unique_filename( ${1:\\$dir:string}, ${2:\\$filename:string}, ${3:\\$unique_filename_callback:callable|null} )",
        "description": "Get a filename that is sanitized and unique for the given directory."
    },
    "Function: wp_unique_post_slug": {
        "prefix": "wp_unique_post_slug",
        "body": "wp_unique_post_slug( ${1:\\$slug:string}, ${2:\\$post_ID:integer}, ${3:\\$post_status:string}, ${4:\\$post_type:string}, ${5:\\$post_parent:integer} )",
        "description": "Computes a unique slug for the post, when given the desired slug and some post details."
    },
    "Function: wp_unique_term_slug": {
        "prefix": "wp_unique_term_slug",
        "body": "wp_unique_term_slug( ${1:\\$slug:string}, ${2:\\$term:object} )",
        "description": "Will make slug unique, if it isn&#039;t already."
    },
    "Function: wp_unregister_GLOBALS": {
        "prefix": "wp_unregister_GLOBALS",
        "body": "wp_unregister_GLOBALS(  )",
        "description": "Turn register globals off."
    },
    "Function: wp_unregister_sidebar_widget": {
        "prefix": "wp_unregister_sidebar_widget",
        "body": "wp_unregister_sidebar_widget( ${1:\\$id:integer|string} )",
        "description": "Remove widget from sidebar."
    },
    "Function: wp_unregister_widget_control": {
        "prefix": "wp_unregister_widget_control",
        "body": "wp_unregister_widget_control( ${1:\\$id:integer|string} )",
        "description": "Remove control callback for widget."
    },
    "Function: wp_unschedule_event": {
        "prefix": "wp_unschedule_event",
        "body": "wp_unschedule_event( ${1:\\$timestamp:integer}, ${2:\\$hook:string}, ${3:\\$args:array} )",
        "description": "Unschedule a previously scheduled event."
    },
    "Function: wp_unschedule_hook": {
        "prefix": "wp_unschedule_hook",
        "body": "wp_unschedule_hook( ${1:\\$hook:string} )",
        "description": "Unschedules all events attached to the hook."
    },
    "Function: wp_unslash": {
        "prefix": "wp_unslash",
        "body": "wp_unslash( ${1:\\$value:string|array} )",
        "description": "Remove slashes from a string or array of strings."
    },
    "Function: wp_unspam_comment": {
        "prefix": "wp_unspam_comment",
        "body": "wp_unspam_comment( ${1:\\$comment_id:integer|WP_Comment} )",
        "description": "Removes a comment from the Spam"
    },
    "Function: wp_untrash_comment": {
        "prefix": "wp_untrash_comment",
        "body": "wp_untrash_comment( ${1:\\$comment_id:integer|WP_Comment} )",
        "description": "Removes a comment from the Trash"
    },
    "Function: wp_untrash_post": {
        "prefix": "wp_untrash_post",
        "body": "wp_untrash_post( ${1:\\$post_id:integer} )",
        "description": "Restore a post or page from the Trash."
    },
    "Function: wp_untrash_post_comments": {
        "prefix": "wp_untrash_post_comments",
        "body": "wp_untrash_post_comments( ${1:\\$post:integer|WP_Post|null} )",
        "description": "Restore comments for a post from the trash."
    },
    "Function: wp_update_attachment_metadata": {
        "prefix": "wp_update_attachment_metadata",
        "body": "wp_update_attachment_metadata( ${1:\\$attachment_id:integer}, ${2:\\$data:array} )",
        "description": "Update metadata for an attachment."
    },
    "Function: wp_update_category": {
        "prefix": "wp_update_category",
        "body": "wp_update_category( ${1:\\$catarr:array} )",
        "description": "Aliases wp_insert_category() with minimal args."
    },
    "Function: wp_update_comment": {
        "prefix": "wp_update_comment",
        "body": "wp_update_comment( ${1:\\$commentarr:array} )",
        "description": "Updates an existing comment in the database."
    },
    "Function: wp_update_comment_count": {
        "prefix": "wp_update_comment_count",
        "body": "wp_update_comment_count( ${1:\\$post_id:integer|null}, ${2:\\$do_deferred:boolean} )",
        "description": "Updates the comment count for post(s)."
    },
    "Function: wp_update_comment_count_now": {
        "prefix": "wp_update_comment_count_now",
        "body": "wp_update_comment_count_now( ${1:\\$post_id:integer} )",
        "description": "Updates the comment count for the post."
    },
    "Function: wp_update_core": {
        "prefix": "wp_update_core",
        "body": "wp_update_core( ${1:\\$current:}, ${2:\\$feedback:} )",
        "description": "This was once used to kick-off the Core Updater."
    },
    "Function: wp_update_custom_css_post": {
        "prefix": "wp_update_custom_css_post",
        "body": "wp_update_custom_css_post( ${1:\\$css:string}, ${2:\\$args:array} )",
        "description": "Update the `custom_css` post for a given theme."
    },
    "Function: wp_update_link": {
        "prefix": "wp_update_link",
        "body": "wp_update_link( ${1:\\$linkdata:array} )",
        "description": "Updates a link in the database."
    },
    "Function: wp_update_nav_menu_item": {
        "prefix": "wp_update_nav_menu_item",
        "body": "wp_update_nav_menu_item( ${1:\\$menu_id:integer}, ${2:\\$menu_item_db_id:integer}, ${3:\\$menu_item_data:array} )",
        "description": "Save the properties of a menu item or create a new one."
    },
    "Function: wp_update_nav_menu_object": {
        "prefix": "wp_update_nav_menu_object",
        "body": "wp_update_nav_menu_object( ${1:\\$menu_id:integer}, ${2:\\$menu_data:array} )",
        "description": "Save the properties of a menu or create a new menu with those properties."
    },
    "Function: wp_update_network_counts": {
        "prefix": "wp_update_network_counts",
        "body": "wp_update_network_counts( ${1:\\$network_id:integer|null} )",
        "description": "Update the network-wide counts for the current network."
    },
    "Function: wp_update_network_site_counts": {
        "prefix": "wp_update_network_site_counts",
        "body": "wp_update_network_site_counts( ${1:\\$network_id:integer|null} )",
        "description": "Update the network-wide site count."
    },
    "Function: wp_update_network_user_counts": {
        "prefix": "wp_update_network_user_counts",
        "body": "wp_update_network_user_counts( ${1:\\$network_id:integer|null} )",
        "description": "Update the network-wide user count."
    },
    "Function: wp_update_plugin": {
        "prefix": "wp_update_plugin",
        "body": "wp_update_plugin( ${1:\\$plugin:}, ${2:\\$feedback:} )",
        "description": "This was once used to kick-off the Plugin Updater."
    },
    "Function: wp_update_plugins": {
        "prefix": "wp_update_plugins",
        "body": "wp_update_plugins( ${1:\\$extra_stats:array} )",
        "description": "Check plugin versions against the latest versions hosted on WordPress.org."
    },
    "Function: wp_update_post": {
        "prefix": "wp_update_post",
        "body": "wp_update_post( ${1:\\$postarr:array|object}, ${2:\\$wp_error:boolean} )",
        "description": "Update a post with new post data."
    },
    "Function: wp_update_term": {
        "prefix": "wp_update_term",
        "body": "wp_update_term( ${1:\\$term_id:integer}, ${2:\\$taxonomy:string}, ${3:\\$args:array|string} )",
        "description": "Update term based on arguments provided."
    },
    "Function: wp_update_term_count": {
        "prefix": "wp_update_term_count",
        "body": "wp_update_term_count( ${1:\\$terms:integer|array}, ${2:\\$taxonomy:string}, ${3:\\$do_deferred:boolean} )",
        "description": "Updates the amount of terms in taxonomy."
    },
    "Function: wp_update_term_count_now": {
        "prefix": "wp_update_term_count_now",
        "body": "wp_update_term_count_now( ${1:\\$terms:array}, ${2:\\$taxonomy:string} )",
        "description": "Perform term count update immediately."
    },
    "Function: wp_update_theme": {
        "prefix": "wp_update_theme",
        "body": "wp_update_theme( ${1:\\$theme:}, ${2:\\$feedback:} )",
        "description": "This was once used to kick-off the Theme Updater."
    },
    "Function: wp_update_themes": {
        "prefix": "wp_update_themes",
        "body": "wp_update_themes( ${1:\\$extra_stats:array} )",
        "description": "Check theme versions against the latest versions hosted on WordPress.org."
    },
    "Function: wp_update_user": {
        "prefix": "wp_update_user",
        "body": "wp_update_user( ${1:\\$userdata:object|WP_User} )",
        "description": "Update a user in the database."
    },
    "Function: wp_upgrade": {
        "prefix": "wp_upgrade",
        "body": "wp_upgrade(  )",
        "description": "Runs WordPress Upgrade functions."
    },
    "Function: wp_upload_bits": {
        "prefix": "wp_upload_bits",
        "body": "wp_upload_bits( ${1:\\$name:string}, ${2:\\$deprecated:null|string}, ${3:\\$bits:mixed}, ${4:\\$time:string|null} )",
        "description": "Create a file in the upload folder with given content."
    },
    "Function: wp_upload_dir": {
        "prefix": "wp_upload_dir",
        "body": "wp_upload_dir( ${1:\\$time:string|null}, ${2:\\$create_dir:boolean}, ${3:\\$refresh_cache:boolean} )",
        "description": "Get an array containing the current upload directory&#039;s path and url."
    },
    "Function: wp_user_personal_data_exporter": {
        "prefix": "wp_user_personal_data_exporter",
        "body": "wp_user_personal_data_exporter( ${1:\\$email_address:string} )",
        "description": "Finds and exports personal data associated with an email address from the user and user_meta table."
    },
    "Function: wp_user_request_action_description": {
        "prefix": "wp_user_request_action_description",
        "body": "wp_user_request_action_description( ${1:\\$action_name:string} )",
        "description": "Get action description from the name and return a string."
    },
    "Function: wp_user_settings": {
        "prefix": "wp_user_settings",
        "body": "wp_user_settings(  )",
        "description": "Saves and restores user interface settings stored in a cookie."
    },
    "Function: wp_using_ext_object_cache": {
        "prefix": "wp_using_ext_object_cache",
        "body": "wp_using_ext_object_cache( ${1:\\$using:boolean|null} )",
        "description": "Toggle `$_wp_using_ext_object_cache` on and off without directly touching global."
    },
    "Function: wp_validate_auth_cookie": {
        "prefix": "wp_validate_auth_cookie",
        "body": "wp_validate_auth_cookie( ${1:\\$cookie:string}, ${2:\\$scheme:string} )",
        "description": "Validates authentication cookie."
    },
    "Function: wp_validate_boolean": {
        "prefix": "wp_validate_boolean",
        "body": "wp_validate_boolean( ${1:\\$var:mixed} )",
        "description": "Filter/validate a variable as a boolean."
    },
    "Function: wp_validate_logged_in_cookie": {
        "prefix": "wp_validate_logged_in_cookie",
        "body": "wp_validate_logged_in_cookie( ${1:\\$user_id:integer|boolean} )",
        "description": "Validates the logged-in cookie."
    },
    "Function: wp_validate_redirect": {
        "prefix": "wp_validate_redirect",
        "body": "wp_validate_redirect( ${1:\\$location:string}, ${2:\\$default:string} )",
        "description": "Validates a URL for use in a redirect."
    },
    "Function: wp_validate_user_request_key": {
        "prefix": "wp_validate_user_request_key",
        "body": "wp_validate_user_request_key( ${1:\\$request_id:string}, ${2:\\$key:string} )",
        "description": "Validate a user request by comparing the key with the request&#039;s key."
    },
    "Function: wp_verify_nonce": {
        "prefix": "wp_verify_nonce",
        "body": "wp_verify_nonce( ${1:\\$nonce:string}, ${2:\\$action:string|integer} )",
        "description": "Verify that correct nonce was used with time limit."
    },
    "Function: wp_version_check": {
        "prefix": "wp_version_check",
        "body": "wp_version_check( ${1:\\$extra_stats:array}, ${2:\\$force_check:boolean} )",
        "description": "Check WordPress version against the newest version."
    },
    "Function: wp_video_shortcode": {
        "prefix": "wp_video_shortcode",
        "body": "wp_video_shortcode( ${1:\\$attr:array}, ${2:\\$content:string} )",
        "description": "Builds the Video shortcode output."
    },
    "Function: wp_welcome_panel": {
        "prefix": "wp_welcome_panel",
        "body": "wp_welcome_panel(  )",
        "description": "Displays a welcome panel to introduce users to WordPress."
    },
    "Function: wp_widget_control": {
        "prefix": "wp_widget_control",
        "body": "wp_widget_control( ${1:\\$sidebar_args:array} )",
        "description": "Meta widget used to display the control form for a widget."
    },
    "Function: wp_widget_description": {
        "prefix": "wp_widget_description",
        "body": "wp_widget_description( ${1:\\$id:integer|string} )",
        "description": "Retrieve description for widget."
    },
    "Function: wp_widget_rss_form": {
        "prefix": "wp_widget_rss_form",
        "body": "wp_widget_rss_form( ${1:\\$args:array|string}, ${2:\\$inputs:array|null} )",
        "description": "Display RSS widget options form."
    },
    "Function: wp_widget_rss_output": {
        "prefix": "wp_widget_rss_output",
        "body": "wp_widget_rss_output( ${1:\\$rss:string|array|object}, ${2:\\$args:array} )",
        "description": "Display the RSS entries in a list."
    },
    "Function: wp_widget_rss_process": {
        "prefix": "wp_widget_rss_process",
        "body": "wp_widget_rss_process( ${1:\\$widget_rss:array}, ${2:\\$check_feed:boolean} )",
        "description": "Process RSS feed widget data and optionally retrieve feed items."
    },
    "Function: wp_widgets_access_body_class": {
        "prefix": "wp_widgets_access_body_class",
        "body": "wp_widgets_access_body_class( ${1:\\$classes:string} )",
        "description": ""
    },
    "Function: wp_widgets_add_menu": {
        "prefix": "wp_widgets_add_menu",
        "body": "wp_widgets_add_menu(  )",
        "description": "Append the Widgets menu to the themes main menu."
    },
    "Function: wp_widgets_init": {
        "prefix": "wp_widgets_init",
        "body": "wp_widgets_init(  )",
        "description": "Registers all of the default WordPress widgets on startup."
    },
    "Function: wp_write_post": {
        "prefix": "wp_write_post",
        "body": "wp_write_post(  )",
        "description": "Creates a new post from the &quot;Write Post&quot; form using $_POST information."
    },
    "Function: wpautop": {
        "prefix": "wpautop",
        "body": "wpautop( ${1:\\$pee:string}, ${2:\\$br:boolean} )",
        "description": "Replaces double line-breaks with paragraph elements."
    },
    "Function: wpmu_activate_signup": {
        "prefix": "wpmu_activate_signup",
        "body": "wpmu_activate_signup( ${1:\\$key:string} )",
        "description": "Activate a signup."
    },
    "Function: wpmu_activate_stylesheet": {
        "prefix": "wpmu_activate_stylesheet",
        "body": "wpmu_activate_stylesheet(  )",
        "description": "Loads styles specific to this page."
    },
    "Function: wpmu_admin_do_redirect": {
        "prefix": "wpmu_admin_do_redirect",
        "body": "wpmu_admin_do_redirect( ${1:\\$url:string} )",
        "description": "Redirect a user based on $_GET or $_POST arguments."
    },
    "Function: wpmu_admin_redirect_add_updated_param": {
        "prefix": "wpmu_admin_redirect_add_updated_param",
        "body": "wpmu_admin_redirect_add_updated_param( ${1:\\$url:string} )",
        "description": "Adds an &#039;updated=true&#039; argument to a URL."
    },
    "Function: wpmu_checkAvailableSpace": {
        "prefix": "wpmu_checkAvailableSpace",
        "body": "wpmu_checkAvailableSpace(  )",
        "description": "Determines if the available space defined by the admin has been exceeded by the user."
    },
    "Function: wpmu_create_blog": {
        "prefix": "wpmu_create_blog",
        "body": "wpmu_create_blog( ${1:\\$domain:string}, ${2:\\$path:string}, ${3:\\$title:string}, ${4:\\$user_id:integer}, ${5:\\$meta:array}, ${6:\\$network_id:integer} )",
        "description": "Create a site."
    },
    "Function: wpmu_create_user": {
        "prefix": "wpmu_create_user",
        "body": "wpmu_create_user( ${1:\\$user_name:string}, ${2:\\$password:string}, ${3:\\$email:string} )",
        "description": "Create a user."
    },
    "Function: wpmu_current_site": {
        "prefix": "wpmu_current_site",
        "body": "wpmu_current_site(  )",
        "description": "This deprecated function managed much of the site and network loading in multisite."
    },
    "Function: wpmu_delete_blog": {
        "prefix": "wpmu_delete_blog",
        "body": "wpmu_delete_blog( ${1:\\$blog_id:integer}, ${2:\\$drop:boolean} )",
        "description": "Delete a site."
    },
    "Function: wpmu_delete_user": {
        "prefix": "wpmu_delete_user",
        "body": "wpmu_delete_user( ${1:\\$id:integer} )",
        "description": "Delete a user from the network and remove from all sites."
    },
    "Function: wpmu_get_blog_allowedthemes": {
        "prefix": "wpmu_get_blog_allowedthemes",
        "body": "wpmu_get_blog_allowedthemes( ${1:\\$blog_id:} )",
        "description": "Deprecated functionality for getting themes allowed on a specific site."
    },
    "Function: wpmu_log_new_registrations": {
        "prefix": "wpmu_log_new_registrations",
        "body": "wpmu_log_new_registrations( ${1:\\$blog_id:integer}, ${2:\\$user_id:integer} )",
        "description": "Logs the user email, IP, and registration date of a new site."
    },
    "Function: wpmu_menu": {
        "prefix": "wpmu_menu",
        "body": "wpmu_menu(  )",
        "description": "Outputs the WPMU menu."
    },
    "Function: wpmu_signup_blog": {
        "prefix": "wpmu_signup_blog",
        "body": "wpmu_signup_blog( ${1:\\$domain:string}, ${2:\\$path:string}, ${3:\\$title:string}, ${4:\\$user:string}, ${5:\\$user_email:string}, ${6:\\$meta:array} )",
        "description": "Record site signup information for future activation."
    },
    "Function: wpmu_signup_blog_notification": {
        "prefix": "wpmu_signup_blog_notification",
        "body": "wpmu_signup_blog_notification( ${1:\\$domain:string}, ${2:\\$path:string}, ${3:\\$title:string}, ${4:\\$user_login:string}, ${5:\\$user_email:string}, ${6:\\$key:string}, ${7:\\$meta:array} )",
        "description": "Send a confirmation request email to a user when they sign up for a new site. The new site will not become active until the confirmation link is clicked."
    },
    "Function: wpmu_signup_stylesheet": {
        "prefix": "wpmu_signup_stylesheet",
        "body": "wpmu_signup_stylesheet(  )",
        "description": "Prints styles for front-end Multisite signup pages"
    },
    "Function: wpmu_signup_user": {
        "prefix": "wpmu_signup_user",
        "body": "wpmu_signup_user( ${1:\\$user:string}, ${2:\\$user_email:string}, ${3:\\$meta:array} )",
        "description": "Record user signup information for future activation."
    },
    "Function: wpmu_signup_user_notification": {
        "prefix": "wpmu_signup_user_notification",
        "body": "wpmu_signup_user_notification( ${1:\\$user_login:string}, ${2:\\$user_email:string}, ${3:\\$key:string}, ${4:\\$meta:array} )",
        "description": "Send a confirmation request email to a user when they sign up for a new user account (without signing up for a site at the same time). The user account will not become active until the confirmation link is clicked."
    },
    "Function: wpmu_update_blogs_date": {
        "prefix": "wpmu_update_blogs_date",
        "body": "wpmu_update_blogs_date(  )",
        "description": "Update the last_updated field for the current site."
    },
    "Function: wpmu_validate_blog_signup": {
        "prefix": "wpmu_validate_blog_signup",
        "body": "wpmu_validate_blog_signup( ${1:\\$blogname:string}, ${2:\\$blog_title:string}, ${3:\\$user:WP_User|string} )",
        "description": "Processes new site registrations."
    },
    "Function: wpmu_validate_user_signup": {
        "prefix": "wpmu_validate_user_signup",
        "body": "wpmu_validate_user_signup( ${1:\\$user_name:string}, ${2:\\$user_email:string} )",
        "description": "Sanitize and validate data required for a user sign-up."
    },
    "Function: wpmu_welcome_notification": {
        "prefix": "wpmu_welcome_notification",
        "body": "wpmu_welcome_notification( ${1:\\$blog_id:integer}, ${2:\\$user_id:integer}, ${3:\\$password:string}, ${4:\\$title:string}, ${5:\\$meta:array} )",
        "description": "Notify a user that their blog activation has been successful."
    },
    "Function: wpmu_welcome_user_notification": {
        "prefix": "wpmu_welcome_user_notification",
        "body": "wpmu_welcome_user_notification( ${1:\\$user_id:integer}, ${2:\\$password:string}, ${3:\\$meta:array} )",
        "description": "Notify a user that their account activation has been successful."
    },
    "Function: wptexturize": {
        "prefix": "wptexturize",
        "body": "wptexturize( ${1:\\$text:string}, ${2:\\$reset:boolean} )",
        "description": "Replaces common plain text characters into formatted entities"
    },
    "Function: wptexturize_primes": {
        "prefix": "wptexturize_primes",
        "body": "wptexturize_primes( ${1:\\$haystack:string}, ${2:\\$needle:string}, ${3:\\$prime:string}, ${4:\\$open_quote:string}, ${5:\\$close_quote:string} )",
        "description": "Implements a logic tree to determine whether or not &quot;7&#039;.&quot; represents seven feet, then converts the special char into either a prime char or a closing quote char."
    },
    "Function: wpview_media_sandbox_styles": {
        "prefix": "wpview_media_sandbox_styles",
        "body": "wpview_media_sandbox_styles(  )",
        "description": "Returns the URLs for CSS files used in an iframe-sandbox&#039;d TinyMCE media view."
    },
    "Function: write_post": {
        "prefix": "write_post",
        "body": "write_post(  )",
        "description": "Calls wp_write_post() and handles the errors."
    },
    "Function: wxr_authors_list": {
        "prefix": "wxr_authors_list",
        "body": "wxr_authors_list( ${1:\\$post_ids:array|null} )",
        "description": "Output list of authors with posts"
    },
    "Function: wxr_cat_name": {
        "prefix": "wxr_cat_name",
        "body": "wxr_cat_name( ${1:\\$category:object} )",
        "description": "Output a cat_name XML tag from a given category object"
    },
    "Function: wxr_category_description": {
        "prefix": "wxr_category_description",
        "body": "wxr_category_description( ${1:\\$category:object} )",
        "description": "Output a category_description XML tag from a given category object"
    },
    "Function: wxr_cdata": {
        "prefix": "wxr_cdata",
        "body": "wxr_cdata( ${1:\\$str:string} )",
        "description": "Wrap given string in XML CDATA tag."
    },
    "Function: wxr_filter_postmeta": {
        "prefix": "wxr_filter_postmeta",
        "body": "wxr_filter_postmeta( ${1:\\$return_me:boolean}, ${2:\\$meta_key:string} )",
        "description": ""
    },
    "Function: wxr_nav_menu_terms": {
        "prefix": "wxr_nav_menu_terms",
        "body": "wxr_nav_menu_terms(  )",
        "description": "Output all navigation menu terms"
    },
    "Function: wxr_post_taxonomy": {
        "prefix": "wxr_post_taxonomy",
        "body": "wxr_post_taxonomy(  )",
        "description": "Output list of taxonomy terms, in XML tag format, associated with a post"
    },
    "Function: wxr_site_url": {
        "prefix": "wxr_site_url",
        "body": "wxr_site_url(  )",
        "description": "Return the URL of the site"
    },
    "Function: wxr_tag_description": {
        "prefix": "wxr_tag_description",
        "body": "wxr_tag_description( ${1:\\$tag:object} )",
        "description": "Output a tag_description XML tag from a given tag object"
    },
    "Function: wxr_tag_name": {
        "prefix": "wxr_tag_name",
        "body": "wxr_tag_name( ${1:\\$tag:object} )",
        "description": "Output a tag_name XML tag from a given tag object"
    },
    "Function: wxr_term_description": {
        "prefix": "wxr_term_description",
        "body": "wxr_term_description( ${1:\\$term:object} )",
        "description": "Output a term_description XML tag from a given term object"
    },
    "Function: wxr_term_meta": {
        "prefix": "wxr_term_meta",
        "body": "wxr_term_meta( ${1:\\$term:WP_Term} )",
        "description": "Output term meta XML tags for a given term object."
    },
    "Function: wxr_term_name": {
        "prefix": "wxr_term_name",
        "body": "wxr_term_name( ${1:\\$term:object} )",
        "description": "Output a term_name XML tag from a given term object"
    },
    "Function: xfn_check": {
        "prefix": "xfn_check",
        "body": "xfn_check( ${1:\\$class:string}, ${2:\\$value:string}, ${3:\\$deprecated:mixed} )",
        "description": "Display checked checkboxes attribute for xfn microformat options."
    },
    "Function: xmlrpc_getpostcategory": {
        "prefix": "xmlrpc_getpostcategory",
        "body": "xmlrpc_getpostcategory( ${1:\\$content:string} )",
        "description": "Retrieve the post category or categories from XMLRPC XML."
    },
    "Function: xmlrpc_getposttitle": {
        "prefix": "xmlrpc_getposttitle",
        "body": "xmlrpc_getposttitle( ${1:\\$content:string} )",
        "description": "Retrieve post title from XMLRPC XML."
    },
    "Function: xmlrpc_pingback_error": {
        "prefix": "xmlrpc_pingback_error",
        "body": "xmlrpc_pingback_error( ${1:\\$ixr_error:IXR_Error} )",
        "description": "Default filter attached to xmlrpc_pingback_error."
    },
    "Function: xmlrpc_removepostdata": {
        "prefix": "xmlrpc_removepostdata",
        "body": "xmlrpc_removepostdata( ${1:\\$content:string} )",
        "description": "XMLRPC XML content without title and category elements."
    },
    "Function: zeroise": {
        "prefix": "zeroise",
        "body": "zeroise( ${1:\\$number:integer}, ${2:\\$threshold:integer} )",
        "description": "Add leading zeros when necessary."
    }
}